# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2023-05-16 09:25+0200\n"
"PO-Revision-Date: 2025-04-04 01:42+0000\n"
"Last-Translator: MuryanBKS <muryanbks+github@gmail.com>\n"
"Language-Team: Chinese (Traditional Han script) <https://hosted.weblate.org/"
"projects/learn-gdscript-from-zero/lesson-8-defining-variables/zh_Hant/>\n"
"Language: zh_Hant\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.11-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-8-defining-variables/lesson.tres:13
msgid ""
"In the previous lesson, you used a predefined member variable named "
"[code]position[/code].\n"
"\n"
"In your projects, you will need to define your own variables.\n"
"\n"
"Imagine that you need to track the player's health in your game.\n"
"\n"
"They may start with [code]5[/code] health points. When taking a hit, the "
"health should go down to [code]4[/code]. After another hit, it should be "
"[code]3[/code]. And so on.\n"
"\n"
"To keep track of that, you can create a variable named [code]health[/code] "
"to which you add and subtract points.\n"
"\n"
"The example below introduces the [code]print()[/code] function, which "
"outputs its argument to the output box on the left.\n"
"\n"
"Click the [i]run()[/i] button to instantly run the entire function, and "
"click the [i]step[/i] button to execute lines of code one by one.\n"
"\n"
"The [i]Debugger[/i] panel at the bottom shows the current value of the "
"[code]health[/code] variable."
msgstr ""
"在前面的課程中，你使用了名為 [code]position[/code] 的預設成員變數。\n"
"\n"
"在你的專案中，你將需要定義自己的變數。\n"
"\n"
"假設你需要追蹤遊戲中玩家的生命值。\n"
"\n"
"他們一開始可能有 [code]5[/code] 點生命值。當受到攻擊時，生命值應該降到 [code]"
"4[/code]。再受到一次攻擊後，生命值應該降到 [code]3[/code]，依此類推。\n"
"\n"
"為了追蹤這些數值，你可以創建一個名為 [code]health[/code] "
"的變數，並在其中加減生命值。\n"
"\n"
"下面的範例介紹了 [code]print()[/code] 函式，它將輸出其引數到左側的輸出框。\n"
"\n"
"點擊[b]執行[/b]按鈕可以立即執行整個函式，點擊[b]單步執行[/b]"
"按鈕則可以逐行執行程式碼。\n"
"\n"
"位於底部的[b]除錯[/b]面板會顯示當前 [code]health[/code] 變數的值。"

#: course/lesson-8-defining-variables/lesson.tres:47
msgid ""
"After executing the first two lines of code, you will have a health variable "
"storing a value of [code]4[/code].\n"
"\n"
"Below, we'll break down how you define new variables and explain the "
"[code]print()[/code] function."
msgstr ""
"執行前兩行程式碼後，你將擁有一個儲存數值 [code]4[/code] 的 health 變數。\n"
"\n"
"接下來，我們將逐步解釋如何定義新的變數，以及說明 [code]print()[/code] "
"函式的用途。"

#: course/lesson-8-defining-variables/lesson.tres:57
msgid "Defining a variable"
msgstr "定義一個變數"

#: course/lesson-8-defining-variables/lesson.tres:59
msgid ""
"To use a variable, you must first define it so the computer registers its "
"name.\n"
"\n"
"To do so, you start a line of code with the [code]var[/code] keyword "
"followed by your desired variable name. Like [code]func[/code] stands for "
"[i]function[/i], [code]var[/code] stands for [i]variable[/i].\n"
"\n"
"Variables are case-sensitive, which means [code]health[/code] and "
"[code]Health[/code] are technically different variables. Be careful to use "
"the same capitalization wherever you refer to the same variable, or you "
"could be reading or writing to a different variable.\n"
"\n"
"The following line defines a [code]health[/code] variable pointing to no "
"value. You can think of it as creating a product label you have yet to stick "
"onto something."
msgstr ""
"要使用變數，你必須先定義它，讓電腦能夠識別其名稱。\n"
"\n"
"為此，你需要在程式碼的一行開頭使用 [code]var[/code] "
"關鍵字，後面加上你想要的變數名稱。就像 [code]func[/code] 代表[b]函式[/b]"
"一樣， [code]var[/code] 代表[b]變數[/b]。\n"
"\n"
"變數名稱是區分大小寫的，這意味著 [code]health[/code] 和 [code]Health[/code] "
"在技術上是不同的變數。記得在引用同一個變數時，大小寫必須一致，否則你可能會讀"
"取或寫入到不同的變數。\n"
"\n"
"以下這行程式碼定義了一個指向空值的 [code]health[/code] "
"變數。你可以將其視為做了一個還沒貼在商品上的產品標籤。"

#: course/lesson-8-defining-variables/lesson.tres:85
msgid ""
"Like with functions, a member variable's name must be unique inside a given "
"code file. Creating two variables next to each other with the same name will "
"cause an error."
msgstr "就像函式一樣，成員變數的名稱在同一個程式碼檔案中必須是唯一的。若在相鄰的兩行"
"程式碼中創建了相同名稱的變數，將會造成錯誤。"

#: course/lesson-8-defining-variables/lesson.tres:105
msgid ""
"To use a variable, you want to assign it a starting value. You can do so "
"using the equal sign (=).\n"
"\n"
"This code assigns the value [code]100[/code] to a new variable named "
"[code]health[/code]."
msgstr ""
"要使用變數，你需要為它指定一個起始值。你可以使用等號（=）來達成這個目的。\n"
"\n"
"這段程式碼將數值 [code]100[/code] 指定給一個名為 [code]health[/code] "
"的新變數。"

#: course/lesson-8-defining-variables/lesson.tres:127
msgid ""
"After defining your variable, you can access its value by writing the "
"variable's name."
msgstr "定義完變數後，你可以透過寫出變數的名稱來存取它的值。"

#: course/lesson-8-defining-variables/lesson.tres:147
msgid ""
"The code above will display the number [code]100[/code] to some output "
"window.\n"
"\n"
"Notice we don't use the [code]var[/code] keyword anymore as we only need it "
"to [i]define[/i] a variable.\n"
"\n"
"Also, once you define a variable, you can change its value anytime with the "
"equal sign."
msgstr ""
"上面的程式碼將會在某個輸出視窗顯示數字 [code]100[/code]。\n"
"\n"
"請注意，我們不再使用 [code]var[/code] 關鍵字，因為它只需要在[b]定義[/b]"
"變數時使用。\n"
"\n"
"此外，一旦定義了變數，你可以隨時使用等號來更改它的值。"

#: course/lesson-8-defining-variables/lesson.tres:169
msgid "About the print function"
msgstr "關於 print 函式"

#: course/lesson-8-defining-variables/lesson.tres:171
msgid ""
"The [code]print()[/code] function is generally the first function you learn "
"in academic programming courses.\n"
"\n"
"It sends (\"prints\") the message or value you give it to some output "
"window, often a black window with plain white text."
msgstr ""
"[code]print()[/code] 函式通常是你在學校程式課程中學到的第一個函式。\n"
"\n"
"它會將你提供的訊息或數值傳送（\"列印\""
"）到某個輸出視窗，通常是一個黑色視窗，顯示純白色的文字。"

#: course/lesson-8-defining-variables/lesson.tres:183
msgid ""
"Programmers often use [code]print()[/code] to quickly check the value of "
"their variables when their game runs.\n"
"\n"
"In the app, we made a special output window that captures calls to "
"[code]print()[/code] and displays a card to make it friendlier for you."
msgstr ""
"程式設計師常常使用 [code]print()[/code] "
"來快速檢查他們的變數在遊戲運行時的值。\n"
"\n"
"在這個應用程式中，我們製作了一個特殊的輸出視窗，捕捉對 [code]print()[/code] "
"的呼叫，並顯示卡片，讓它對你來說更友善。"

#: course/lesson-8-defining-variables/lesson.tres:205
msgid ""
"Here, the verb [i]print[/i] means \"to send information to display on the "
"screen.\"\n"
"\n"
"The function \"prints\" things on your computer display; It does not relate "
"to printers."
msgstr ""
"在這裡，動詞[b]print[/b]的意思是「將資訊傳送到螢幕上顯示」。\n"
"\n"
"這個函式是「列印」內容到你的電腦顯示器上；它與印表機無關。"

#: course/lesson-8-defining-variables/lesson.tres:215
msgid "Variables are like labels"
msgstr "變數就像標籤"

#: course/lesson-8-defining-variables/lesson.tres:217
msgid ""
"As we hinted above, in GDScript, variables work a bit like labels.\n"
"\n"
"Assigning a value to a variable is like taking your label (the variable) and "
"sticking it onto some item (the value)."
msgstr ""
"正如我們在上面提到的，在 GDScript 中，變數有點像標籤。\n"
"\n"
"將一個值指定給變數就像是把你的標籤（變數）貼到某個物品（值）上一樣。"

#: course/lesson-8-defining-variables/lesson.tres:229
msgid ""
"Like a supermarket has a database of product labels, the computer keeps a "
"list of all variables in your code.\n"
"\n"
"Given the variable name, the computer can look up the attached value.\n"
"\n"
"It has an important consequence. In GDScript, you can stick that label to "
"any other value."
msgstr ""
"就像超市有一個商品標籤的資料庫一樣，電腦會保持你程式碼中所有變數的清單。\n"
"\n"
"根據變數名稱，電腦可以查找並顯示其所附的值。\n"
"\n"
"這有一個重要的效果。在 GDScript 中，你可以將該標籤貼到任何其他值上。"

#: course/lesson-8-defining-variables/lesson.tres:253
msgid ""
"The above code is like taking a label from the appropriate item and sticking "
"it to the wrong thing:\n"
"\n"
"- At line 2, the [code]health[/code] variable holds a number.\n"
"- From line 3, [code]health[/code] holds text.\n"
"\n"
"The computer will let you do that! The code's syntax and \"grammar\" are "
"correct, but it's not good.\n"
"\n"
"Variable names should describe the value they contain, so a [code]health[/"
"code] variable with a text value will confuse your future self and other "
"coders. It can also cause errors in your game.\n"
"\n"
"Later on, we'll see how to avoid this issue with [i]variable types[/i]. For "
"now, let's practice creating variables!"
msgstr ""
"上面的程式碼就像是把一個標籤從正確的物品上取下，然後貼到錯誤的物品上：\n"
"\n"
"- 在第 2 行， [code]health[/code] 變數儲存的是數字。\n"
"- 從第 3 行開始， [code]health[/code] 儲存的是文字。\n"
"\n"
"電腦會允許這樣做！程式碼的語法和「文法」是正確的，但這樣做並不好。\n"
"\n"
"變數名稱應該描述它所包含的值，因此一個儲存文字的 [code]health[/code] "
"變數會讓你未來回顧時感到困惑，並且會讓其他程式設計師也感到困惑。它還可能會在"
"遊戲中引發錯誤。\n"
"\n"
"稍後我們將看到如何使用[b]變數類型[/b]"
"來避免這個問題。現在，讓我們來練習創建變數吧！"

#: course/lesson-8-defining-variables/lesson.tres:270
msgid "Define a health variable"
msgstr "定義一個 health 變數"

#: course/lesson-8-defining-variables/lesson.tres:271
msgid ""
"Define a variable named [code]health[/code] with a starting value of "
"[code]100[/code].\n"
"\n"
"You can define variables inside or outside functions. In this practice, you "
"shouldn't create a function."
msgstr ""
"定義一個名為 [code]health[/code] 的變數，並給予它一個起始值 [code]100[/"
"code]。\n"
"\n"
"你可以在函式內部或外部定義變數。在這次練習中，你不需要創建函式。"

#: course/lesson-8-defining-variables/lesson.tres:282
msgid ""
"In this practice, you'll define your first variable and give it a specific "
"starting value."
msgstr "在這次練習中，你將定義你的第一個變數並給它一個特定的起始值。"

#: course/lesson-8-defining-variables/lesson.tres:286
msgid "Defining Your Own Variables"
msgstr "定義你自己的變數"
