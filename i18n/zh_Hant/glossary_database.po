# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2025-06-14 15:02+0200\n"
"PO-Revision-Date: 2025-04-05 11:59+0000\n"
"Last-Translator: MuryanBKS <muryanbks+github@gmail.com>\n"
"Language-Team: Chinese (Traditional Han script) <https://hosted.weblate.org/"
"projects/learn-gdscript-from-zero/glossary_database/zh_Hant/>\n"
"Language: zh_Hant\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.11-dev\n"
"Generated-By: Babel 2.9.1\n"

#. Reference: member function
#: course/glossary.csv:6
msgid "member function"
msgstr "成員函式"

#. Reference: member function
#: course/glossary.csv:6
msgid "member functions"
msgstr "成員函式"

#. Reference: member function
#: course/glossary.csv:6
msgid ""
"Member functions are functions attached to a specific value type, like "
"arrays, strings, or dictionaries. We also call them methods.\n"
"\n"
"For example, arrays have member functions like [code]array.append()[/code].\n"
"\n"
"You can only call the function on an array, using the access operator "
"([code].[/code]) to access it, as shown above."
msgstr ""
"成員函式是附加在特定值類型上的函式，例如陣列、字串或字典。我們也稱它們為方法"
"(method)。\n"
"\n"
"例如，陣列有像是 [code]array.append()[/code] 這樣的成員函式。\n"
"\n"
"你只能在陣列上呼叫這些函式，並使用存取運算子（[code].[/code]）來存取它，如上"
"所示。"

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variable"
msgstr "成員變數"

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variables"
msgstr "成員變數"

#. Reference: member variable
#: course/glossary.csv:9
msgid ""
"Member variables are variables attached to a specific value type, like a "
"vector's [code]x[/code] and [code]y[/code] sub-variables. We also call them "
"[i]properties[/i] or [i]fields[/i] of the vector.\n"
"\n"
"To access a member variable, you must first write the value's name followed "
"by the access operator ([code].[/code]). For example, [code]position.x[/"
"code]."
msgstr ""
"成員變數是附加在特定值類型上的變數，例如向量的 [code]x[/code] 和 [code]y[/"
"code] 子變數。我們也稱它們為向量的[b]屬性[/b]或[b]欄位[/b]。\n"
"\n"
"要存取成員變數，必須先寫出值的名稱，接著使用存取運算子（[code].[/code]）。例"
"如，[code]position.x[/code]。"

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameter"
msgstr "參數"

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameters"
msgstr "參數"

#. Reference: parameter
#: course/glossary.csv:12
msgid ""
"A parameter is a variable you create as part of a function definition.\n"
"\n"
"It allows you to reuse the function more by having values that vary in the "
"function's body."
msgstr ""
"參數是你在函式定義中創建的變數。\n"
"\n"
"它讓你可以透過在函式內部使用不同的值來重複使用該函式。"

#. Reference: radian
#: course/glossary.csv:17
msgid "radian"
msgstr "弧度"

#. Reference: radian
#: course/glossary.csv:17
msgid "radians"
msgstr "弧度"

#. Reference: radian
#: course/glossary.csv:17
msgid ""
"A radian is a unit of measurement of angles based on the circle's "
"circumference.\n"
"\n"
"We tend to use degrees more in our daily lives, but in computer programming, "
"and especially in games, radians are common.\n"
"\n"
"An angle of [code]2 * PI[/code] radians corresponds to 360 degrees. And an "
"angle of [code]PI[/code] radians corresponds to 180 degrees."
msgstr ""
"弧度是根據圓周長來測量角度的單位。\n"
"\n"
"我們在日常生活中比較常使用度數，但在程式設計，尤其是遊戲開發中，弧度更為常"
"見。\n"
"\n"
"[code]2 * PI[/code] 弧度等於 360 度，而 [code]PI[/code] 弧度等於 180 度。"

#. Reference: type
#: course/glossary.csv:20
msgid "type"
msgstr "類型"

#. Reference: type
#: course/glossary.csv:20
msgid "types"
msgstr "類型"

#. Reference: type
#: course/glossary.csv:20
msgid ""
"In computer programming, a type is the class of a value. For example, whole "
"numbers like [code]3[/code], [code]11[/code], and [code]255462[/code] are "
"all of type [code]int[/code] (short for integer).\n"
"\n"
"The computer uses types to determine which operations are valid between two "
"values and when they're undefined."
msgstr ""
"在程式設計中，類型是值的類別。例如像 [code]3[/code]、[code]11[/code] 和 "
"[code]255462[/code] 這些整數都是 [code]int[/code](整數 integer 縮寫)。\n"
"\n"
"電腦透過類型來判斷兩個值之間哪些運算是有效的，哪些是未定義的。"

#. Reference: iteration
#: course/glossary.csv:23
msgid "iteration"
msgstr "迭代"

#. Reference: iteration
#: course/glossary.csv:23
msgid "iterations"
msgstr "迭代"

#. Reference: iteration
#: course/glossary.csv:23
msgid ""
"In computer code, an iteration is one repetition of some process or code. We "
"typically use the term with loops, where one iteration is one run of the "
"loop's code.\n"
"\n"
"When talking of algorithms, an iteration can mean a full pass of the "
"algorithm on a data set."
msgstr ""
"在程式碼中，迭代是某個過程或程式碼的一次重複。我們通常在迴圈中使用這個術語，"
"其中一次迭代就是迴圈程式碼的一次執行。\n"
"\n"
"在討論算法時，迭代可以指算法對資料集的完整處理一次。"

#. Reference: vector
#: course/glossary.csv:28
msgid "vector"
msgstr "向量"

#. Reference: vector
#: course/glossary.csv:28
msgid "vectors"
msgstr "向量"

#. Reference: vector
#: course/glossary.csv:28
msgid ""
"In math, a vector is a list of numbers. In games, we often use 2D and 3D "
"vectors: respectively, lists of two and three numbers.\n"
"\n"
"We use that to represent a direction and magnitude or intensity in space. "
"For example, you can use a vector to represent the direction and speed at "
"which a character or a vehicle moves.\n"
"\n"
"Vectors can seem daunting at first because they are pretty abstract, but as "
"you will see, they'll simplify code tremendously."
msgstr ""
"在數學中，向量是數字的列表。在遊戲中，我們常使用 2D 和 3D 向量，分別是兩個和"
"三個數字的列表。\n"
"\n"
"我們用向量來表示空間中的方向和大小或強度。例如，你可以使用向量來表示角色或交"
"通工具移動的方向和速度。\n"
"\n"
"向量一開始看起來可能有些令人生畏，因為它們相當抽象，但如你所見，它們會大大簡"
"化程式碼。"

#. Reference: argument
#: course/glossary.csv:37
msgid "argument"
msgstr "引數（argument）"

#. Reference: argument
#: course/glossary.csv:37
msgid "arguments"
msgstr "引數（argument）"

#. Reference: argument
#: course/glossary.csv:37
msgid ""
"An argument is a value that you pass to a function when calling the "
"function. For example, in the call [code]rotate(0.5)[/code], the value "
"[code]0.5[/code] in the parentheses is an argument.\n"
"\n"
"A function can receive no arguments, one argument, or multiple arguments. "
"Arguments can be mandatory or optional.\n"
"\n"
"When a function takes multiple arguments, you separate the values with "
"commas, like in this function call: [code]jump(50, 100)[/code]\n"
"\n"
"When [i]calling[/i] a function, we name the values passed in parentheses "
"[i]arguments[/i].\n"
"\n"
"When writing a function definition, however, we talk about function "
"[i]parameters[/i]. In the following example, the names [code]x[/code] and "
"[code]y[/code] are [i]parameters[/i]."
msgstr ""
"引數是你在呼叫函式時傳遞給函式的值。例如，在呼叫 [code]rotate(0.5)[/code] "
"時，括號中的值 [code]0.5[/code] 就是引數。\n"
"\n"
"函式可以接收零個、一个或多個引數。引數可以是必要的，也可以是選擇性的。\n"
"\n"
"當一個函式接受多個引數時，你可以用逗號將值分開，就像這個函式呼叫："
"[code]jump(50, 100)[/code]。\n"
"\n"
"當[b]呼叫[/b]函式時，我們稱傳遞進括號中的值為 [ i]引數[/b]。\n"
"\n"
"然而，在寫函式定義時，我們討論的是函式[b]參數（parameters）[/b]。在以下範例"
"中，[code]x[/code] 和 [code]y[/code] 是[b]參數[/b]。"

#. Reference: array
#: course/glossary.csv:44
msgid "array"
msgstr "陣列"

#. Reference: array
#: course/glossary.csv:44
msgid "arrays"
msgstr "陣列"

#. Reference: array
#: course/glossary.csv:44
msgid ""
"An array is a list of values. In GDScript, arrays can contain [i]any[/i] "
"types of value.\n"
"\n"
"To create an array, you write comma-separated values in square brackets: "
"[code]var three_numbers = [1, 2, 3][/code]\n"
"\n"
"In games, we use arrays all the time to store lists of characters in a "
"party, lists of items in inventory, lists of spells the player unlocked, and "
"so on. They're everywhere.\n"
"\n"
"Arrays are a fundamental value type in computer programming. You'll find "
"arrays in pretty much any programming language."
msgstr ""
"陣列是值的列表。在 GDScript 中，陣列可以包含[b]任何[/b]類型的值。\n"
"\n"
"要創建陣列，你可以在方括號中寫下用逗號分隔的值：[code]var three_numbers = "
"[1, 2, 3][/code]\n"
"\n"
"在遊戲中，我們經常使用陣列來儲存角色隊伍的列表、背包中的物品列表、玩家解鎖的"
"魔法列表等等。它們無處不在。\n"
"\n"
"陣列是程式設計中一個基本的值類型。你幾乎會在任何程式語言中找到陣列。"

#. Reference: assign
#: course/glossary.csv:45
msgid "assign"
msgstr "指派"

#. Reference: assign
#: course/glossary.csv:45
msgid ""
"Assigning a value to a variable means that you store a value inside the "
"variable. You do this with the equal sign ([code]=[/code])."
msgstr ""
"將值指派給變數意味著將一個值儲存在該變數中。你可以使用等號（[code]=[/code]）"
"來進行指派。"

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionary"
msgstr "字典"

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionaries"
msgstr "字典"

#. Reference: dictionary
#: course/glossary.csv:52
msgid ""
"A dictionary is a data structure that maps values with key-value pairs. When "
"you give the dictionary a key, it finds and gives you back the corresponding "
"value.\n"
"\n"
"In GDScript, keys can be many things. We often use text strings or numbers, "
"but you're not limited to that. A [code]Vector2[/code] can also be a valid "
"key, which is handy to map a grid cell to a unit or an item in a grid-based "
"game.\n"
"\n"
"You will often use dictionaries to associate bits of data in your games. For "
"example, we could use them to associate an equipment's name with its weapon "
"stats in a database.\n"
"\n"
"Like arrays, they are a fundamental data type that you will see in many "
"programming languages and use a lot."
msgstr ""
"字典是一種資料結構，透過鍵值對來映射值。當你提供字典一個鍵時，它會找到並回傳"
"對應的值。\n"
"\n"
"在 GDScript 中，鍵可以是許多不同的東西。我們常使用文字字串或數字，但不僅限於"
"這些。像是 [code]Vector2[/code] 也可以作為有效的鍵，這在將格子座標映射到單位"
"或在基於格子的遊戲中映射物品時非常有用。\n"
"\n"
"你會經常在遊戲中使用字典來關聯資料。例如，我們可以用它來將裝備的名稱與其武器"
"數值在資料庫中對應起來。\n"
"\n"
"像陣列一樣，字典是程式語言中一個基本的資料型別，你會在許多程式語言中看到並大"
"量使用它。"

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loop"
msgstr "for 迴圈"

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loops"
msgstr "for 迴圈"

#. Reference: for loop
#: course/glossary.csv:59
msgid ""
"A for loop instructs the computer to repeat a set of instructions once for "
"each value in an array.\n"
"\n"
"In each loop iteration, the compiler extracts one value from the array and "
"gives you access to it in the loop's body.\n"
"\n"
"For loops run code a limited amount of times: one per value in the array. It "
"is different from while loops that keep repeating code until a condition is "
"met.\n"
"\n"
"We recommend favoring for loops when you can. They're safer and easier to "
"use than while loops."
msgstr ""
"for 迴圈指示電腦對陣列中的每個值重複執行一組指令一次。\n"
"\n"
"在每次迴圈迭代中，編譯器會從陣列中提取一個值並讓你在迴圈的主體中使用它。\n"
"\n"
"for 迴圈執行程式碼的次數是有限的：每個陣列中的值執行一次。這與 while 迴圈不"
"同，後者會一直重複程式碼直到符合條件為止。\n"
"\n"
"我們建議在可能的情況下使用 for 迴圈。它比 while 迴圈更安全且更容易使用。"

#. Reference: function
#: course/glossary.csv:64
msgid "function"
msgstr "函式"

#. Reference: function
#: course/glossary.csv:64
msgid "functions"
msgstr "函式"

#. Reference: function
#: course/glossary.csv:64
msgid ""
"A function is a group of code instructions you give a name. When you define "
"a function, you can call it any time to run all the instructions it "
"contains.\n"
"\n"
"You can modify a function's behavior with parameters. Parameters are "
"variable names that you write in the function definition. You can then use "
"them in the function's body to make your code adapt to different cases.\n"
"\n"
"Also, functions can optionally return a value to the code calling it."
msgstr ""
"函式是你為一組程式碼指令指定的名稱。當你定義一個函式後，你可以隨時呼叫它來執"
"行其中所有的指令。\n"
"\n"
"你可以透過參數來修改函式的行為。參數是你在函式定義中寫的變數名稱，然後你可以"
"在函式的主體中使用它們，使程式碼能夠適應不同的情況。\n"
"\n"
"此外，函式也可以選擇性地將一個值回傳給呼叫它的程式碼。"

#. Reference: increment
#: course/glossary.csv:65
msgid "increment"
msgstr "遞增"

#. Reference: increment
#: course/glossary.csv:65
msgid "increments"
msgstr "遞增"

#. Reference: increment
#: course/glossary.csv:65
msgid "An increment is the amount by which a value changes in your code."
msgstr "遞增是指程式碼中一個值變動的量。"

#. Reference: instruction
#: course/glossary.csv:68
msgid "instruction"
msgstr "指令"

#. Reference: instruction
#: course/glossary.csv:68
msgid "instructions"
msgstr "指令"

#. Reference: instruction
#: course/glossary.csv:68
msgid ""
"In computer programming, instructions are a single operation the computer "
"recognizes and can execute.\n"
"\n"
"For example, a function call, an addition, or assigning a value to a "
"variable."
msgstr ""
"在程式設計中，指令是電腦可以識別並執行的單一操作。\n"
"\n"
"例如函式呼叫、加法運算、或是將值指派給變數。"

#. Reference: variable
#: course/glossary.csv:77
msgid "variable"
msgstr "變數"

#. Reference: variable
#: course/glossary.csv:77
msgid "variables"
msgstr "變數"

#. Reference: variable
#: course/glossary.csv:77
msgid ""
"Variables are a tool to give a name to values you want to store in your code "
"and change over time.\n"
"\n"
"For example, a character's health: when the character takes a hit, you want "
"it to go down. When healing, you want the health to go back up.\n"
"\n"
"You can create a variable named [code]health[/code] to represent the "
"health.\n"
"\n"
"Then, every time you write the keyword [code]health[/code] in your code, the "
"computer will fetch the corresponding value in its memory for you.\n"
"\n"
"Variables work a bit like product labels in a supermarket. They are names "
"that you attach to some value. Any time, you can take the label and stick it "
"onto a new product or, in that case, a new value."
msgstr ""
"變數是一種工具，用來為你想要在程式中儲存並隨時間變動的值取的名字。\n"
"\n"
"例如，角色的生命值：當角色受到攻擊時，你希望它下降；當治療時，你希望生命值回"
"升。\n"
"\n"
"你可以創建一個名為 [code]health[/code] 的變數來表示生命值。\n"
"\n"
"然後，每當你在程式碼中寫下關鍵字 [code]health[/code] 時，電腦就會從記憶體中抓"
"取對應的值。\n"
"\n"
"變數有點像超市中的產品標籤。它們是你附加在某個值上的名稱。任何時候，你都可以"
"將標籤取下並貼到新的產品上，或者在這個情況就是貼到新的值上。"

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loop"
msgstr "while 迴圈"

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loops"
msgstr "while 迴圈"

#. Reference: while loop
#: course/glossary.csv:84
msgid ""
"A while loop instructs the computer to keep running code based on a "
"condition. While the condition is true, the loop keeps running.\n"
"\n"
"When coding while loops, you must be careful: they will keep running "
"infinitely and freeze your game if you get the condition wrong.\n"
"\n"
"That's why we recommend using the safer for loop whenever you can.\n"
"\n"
"However, there are still essential cases in which we use while loops, like "
"processing files, processing computer code, or for powerful algorithms."
msgstr ""
"while 迴圈指示電腦根據條件繼續執行程式碼。當條件為真時，迴圈會繼續執行。\n"
"\n"
"在編寫 while 迴圈時，你必須小心：如果條件設定錯誤，迴圈會無限執行並凍結遊"
"戲。\n"
"\n"
"因此，我們建議在可能的情況下使用更安全的 for 迴圈。\n"
"\n"
"然而，仍然有一些必要的情況需要使用 while 迴圈，例如處理檔案、處理電腦程式碼或"
"用於強大的算法。"

#. Reference: body
#: course/glossary.csv:85
msgid "body"
msgstr "主體（body）"

#. Reference: body
#: course/glossary.csv:85
msgid ""
"We talk about a loop or a function's body to refer to the lines of code that "
"are part of the loop or function."
msgstr "我們提到迴圈或函式的主體（body）是指那些屬於該迴圈或函式的程式碼行。"

#. Reference: return
#: course/glossary.csv:88
msgid "return"
msgstr "回傳（return）"

#. Reference: return
#: course/glossary.csv:88
msgid ""
"Returning a value is the process of sending a value to the place where you "
"call a function.\n"
"\n"
"It happens when a function uses the [code]return[/code] keyword followed by "
"a value, for example: [code]return -1[/code]."
msgstr ""
"回傳值是將一個值傳送到呼叫函式的地方的過程。\n"
"\n"
"當函式使用 [code]return[/code] 關鍵字後面加上一個值時，就會發生回傳，例如："
"[code]return -1[/code]。"

#. Reference: library
#: course/glossary.csv:89
msgid "library"
msgstr "函式庫（library）"

#. Reference: library
#: course/glossary.csv:89
msgid "libraries"
msgstr "函式庫（libraries）"

#. Reference: library
#: course/glossary.csv:89
msgid ""
"A collection of valuable and reusable code bundled together by other "
"programmers to save you time. All programmers use code libraries."
msgstr ""
"函式庫是由其他程式設計師整理並打包的一組有價值且可重複使用的程式碼，目的是為"
"了節省你的時間。所有程式設計師都會使用程式碼函式庫。"

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprite"
msgstr "精靈（sprite）"

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprites"
msgstr "精靈（sprites）"

#. Reference: sprite
#: course/glossary.csv:90
msgid ""
"In computer graphics, a sprite is an image you display on the screen. We "
"generally use this word to talk about moving images, like a character, a "
"monster, or an item falling on the ground."
msgstr ""
"在電腦圖形中，精靈是你顯示在螢幕上的影像。我們通常用這個詞來指代移動的影像，"
"例如角色、怪物或掉落在地上的物品。"
