# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2022-06-12 11:07+0200\n"
"PO-Revision-Date: 2025-04-05 11:59+0000\n"
"Last-Translator: MuryanBKS <muryanbks+github@gmail.com>\n"
"Language-Team: Chinese (Traditional Han script) <https://hosted.weblate.org/"
"projects/learn-gdscript-from-zero/lesson-23-append-to-arrays/zh_Hant/>\n"
"Language: zh_Hant\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.11-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-23-append-to-arrays/lesson.tres:13
msgid ""
"In previous lessons, you learned how to create arrays to store lists of "
"values and how to loop over them. It's nice, but you won't go far with only "
"that.\n"
"\n"
"The real strength of arrays is that you can add and remove values from them "
"at any time. It allows you to [i]queue[/i] or [i]stack[/i] data."
msgstr ""
"在先前的課程中，你學習了如何建立陣列來儲存值列表，並且使用迴圈來遍歷它們。這"
"很不錯，但僅靠這些還不夠。\n"
"\n"
"陣列的真正強大之處在於你可以隨時新增或移除其中的值。這使你能夠建立資料的[b]"
"佇列(queue)[/b]或[b]堆疊(stack)[/b]。"

#: course/lesson-23-append-to-arrays/lesson.tres:25
msgid "For now, let's take another example."
msgstr "現在，讓我們來看另一個例子。"

#: course/lesson-23-append-to-arrays/lesson.tres:33
msgid "Tracking orders in a restaurant management game"
msgstr "在餐廳經營遊戲中追蹤訂單"

#: course/lesson-23-append-to-arrays/lesson.tres:35
msgid ""
"You're making a restaurant management game where customers place orders, and "
"you need to handle them as they come.\n"
"\n"
"In this game, customers order meals that end up in a queue. You need to "
"prepare them in the kitchen.\n"
"\n"
"In this example, we simulate orders arriving and getting completed over time."
msgstr ""
"你正在製作一款餐廳經營遊戲，顧客會下訂單，而你需要按順序處理它們。\n"
"\n"
"在這款遊戲中，顧客的訂單會進入一個隊列，你需要在廚房內準備這些餐點。\n"
"\n"
"在這個範例中，我們將模擬訂單隨時間到達並被完成的過程。"

#: course/lesson-23-append-to-arrays/lesson.tres:59
msgid ""
"How do you keep track of pending and completed orders? With an array!\n"
"\n"
"When a customer purchases a meal, you want to [i]append[/i] it to the array. "
"Then, as you complete a meal in the kitchen and serve it, you want to remove "
"it from the array.\n"
"\n"
"You can do that with the [code]append()[/code] and the [code]pop_front()[/"
"code] functions of the array, respectively.\n"
"\n"
"Try to read the code below before moving on. Don't worry if not everything "
"makes sense, as we'll break it all down."
msgstr ""
"你要如何追蹤未完成與已完成的訂單？答案就是使用陣列！\n"
"\n"
"當顧客點餐時，你需要將餐點[b]新增[/b]"
"到陣列中。然後，當你在廚房完成餐點並上菜時，你需要將它從陣列中移除。\n"
"\n"
"你可以分別使用陣列的 [code]append()[/code] 和 [code]pop_front()[/code] "
"函式來完成這些操作。\n"
"\n"
"在繼續之前，試著閱讀下面的程式碼。如果有些地方不太理解也沒關係，接下來我們會"
"逐步解析。"

#: course/lesson-23-append-to-arrays/lesson.tres:85
msgid ""
"Notice how we call some functions by writing a dot after a variable name. "
"Like a given value type can have sub-variables, it can also have its own "
"functions.\n"
"\n"
"Functions like [code]append()[/code] and [code]pop_front()[/code] only exist "
"on arrays. That's why to call them, we need to access it from the array "
"using the dot: [code]array.append()[/code]."
msgstr ""
"請注意，我們在某些變數名稱後面加上點來呼叫函式。就像特定的數值類型可以有子變"
"數一樣，它們也可以擁有自己的函式。\n"
"\n"
"像 [code]append()[/code] 和 [code]pop_front()[/code] "
"這類的函式只存在於陣列中。因此，當我們要呼叫它們時，必須透過陣列本身來存取，"
"也就是使用點號：[code]array.append()[/code]。"

#: course/lesson-23-append-to-arrays/lesson.tres:97
msgid ""
"Let's break down the code.\n"
"\n"
"We queue orders in the [code]waiting_orders[/code] array by appending them "
"to the array."
msgstr ""
"讓我們來解析這段程式碼。\n"
"\n"
"我們透過將訂單加入 [code]waiting_orders[/code] 陣列的方式，將它們排入隊列。"

#: course/lesson-23-append-to-arrays/lesson.tres:119
msgid ""
"We can use a string to represent a meal when calling the [code]add_order()[/"
"code] function."
msgstr "我們可以在呼叫 [code]add_order()[/code] 函式時，使用字串來表示餐點。"

#: course/lesson-23-append-to-arrays/lesson.tres:139
msgid ""
"When completing an order, we remove it from the [code]waiting_orders[/code] "
"array by calling its [code]pop_front()[/code] function. This function gives "
"us the order back, which allows us to assign it to a temporary variable."
msgstr ""
"當完成一筆訂單時，我們透過呼叫 [code]waiting_orders[/code] 陣列的 [code]"
"pop_front()[/code] "
"函式來將其移除。這個函式會回傳該筆訂單，讓我們可以將其指派給一個暫存變數。"

#: course/lesson-23-append-to-arrays/lesson.tres:159
msgid ""
"We can then append the order to our [code]completed_orders[/code] array."
msgstr "接著我們可以將該訂單加入到 [code]completed_orders[/code] 陣列中。"

#: course/lesson-23-append-to-arrays/lesson.tres:179
msgid ""
"We call arrays like [code]waiting_orders[/code] a [i]queue[/i]: the first "
"element we append to the array is the first one we remove."
msgstr "我們把像是 [code]waiting_orders[/code] 這樣的陣列稱為[b]佇列[/b]"
"：我們先加入的元素會是最先被移除的。"

#: course/lesson-23-append-to-arrays/lesson.tres:187
msgid "What does #... mean?"
msgstr "這裡的 #... 是什麼意思？"

#: course/lesson-23-append-to-arrays/lesson.tres:189
msgid ""
"We write [code]#...[/code] to represent ellipses in the code. It means "
"\"we're completing the function's code.\" We use that to break down code "
"examples and make them easier to learn from.\n"
"\n"
"The hash sign itself marks the start of a code comment. It's a line the "
"computer will ignore, which is why it typically appears in grey."
msgstr ""
"我們寫 [code]#...[/code] "
"來表示程式碼中的省略號。它的意思是「我們正在完成該函式的程式碼。」我們使用這"
"個方式來分解程式碼範例，使學習過程變得更容易理解。\n"
"\n"
"井字符號本身標示了一行程式註解的開始。這是電腦會忽略的內容，因此它通常會以灰"
"色顯示。"

#: course/lesson-23-append-to-arrays/lesson.tres:199
msgid "Using arrays as stacks"
msgstr "使用陣列作為堆疊(stack)"

#: course/lesson-23-append-to-arrays/lesson.tres:201
msgid ""
"Another common use of arrays is [i]stacks[/i] of data.\n"
"\n"
"Take a factory management game where you need to retrieve materials from "
"stacks of crates. They arrive at the factory piled up vertically, and you "
"need to take them from top to bottom."
msgstr ""
"另一個常見的陣列用途是作為[b]堆疊(stack)[/b]資料。\n"
"\n"
"想像一個工廠管理遊戲，你需要從堆疊的貨箱取出材料。這些貨箱垂直堆疊在工廠中，"
"你需要從最上層開始一個一個取出。"

#: course/lesson-23-append-to-arrays/lesson.tres:223
msgid ""
"To take a crate from the back of the array, this time, we use the "
"[code]pop_back()[/code] array function.\n"
"\n"
"This function removes (pops) the last value from the array and returns it to "
"you.\n"
"\n"
"Here we pop the last value of the array and print what's left of the array "
"to demonstrate how the array gets smaller."
msgstr ""
"要從陣列的後端取出貨箱，這次我們使用 [code]pop_back()[/code] 陣列函式。\n"
"\n"
"這個函式會移除(彈出)陣列中的最後一個值，並將其回傳給你。\n"
"\n"
"這裡我們彈出陣列中的最後一個值，並打印出剩餘的陣列來展示陣列是如何變小的。"

#: course/lesson-23-append-to-arrays/lesson.tres:247
msgid ""
"Like [code]pop_front()[/code], the function returns the value removed from "
"the array. You will often store that value in a variable.\n"
"\n"
"The value in question could be the crate's content, which you can then use "
"to give resources to the player.\n"
"\n"
"In the following practices, you will use the [code]append()[/code], "
"[code]pop_front()[/code], and [code]pop_back()[/code] array functions."
msgstr ""
"像是[code]pop_front()[/code]"
"一樣，這個函式會回傳從陣列中移除的值。你通常會將該值儲存到一個變數中。\n"
"\n"
"這個值可能是貨箱的內容，然後你可以使用它來給玩家提供資源。\n"
"\n"
"以下的練習，你將使用 [code]append()[/code]、[code]pop_front()[/code]、和 "
"[code]pop_back()[/code] 陣列函式。"

#: course/lesson-23-append-to-arrays/lesson.tres:259
msgid "Completing orders"
msgstr "完成訂單"

#: course/lesson-23-append-to-arrays/lesson.tres:260
msgid ""
"The [code]waiting_orders[/code] array will be filled over time.\n"
"\n"
"Your job is to move orders from the waiting list to the "
"[code]completed_orders[/code] list using the array's [code]append()[/code] "
"and [code]pop_front()[/code] functions.\n"
"\n"
"Remember that the array's [code]pop_front()[/code] function returns the "
"popped value, which allows you to store it in a variable and then pass it to "
"another function."
msgstr ""
"[code]waiting_orders[/code] 陣列將會隨著時間填滿。\n"
"\n"
"你的工作是使用陣列的 [code]append()[/code] 和 [code]pop_front()[/code] 函式，"
"將訂單從等待清單移動到 [code]completed_orders[/code] 清單中。\n"
"\n"
"記得 [code]pop_front()[/code] "
"函式會回傳被移除的值，這樣你就可以將它儲存到變數中，然後再傳遞給另一個函式。"

#: course/lesson-23-append-to-arrays/lesson.tres:277
msgid ""
"Orders are piling up in the kitchen, and we need to clear them fast using "
"the array's [code]pop_front()[/code] function."
msgstr "訂單在廚房堆積如山，我們需要使用陣列的 [code]pop_front()[/code] "
"函式快速清除它們。"

#: course/lesson-23-append-to-arrays/lesson.tres:282
msgid "Clearing up the crates"
msgstr "清理箱子"

#: course/lesson-23-append-to-arrays/lesson.tres:283
msgid ""
"Crates are piling up on the platform. Move them out of the way by popping "
"them from the [code]crates[/code] array.\n"
"\n"
"You need to remove them from top to bottom using the array's [code]pop_back()"
"[/code] function.\n"
"\n"
"Your code should remove all the crates in the array using a while loop.\n"
"\n"
"[b]Careful![/b] if you run a while loop carelessly, you can lock the "
"software.\n"
"\n"
"You can check if the [code]crates[/code] array still contains values by "
"writing [code]while crates:[/code]"
msgstr ""
"箱子堆積在平台上。請透過從 [code]crates[/code] 陣列中移除它們來清理空間。\n"
"\n"
"你需要從上到下使用陣列的 [code]pop_back()[/code] 函式移除它們。\n"
"\n"
"你的程式碼應該使用 [code]while[/code] 迴圈來移除陣列中的所有箱子。\n"
"\n"
"[b]小心！[/b]如果不小心錯誤地執行 [code]while[/code] "
"迴圈，可能會意外造成程式鎖死。\n"
"\n"
"你可以透過寫 [code]while crates:[/code] 來檢查 [code]crates[/code] "
"陣列是否還有資料"

#: course/lesson-23-append-to-arrays/lesson.tres:303
msgid ""
"Crates are piling up on the platform. Move them out of the way by popping "
"them from their array."
msgstr "箱子正在平台上堆積。請透過從陣列中移除它們來清理空間。"

#: course/lesson-23-append-to-arrays/lesson.tres:307
msgid "Appending and popping values from arrays"
msgstr "從陣列追加或是取出值"
