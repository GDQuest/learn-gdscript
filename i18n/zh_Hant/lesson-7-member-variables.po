# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2023-12-09 20:05+0100\n"
"PO-Revision-Date: 2025-04-04 07:24+0000\n"
"Last-Translator: MuryanBKS <muryanbks+github@gmail.com>\n"
"Language-Team: Chinese (Traditional Han script) <https://hosted.weblate.org/"
"projects/learn-gdscript-from-zero/lesson-7-member-variables/zh_Hant/>\n"
"Language: zh_Hant\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.11-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-7-member-variables/lesson.tres:14
msgid ""
"In this lesson, we take a first look at variables.\n"
"\n"
"In games, you need to keep track of many values that change over time:\n"
"\n"
"- The player's score.\n"
"- Every character or enemy's health.\n"
"- The last checkpoint.\n"
"\n"
"And so much more. You need to store, retrieve, and update those values.\n"
"\n"
"We call those values [i]variables[/i]. Variables are labels you use to keep "
"track of values that vary over time. Here's an example of a variable "
"tracking a character or monster's health."
msgstr ""
"在這一課中，我們將首次介紹變數。\n"
"\n"
"在遊戲中，你需要追蹤許多隨時間變動的值：\n"
"\n"
"- 玩家分數。\n"
"- 每個角色或敵人的生命值。\n"
"- 最後一個檢查點。\n"
"\n"
"還有更多。你需要儲存、檢索並更新這些值。\n"
"\n"
"我們稱這些值為[b]變數[/b]"
"。變數是用來追蹤隨時間變動的值的標籤。這裡有一個變數追蹤角色或怪物生命值的範"
"例。"

#: course/lesson-7-member-variables/lesson.tres:44
msgid ""
"The line above defines a new variable named [code]health[/code] and assigns "
"it a starting value of [code]100[/code] (that's what the equal sign does, "
"more on that below).\n"
"\n"
"Function parameters, which you saw in the previous lesson, are another "
"example of variables."
msgstr ""
"上面的這行程式碼定義了一個新的變數，名為 [code]health[/code]，"
"並將其初始值設定為 [code]100[/"
"code]（等號的作用就是將值指定給變數，稍後會詳細說明）。\n"
"\n"
"你在上堂課中所看到的函式參數也是變數的另一個範例。"

#: course/lesson-7-member-variables/lesson.tres:56
msgid ""
"In this lesson, we start using variables built into Godot. They're a "
"particular kind called [i]member variables[/i].\n"
"\n"
"Member variables are values attached to a game entity. They're useful "
"properties like the [code]position[/code], [code]rotation[/code], and "
"[code]scale[/code] of a character.\n"
"\n"
"In a previous lesson, we saw how we could use the [code]rotate()[/code] "
"function to rotate our character."
msgstr ""
"在這一課中，我們開始使用 Godot 內建的變數。這些變數是一種特定類型，稱為[b]"
"成員變數[/b]。\n"
"\n"
"成員變數是附加在遊戲實體上的值。它們是有用的屬性，例如角色的 [code]position[/"
"code](位置)、[code]rotation[/code](旋轉) 和 [code]scale[/code](縮放)。\n"
"\n"
"在上堂課中，我們看到如何使用 [code]rotate()[/code] 函式來旋轉我們的角色。"

#: course/lesson-7-member-variables/lesson.tres:80
msgid ""
"This function increases or decreases the value of the entity's "
"[code]rotation[/code] member variable.\n"
"\n"
"Say we want to reset the rotation to [code]0[/code] and make the character "
"upright. Using the [code]rotate()[/code] function can prove difficult: you "
"need to know the character's exact current angle to cancel it out.\n"
"\n"
"It's much easier to use the member variable rather than the function.\n"
"\n"
"The following code assigns the value [code]0[/code] to the character's "
"rotation, resetting its angle and making it upright."
msgstr ""
"這個函式會增加或減少實體的 [code]rotation[/code] 成員變數的值。\n"
"\n"
"假設我們想將旋轉重設為 [code]0[/code]，並讓角色保持直立。使用 [code]rotate()"
"[/code] 函式可能會很麻煩，因為你需要知道角色當前的精確角度才能將其抵消。\n"
"\n"
"與其使用函式，直接操作成員變數會更簡單。\n"
"\n"
"以下的程式碼將 [code]0[/code] "
"的值指定給角色的角度，從而重設角度並讓角色直立。"

#: course/lesson-7-member-variables/lesson.tres:106
msgid ""
"Notice how we use the equal sign ([code]=[/code]) to change the value of a "
"variable."
msgstr "注意我們如何使用等號 ([code]=[/code]) 來改變變數的值。"

#: course/lesson-7-member-variables/lesson.tres:114
msgid "What's a variable?"
msgstr "什麼是變數？"

#: course/lesson-7-member-variables/lesson.tres:117
msgid ""
"Variables are labels you use to access values that change over time.\n"
"\n"
"You can also use them to put a name on a value you want to reuse throughout "
"your code. It makes your code easier to read and to change."
msgstr ""
"變數是用來存取隨時間變動的值的標籤。\n"
"\n"
"你也可以用它們為一個你想在程式中重複使用的值命名。這樣可以讓你的程式碼更容易"
"閱讀並且更方便修改。"

#: course/lesson-7-member-variables/lesson.tres:120
#: course/lesson-7-member-variables/lesson.tres:121
msgid "A label you use to keep track of a value that can change."
msgstr "一個用來追蹤可能會變動的值的標籤。"

#: course/lesson-7-member-variables/lesson.tres:120
msgid "A function that varies over time."
msgstr "隨時間變化的函式。"

#: course/lesson-7-member-variables/lesson.tres:120
msgid "A decimal number."
msgstr "一個小數。"

#: course/lesson-7-member-variables/lesson.tres:128
msgid "Accessing sub-variables with the dot"
msgstr "透過點符號（\".\"）存取子變數"

#: course/lesson-7-member-variables/lesson.tres:130
msgid ""
"In video games, you will see many member variables that have sub-values.\n"
"\n"
"For example, the [code]position[/code] we mentioned has two coordinates: "
"[code]x[/code] and [code]y[/code].\n"
"\n"
"It's the same for the [code]scale[/code]: it has [code]x[/code] and [code]y[/"
"code] sub-variables. They respectively control the horizontal and vertical "
"size of the game entity.\n"
"\n"
"To access those X and Y sub-components, you add a dot (\".\") after the "
"variable name.\n"
"\n"
"The code below places the entity at [code]200[/code] pixels on the x-axis "
"and [code]250[/code] pixels on the y-axis."
msgstr ""
"在電子遊戲中，你會看到許多具有子值的成員變數。\n"
"\n"
"例如，我們之前提到的 [code]position[/code] 變數，它有兩個座標：[code]x[/code]"
" 和 [code]y[/code]。\n"
"\n"
"[code]scale[/code] 也是一樣，它有 [code]x[/code] 和 [code]y[/code] "
"兩個子變數，分別控制遊戲實體在水平方向和垂直方向的大小。\n"
"\n"
"要存取這些 X 和 Y 的子組件，你只需要在變數名稱後加上一個點（\".\"）。\n"
"\n"
"以下的程式碼將實體放置在 X 軸 [code]200[/code] 像素，Y 軸 [code]250[/code] "
"像素的位置。"

#: course/lesson-7-member-variables/lesson.tres:158
msgid ""
"Notice how we use the equal sign (\"=\") to assign the numbers on the right "
"to the sub-variables on the left.\n"
"\n"
"Unlike in maths, in computer programming, the equal sign (\"=\") does not "
"mean \"is equal to.\"\n"
"\n"
"Instead, it means \"assign the result of the expression on the right to the "
"variable on the left\". We assign values so often in code that we prefer to "
"reserve the equal sign for that."
msgstr ""
"請注意，我們如何使用等號(\"=\")將右邊的數字指定給左邊的子變數。\n"
"\n"
"與數學不同，在程式設計中，等號(\"=\")並不代表「等於」。\n"
"\n"
"相反地，它表示「將右邊表達式的結果指定給左邊的變數」。在程式碼中，我們經常進"
"行賦值，因此我們偏好將等號保留用於這個目的。"

#: course/lesson-7-member-variables/lesson.tres:170
msgid "In games, the Y-axis is positive going down"
msgstr "在遊戲中 Y 軸往下才是正方向"

#: course/lesson-7-member-variables/lesson.tres:172
msgid ""
"Note that in games, assuming your character's position starts at (0, 0), the "
"code above moves the entity [code]200[/code] pixels to the right and "
"[code]250[/code] pixels down.\n"
"\n"
"In math, the y-axis is generally positive going up by convention.\n"
"\n"
"The convention is the [i]opposite[/i] in video games and many computer "
"applications: the y-axis is positive going down."
msgstr ""
"請注意，在遊戲中，假設角色的位置從 (0, 0) 開始，上述程式碼將實體移動了 [code]"
"200[/code] 像素到右邊，並將其向下移動了 [code]250[/code] 像素。\n"
"\n"
"在數學中，通常 y 軸是往上為正方向。\n"
"\n"
"但在遊戲和許多電腦應用程式中，這習慣是[b]相反的[/b]，y 軸是往下為正方向。"

#: course/lesson-7-member-variables/lesson.tres:194
msgid "Why does the Y-axis point downwards?"
msgstr "為什麼 Y 軸向下？"

#: course/lesson-7-member-variables/lesson.tres:196
msgid ""
"This may be confusing if you only saw the y-axis pointing up in math "
"classes. However, in math, axes go in any direction. They don't even have to "
"be perpendicular.\n"
"\n"
"On the computer, the position (0, 0) happens to correspond to the top-left "
"of your computer screen. It then makes sense for coordinates to be positive "
"when going towards the bottom-right corner.\n"
"\n"
"This leads to another question: why is position zero the top left of the "
"screen? This is due to computer and TV displays history: they would "
"calculate and display pixels starting from the top left corner and moving "
"towards the bottom right corner."
msgstr ""
"這可能會讓你感到困惑，因為在數學課中，y "
"軸通常是指向上的。然而，在數學中，座標軸的方向是可以任意設定的，甚至不必垂直"
"。\n"
"\n"
"在電腦中，位置 (0, 0) "
"恰好對應於螢幕的左上角。因此，當座標朝著右下角延伸時，數值就會變大，這樣就合"
"理了。\n"
"\n"
"這也引出了另一個問題：為什麼位置零是在螢幕的左上角？這是由於電腦和電視顯示的"
"歷史：顯示設備會從螢幕的左上角開始計算和顯示像素，然後向右下角延伸。"

#: course/lesson-7-member-variables/lesson.tres:210
msgid ""
"Let's look at one last example before moving on to the practice. The "
"following code makes the character 1.5 times its starting size."
msgstr "讓我們再看一個範例，在進入練習之前。以下的程式碼會將角色的大小放大 1.5 倍。"

#: course/lesson-7-member-variables/lesson.tres:228
msgid "How do you access sub-variables?"
msgstr "怎麼存取子變數？"

#: course/lesson-7-member-variables/lesson.tres:229
msgid ""
"Variables often hold sub-values, like the [code]position[/code] has two sub-"
"variables: [code]x[/code] and [code]y[/code]. How would you access the "
"[code]x[/code], for example?"
msgstr ""
"變數常常會持有子值，例如 [code]position[/code] 變數有兩個子變數：[code]x[/"
"code] 和 [code]y[/code]。那麼要如何存取 [code]x[/code] 呢？"

#: course/lesson-7-member-variables/lesson.tres:231
msgid ""
"To access a sub-variable, you need to write a dot between the parent "
"variable name and the sub-variable name.\n"
"\n"
"For example, to access the [code]x[/code] sub-variable of the "
"[code]position[/code] variable, you'll write [code]position.x[/code]."
msgstr ""
"要存取子變數，你需要在父變數名稱和子變數名稱之間寫上一個點（\".\"）。\n"
"\n"
"例如，要存取 [code]position[/code] 變數的 [code]x[/code] 子變數，你需要寫成 "
"[code]position.x[/code]。"

#: course/lesson-7-member-variables/lesson.tres:234
#: course/lesson-7-member-variables/lesson.tres:235
msgid "You write a dot (\".\") between the variable and the sub-variable name."
msgstr "你需要在變數名稱和子變數名稱之間寫上一個點（\".\"）。"

#: course/lesson-7-member-variables/lesson.tres:234
msgid ""
"You write an arrow (\"->\") between the variable and the sub-variable name."
msgstr "你需要在變數名稱和子變數名稱之間寫上一個箭頭（\"->\"）。"

#: course/lesson-7-member-variables/lesson.tres:234
msgid ""
"You write a slash (\"/\") between the variable and the sub-variable name."
msgstr "你需要在變數名稱和子變數名稱之間寫上一個斜線（\"/\"）。"

#: course/lesson-7-member-variables/lesson.tres:244
msgid ""
"In a future lesson, we'll explain why and how those variables have sub-"
"variables.\n"
"\n"
"For now, just know you can use the dot to access them.\n"
"\n"
"We'll tell you which variables have sub-components and what their names "
"are.\n"
"\n"
"In the next lessons, you'll create your own variables and do operations on "
"them to add or remove [code]score[/code], [code]health[/code], you name it.\n"
"\n"
"For now, let's practice accessing variables."
msgstr ""
"在未來的課程中，我們將解釋為什麼以及如何讓這些變數有子變數。\n"
"\n"
"目前，只需要知道你可以使用點（\".\"）來存取它們。\n"
"\n"
"我們會告訴你哪些變數有子元件，以及它們的名稱。\n"
"\n"
"在接下來的課程中，你將創建自己的變數並對它們進行操作，像是加減 [code]score[/"
"code]、[code]health[/code] 等。\n"
"\n"
"現在，讓我們來練習存取變數。"

#: course/lesson-7-member-variables/lesson.tres:260
msgid "Draw a rectangle at a precise position"
msgstr "在精確位置繪製矩形"

#: course/lesson-7-member-variables/lesson.tres:261
msgid ""
"Draw a rectangle of 200 by 120 pixels at the X position of 120 pixels and Y "
"position of 100 pixels.\n"
"\n"
"You need to replace the numbers in the code editor to draw the correct "
"rectangle."
msgstr ""
"在 X 位置為 120 像素、Y 位置為 100 像素的地方，繪製一個 200 x 120 "
"像素的矩形。\n"
"\n"
"你需要將程式碼編輯器中的數字替換為正確的數值，以繪製正確的矩形。"

#: course/lesson-7-member-variables/lesson.tres:275
msgid ""
"Use the position member variable and its sub-variables to change the "
"rectangle's position."
msgstr "使用 position 成員變數及其子變數來改變矩形的位置。"

#: course/lesson-7-member-variables/lesson.tres:280
msgid "Draw squares at different positions"
msgstr "在不同位置繪製多個矩型"

#: course/lesson-7-member-variables/lesson.tres:281
msgid ""
"Draw three squares of size 100 by 100 that are 100 pixels apart on the "
"horizontal axis. In other words, there should be a 100-pixel gap between two "
"squares.\n"
"\n"
"You should draw the squares starting at the position (100, 100). This means "
"you should position the first square at 100 on the X axis and 100 on the Y "
"axis.\n"
"\n"
"Remember you need to use the equal sign ([code]=[/code]) to change the value "
"of a variable, like the turtle's position.\n"
"\n"
"Write your code inside the [code]run()[/code] function so the computer can "
"recognize it.\n"
"\n"
"Use the provided [code]draw_rectangle()[/code] function to draw each square."
msgstr ""
"繪製三個大小為 100 x 100 的正方形，並且它們在水平方向上相隔 100 "
"像素。換句話說，兩個正方形之間應該有 100 像素的間隙。\n"
"\n"
"你應該從位置 (100, 100) 開始繪製這些正方形。"
"這意味著你應該將第一個正方形放置在 X 軸的 100 和 Y 軸的 100。\n"
"\n"
"記得你需要使用等號 ([code]=[/code]) 來改變變數的值，例如海龜的位置。\n"
"\n"
"將你的程式碼寫在 [code]run()[/code] 函式中，讓電腦可以辨識它。\n"
"\n"
"使用提供的 [code]draw_rectangle()[/code] 函式來繪製每個正方形。"

#: course/lesson-7-member-variables/lesson.tres:299
msgid ""
"Now you can place and draw one shape, but how about drawing several? In this "
"practice, you'll place three squares side by side to really get the hang of "
"properties."
msgstr "現在你可以放置並繪製一個圖形了，但如果要繪製多個圖形該怎麼辦？在這個練習中，"
"你將並排放置三個正方形，這樣可以讓你更熟練地掌握屬性。"

#: course/lesson-7-member-variables/lesson.tres:303
msgid "Introduction to Member Variables"
msgstr "介紹成員變數"
