# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2022-03-26 17:50+0100\n"
"PO-Revision-Date: 2025-04-04 07:24+0000\n"
"Last-Translator: MuryanBKS <muryanbks+github@gmail.com>\n"
"Language-Team: Chinese (Traditional Han script) <https://hosted.weblate.org/"
"projects/learn-gdscript-from-zero/lesson-20-looping-over-arrays/zh_Hant/>\n"
"Language: zh_Hant\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.11-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-20-looping-over-arrays/lesson.tres:14
msgid ""
"We used the [code]range()[/code] function in combination with [code]for[/"
"code] loops."
msgstr "我們將 [code]range()[/code] 函式與 [code]for[/code] 迴圈結合使用。"

#: course/lesson-20-looping-over-arrays/lesson.tres:34
msgid ""
"The [code]range()[/code] function produced an array that the [code]for[/"
"code] keyword could loop over.\n"
"\n"
"We can give [code]for[/code] loops [i]any[/i] array, and they will loop over "
"them just the same.\n"
"\n"
"Instead of using the [code]range()[/code] function, we could manually write "
"the numbers and get the same result."
msgstr ""
"[code]range()[/code] 函式會產生一個陣列，讓 [code]for[/code] "
"關鍵字可以對其進行迴圈。\n"
"\n"
"我們可以將 [code]for[/code] 迴圈應用於[b]任何[/b]"
"陣列，它們都會以相同的方式進行迴圈。\n"
"\n"
"而且不使用 [code]range()[/code] "
"函式，我們也可以手動寫入數字，並獲得相同的結果。"

#: course/lesson-20-looping-over-arrays/lesson.tres:58
msgid ""
"For each element inside the array, the [code]for[/code] loop extracts it, "
"stores it in the temporary variable named [code]number[/code], and executes "
"the loop's code once.\n"
"\n"
"Inside the loop, you can access the [code]number[/code] variable, which "
"changes on each [i]iteration[/i].\n"
"\n"
"The code works regardless of the array or where you store it. Often, you "
"will store arrays in variables for easy access."
msgstr ""
"對於陣列中每個元素，[code]for[/code] 迴圈會提取該元素，將其存入名為 [code]"
"number[/code] 的暫存變數，然後執行一次迴圈內的程式碼。\n"
"\n"
"在迴圈內，你可以存取 [code]number[/code] 變數，且它會在每次[b]迭代[/b]"
"時改變數值。\n"
"\n"
"無論陣列的內容為何或儲存在哪裡，這段程式碼都能正常運作。通常會將陣列存入變數"
"中，以便日後存取。"

#: course/lesson-20-looping-over-arrays/lesson.tres:80
msgid "What will this code print?"
msgstr "這段程式碼會印出什麼？"

#: course/lesson-20-looping-over-arrays/lesson.tres:81
msgid ""
"[code]var numbers = [0, 1, 2]\n"
"for number in numbers:\n"
"    print(number)\n"
"[/code]"
msgstr ""
"[code]var numbers = [0, 1, 2]\n"
"for number in numbers:\n"
"    print(number)\n"
"[/code]"

#: course/lesson-20-looping-over-arrays/lesson.tres:86
msgid ""
"Compared to previous examples, we store the array in the [code]numbers[/"
"code] variable. Using the [code]numbers[/code] variable in our [code]for[/"
"code] loop allows the computer to access the array of numbers like before.\n"
"\n"
"We have three numbers in the array: [code]0[/code], [code]1[/code], and "
"[code]2[/code].\n"
"\n"
"The loop extracts each of them sequentially and assigns it to the "
"[code]number[/code] temporary variable. As the loop processes each number, "
"the output will print [code]0[/code], then [code]1[/code], then [code]2[/"
"code], each on a separate line."
msgstr ""
"與先前的範例相比，我們將陣列存入 [code]numbers[/code] 變數中。在 [code]for[/"
"code] 迴圈中使用 [code]numbers[/code] "
"變數，使電腦能夠像之前一樣存取這組數字陣列。\n"
"\n"
"這個陣列內包含三個數字：[code]0[/code]、[code]1[/code] 和 [code]2[/code]。\n"
"\n"
"迴圈會依序提取這些數字，並將它們指派給暫存變數 [code]number[/"
"code]。當迴圈處理每個數字時，輸出結果將會逐行印出 [code]0[/code]，接著是 "
"[code]1[/code]，最後是 [code]2[/code]。"

#: course/lesson-20-looping-over-arrays/lesson.tres:91
#: course/lesson-20-looping-over-arrays/lesson.tres:92
msgid "0, 1, and 2"
msgstr "0, 1, 和 2"

#: course/lesson-20-looping-over-arrays/lesson.tres:91
msgid "1, 2, and 3"
msgstr "1, 2, 和 3"

#: course/lesson-20-looping-over-arrays/lesson.tres:91
msgid "0, 0, and 0"
msgstr "0, 0, 和 0"

#: course/lesson-20-looping-over-arrays/lesson.tres:99
msgid "Making the turtle walk, with a loop"
msgstr "使用迴圈讓烏龜移動"

#: course/lesson-20-looping-over-arrays/lesson.tres:101
msgid ""
"In the previous lesson, you made a turtle walk along a path by writing "
"[code]Vector2[/code] coordinates in an array."
msgstr "在前面的課程中，你透過在陣列中寫入 [code]Vector2[/code] "
"座標，使烏龜沿著路徑移動。"

#: course/lesson-20-looping-over-arrays/lesson.tres:121
msgid ""
"It's a [code]for[/code] loop that makes the turtle walk along the path.\n"
"\n"
"The loop works like this: for each coordinate in the array, it moves the "
"turtle once to that cell."
msgstr ""
"這是一個 [code]for[/code] 迴圈，使烏龜沿著路徑移動。\n"
"\n"
"迴圈的運作方式如下：對於陣列中的每個座標，它會將烏龜移動到該格一次。"

#: course/lesson-20-looping-over-arrays/lesson.tres:143
msgid "It's the same principle with unit selection."
msgstr "這與選取單位的原理相同。"

#: course/lesson-20-looping-over-arrays/lesson.tres:163
msgid ""
"For each coordinate in an array named [code]selected_units[/code], we check "
"if there is a unit in that cell. If so, we select it. \n"
"\n"
"In that case, we use an array, a loop, and a condition together."
msgstr ""
"對於名為 [code]selected_units[/code] "
"的陣列中每個座標，我們會檢查該格是否有單位存在。如果有，我們就選取它。\n"
"\n"
"在這個例子下，我們將陣列、迴圈和條件結合使用。"

#: course/lesson-20-looping-over-arrays/lesson.tres:185
msgid ""
"The code above uses several features you haven't learned yet:\n"
"\n"
"- In a condition, the [code]in[/code] keyword allows you to check if a value "
"exists [i]in[/i] an array.\n"
"- The array's [code]append()[/code] function appends a new value at the end "
"of the array.\n"
"\n"
"Notice the use of a period after the [code]selected_units[/code] variable, "
"to call the [code]append()[/code] function. It's because this function "
"exists only on arrays.\n"
"\n"
"When functions exist only on a specific value type, you write a dot after "
"the value to call the function on it.\n"
"\n"
"We'll revisit those two features again in the following lessons."
msgstr ""
"上面的程式碼使用了幾個你尚未學習的功能：\n"
"\n"
"- 在條件判斷中，[code]in[/code] 關鍵字可用來檢查某個值是否存在於陣列中。\n"
"- 陣列的 [code]append()[/code] 函式可以將新值加入陣列的末尾。\n"
"\n"
"請注意在 [code]selected_units[/code] 變數後面使用了句點（.），以呼叫 [code]"
"append()[/code] 函式。這是因為該函式僅適用於陣列。\n"
"\n"
"當函式只適用於特定類型的值時，需要在該值後加上句點來呼叫該函式。\n"
"\n"
"我們會在接下來的課程中再次探討這兩個功能。"

#: course/lesson-20-looping-over-arrays/lesson.tres:204
msgid ""
"The beauty of loops is that they work regardless of the size of your "
"arrays. \n"
"\n"
"The code just works whether you have one or ten thousand units to select. It "
"is all accomplished with only a couple lines of code.\n"
"\n"
"That's the power of computer programming.\n"
"\n"
"In the following practices, you will use arrays combined with [code]for[/"
"code] loops to achieve similar results."
msgstr ""
"迴圈的美妙之處在於，它們無論面對多大的陣列都能正常運作。\n"
"\n"
"不管是選取一個單位還是一萬個單位，程式碼都能運行，並且只需要幾行程式碼就能完"
"成這項工作。\n"
"\n"
"這就是電腦程式設計的強大之處。\n"
"\n"
"在接下來的練習中，你將結合陣列與 [code]for[/code] 迴圈來達成類似的結果。"

#: course/lesson-20-looping-over-arrays/lesson.tres:218
msgid "Move the robot along the path"
msgstr "讓機器人沿著路徑移動"

#: course/lesson-20-looping-over-arrays/lesson.tres:219
msgid ""
"Our AI pathfinding algorithm provided a path for the robot to move to the "
"right edge of the grid. Your task is to use a [code]for[/code] loop to make "
"the robot move.\n"
"\n"
"To move the robot, call [i]its[/i] [code]move_to()[/code] function, like so: "
"[code]robot.move_to()[/code].\n"
"\n"
"The [code]move_to()[/code] function only exists on the robot, which is why "
"you need to access it this way."
msgstr ""
"我們的 AI 路徑尋找演算法已經提供了一條路徑，讓機器人能夠移動到網格的右邊緣。"
"你的任務是使用 [code]for[/code] 迴圈來讓機器人移動。\n"
"\n"
"要讓機器人移動，請呼叫[b]它的[/b][code]move_to()[/code] 函式，像是這樣："
"[code]robot.move_to()[/code]。\n"
"\n"
"[code]move_to()[/code] 函式僅存在於機器人上，這就是為什麼你需要這樣存取它。"

#: course/lesson-20-looping-over-arrays/lesson.tres:235
msgid ""
"Our AI pathfinding algorithm is giving us a path to move the robot. Now, you "
"need to make the turtle move along the path."
msgstr "我們的 AI "
"路徑尋找演算法已經提供了一條路徑來移動機器人。現在你需要讓烏龜沿著這條路徑移"
"動。"

#: course/lesson-20-looping-over-arrays/lesson.tres:240
msgid "Back to the drawing board"
msgstr "回到畫板"

#: course/lesson-20-looping-over-arrays/lesson.tres:241
msgid ""
"We want to draw many rectangles, something surprisingly common in games.\n"
"\n"
"However, writing this code by hand can get tedious. Instead, you could store "
"the size of your shapes in arrays and use a loop to draw them all in "
"batches.\n"
"\n"
"That's what you'll do in this practice.\n"
"\n"
"Use a [code]for[/code] loop to draw every rectangle in the "
"[code]rectangle_sizes[/code] array with the [code]draw_rectangle()[/code] "
"function.\n"
"\n"
"The rectangles shouldn't overlap or cross each other. To avoid that, you'll "
"need to call the [code]jump()[/code] function."
msgstr ""
"要畫出許多矩形，這在遊戲中是相當常見的需求。\n"
"\n"
"不過手動寫這段程式碼會變得相當繁瑣。相反地，你可以將圖形的大小存儲在陣列中，"
"並使用迴圈來批次繪製它們。\n"
"\n"
"這正是你在這次練習中要做的事。\n"
"\n"
"使用 [code]for[/code] 迴圈來繪製 [code]rectangle_sizes[/code] "
"陣列中的每一個矩形，並利用 [code]draw_rectangle()[/code] 函式來進行繪製。\n"
"\n"
"矩形不應該互相重疊或交叉。為了避免這個問題，你需要呼叫 [code]jump()[/code] "
"函式。"

#: course/lesson-20-looping-over-arrays/lesson.tres:261
msgid ""
"The drawing turtle makes its comeback. Fear not! Armed with loops, you'll "
"make it draw faster than ever before."
msgstr "會畫畫的海龜再次回歸。別擔心！有了迴圈的幫助，你將讓它畫得比以往更快。"

#: course/lesson-20-looping-over-arrays/lesson.tres:265
msgid "Looping over arrays"
msgstr "迴圈遍歷陣列"
