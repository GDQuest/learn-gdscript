# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2023-05-16 09:25+0200\n"
"PO-Revision-Date: 2025-04-03 15:39+0000\n"
"Last-Translator: MuryanBKS <muryanbks+github@gmail.com>\n"
"Language-Team: Chinese (Traditional Han script) <https://hosted.weblate.org/"
"projects/learn-gdscript-from-zero/lesson-5-your-first-function/zh_Hant/>\n"
"Language: zh_Hant\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.11-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-5-your-first-function/lesson.tres:14
msgid ""
"So far, we have called existing functions that other developers wrote.\n"
"\n"
"In this lesson, we'll talk more about what functions are and see some "
"examples. Then, you will learn how to define your own functions."
msgstr ""
"到目前為止，我們一直在呼叫其他開發者寫好的現有函式。\n"
"\n"
"在這一課中，我們將深入探討什麼是函式，並展示一些範例。接著你將學會如何定義屬"
"於自己的函式。"

#: course/lesson-5-your-first-function/lesson.tres:24
msgid "Functions are named sequences of instructions"
msgstr "函式是指令序列"

#: course/lesson-5-your-first-function/lesson.tres:26
msgid ""
"Functions are [i]sequences of instructions[/i] we give a name. We call that "
"name an [i]identifier[/i].\n"
"\n"
"Using the identifier, we can get the computer to execute all the "
"instructions inside the function as many times as we need. This is what a "
"[i]function call[/i] does."
msgstr ""
"函式是我們賦予名稱的[b]指令序列[/b]。我們稱這個名稱為[b]識別子(identifier)"
"[/b]。\n"
"\n"
"使用這個識別子，我們可以讓電腦執行函式內的所有指令，且可以執行多次。這就是[b]"
"函式呼叫(function call)[/b]的作用。"

#: course/lesson-5-your-first-function/lesson.tres:36
msgid "Learn more about identifiers"
msgstr "深入了解識別子(Identifiers)"

#: course/lesson-5-your-first-function/lesson.tres:38
msgid ""
"In computer programming, we talk about [i]identifiers[/i] rather than "
"\"names\".\n"
"\n"
"It is because a function name is a label the computer uses to precisely "
"[i]identify[/i] and refer to a function or other code elements.\n"
"\n"
"Identifiers are unique: you cannot reuse the same name in a given [i]space[/"
"i] in your code.\n"
"\n"
"If you try to name two functions the same, the computer will raise an error."
msgstr ""
"在電腦程式設計中，我們使用[b]識別子(Identifier)[/b]而不是「名稱(name)」。\n"
"\n"
"這是因為函式名稱是電腦用來準確[b]識別[/b]並引用函式或其他程式碼元素的標籤。\n"
"\n"
"識別子是唯一的：在程式碼的特定[b]範圍(space)[/b]內，不能重複使用相同的名稱。"
"\n"
"\n"
"如果你嘗試為兩個函式取相同的名稱，電腦會回報錯誤。"

#: course/lesson-5-your-first-function/lesson.tres:54
msgid ""
"If there is any code that you need to run multiple times, you can put it "
"inside a function and give it a name.\n"
"\n"
"The instructions inside a function can be any code you want, and they will "
"all run every time you call the function.\n"
"\n"
"Here's the example of a [code]move_and_rotate()[/code] function that moves "
"the turtle forward and then turns it 90°."
msgstr ""
"如果有任何需要重複執行的程式碼，你可以將它放入函式內，並為其命名。\n"
"\n"
"函式內的指令可以是任何你需要的程式碼，且每次呼叫該函式時，所有指令都會依序執"
"行。\n"
"\n"
"以下是範例，函式 [code]move_and_rotate()[/code] 會讓烏龜向前移動，"
"然後將其旋轉 90°。"

#: course/lesson-5-your-first-function/lesson.tres:78
msgid ""
"The [code]move_and_rotate()[/code] function consists of two instructions, "
"each on a separate line. Both of those instructions call another familiar "
"function.\n"
"\n"
"You could write another function that calls [code]move_and_rotate()[/code] "
"four times to draw a square of length 200 pixels."
msgstr ""
"函式 [code]move_and_rotate()[/code] "
"由兩條指令組成，每條指令各佔一行，且都呼叫了另一個你熟悉的函式。\n"
"\n"
"你可以再撰寫一個函式，讓它重複呼叫 [code]move_and_rotate()[/code] 四次，"
"以繪製一個邊長為 200 像素的正方形。"

#: course/lesson-5-your-first-function/lesson.tres:100
msgid ""
"Every time we call [code]move_and_rotate()[/code], the two functions "
"[code]move_forward(200)[/code] and [code]turn_right(90)[/code] are called in "
"sequence.\n"
"\n"
"In this simple example, it may not feel super useful. Here's a more useful "
"and realistic one: a function to draw any square.\n"
"\n"
"The following function uses [i]parameters[/i], which we will explore in the "
"next lesson.\n"
"\n"
"[i]Drag the slider to change the square's size.[/i]"
msgstr ""
"每次呼叫 [code]move_and_rotate()[/code] 時，程式會依序執行 [code]"
"move_forward(200)[/code] 和 [code]turn_right(90)[/code] 這兩個函式。\n"
"\n"
"在這個簡單的範例中，這或許看起來沒那麼實用。但接下來，我們會看到一個更有用、"
"更實際的應用：一個能夠繪製任意大小正方形的函式。\n"
"\n"
"以下的函式使用了[b]參數(parameter)[/b]，我們會在下一節課進一步探討。\n"
"\n"
"[b]拖曳滑桿來改變正方形的大小。[/b]"

#: course/lesson-5-your-first-function/lesson.tres:124
msgid "How to define your own functions"
msgstr "如何定義自己的函式"

#: course/lesson-5-your-first-function/lesson.tres:126
msgid ""
"Let's break down how you define a function.\n"
"\n"
"A function definition starts with the [code]func[/code] keyword followed by "
"a space, the function's name, parentheses, and a colon."
msgstr ""
"讓我們來解析如何定義一個函式。\n"
"\n"
"函式定義以 [code]func[/code] "
"關鍵字開頭，後面接一個空格、函式名稱、一對括號、最後以冒號結尾。"

#: course/lesson-5-your-first-function/lesson.tres:148
msgid ""
"The instructions inside the function [b]must[/b] all start with a leading "
"tab character. You can insert that tab character by pressing the [b]Tab[/b] "
"key.\n"
"\n"
"We call those leading tabs [i]indents[/i]. They're important: the computer "
"uses them to know which instructions are part of the same code block."
msgstr ""
"函式內的所有指令 [b]必須[/b] 以前導的 Tab 字元開始。你可以按下 [b]Tab[/b] "
"鍵來插入這個字元。\n"
"\n"
"我們稱這些前導 Tab 為[b]縮排(indents)[/b]"
"。它們非常重要，因為電腦會依靠縮排來判斷哪些指令屬於同一個程式區塊。"

#: course/lesson-5-your-first-function/lesson.tres:158
msgid "Why do we use functions?"
msgstr "我們為什麼要使用函式？"

#: course/lesson-5-your-first-function/lesson.tres:161
msgid ""
"Functions are groups of instructions we reuse every time we call the "
"function.\n"
"\n"
"Because we give functions a name, they also allow us to name a set of "
"instructions, which is handy!"
msgstr ""
"函式是一組指令的集合，每次呼叫函式時都可以重複使用。\n"
"\n"
"由於我們會為函式命名，因此它也能讓我們為一組指令取一個方便辨識的名稱，這非常"
"實用！"

#: course/lesson-5-your-first-function/lesson.tres:164
#: course/lesson-5-your-first-function/lesson.tres:165
msgid "To reuse code multiple times. "
msgstr "為了能夠多次重複使用程式碼。 "

#: course/lesson-5-your-first-function/lesson.tres:164
#: course/lesson-5-your-first-function/lesson.tres:165
msgid "To run multiple instructions in one go."
msgstr "一次執行多個指令。"

#: course/lesson-5-your-first-function/lesson.tres:164
#: course/lesson-5-your-first-function/lesson.tres:165
msgid "To put a name on multiple lines of code."
msgstr "給多行程式碼命名。"

#: course/lesson-5-your-first-function/lesson.tres:172
msgid "Names in code have rules"
msgstr "程式碼中的名稱有規則"

#: course/lesson-5-your-first-function/lesson.tres:174
msgid ""
"Function identifiers cannot contain spaces. In general, names in programming "
"languages cannot contain spaces.\n"
"\n"
"The computer uses spaces to detect the separation between different keywords "
"and identifiers.\n"
"\n"
"Instead of spaces, in GDScript, we use underscores (\"_\"). You saw this "
"already with functions like [code]move_forward()[/code] or "
"[code]move_local_x()[/code]. This is the convention we follow in GDScript.\n"
"\n"
"There's another convention programmers use in some other programming "
"languages.\n"
"\n"
"Instead of using underscores, they start words with capital letters except "
"for the first one. With that convention, you'd write function names like "
"[code]moveForward()[/code] or [code]moveLocalX()[/code]\n"
"\n"
"Identifiers also [i]have[/i] to start with a letter or an underscore; You "
"[i]can't[/i] begin with a number, but you can use numbers after the first "
"character."
msgstr ""
"函式識別符不能包含空格。在程式語言中，名稱通常不能包含空格。\n"
"\n"
"電腦使用空格來檢測不同關鍵字和識別符之間的分隔。\n"
"\n"
"在 GDScript 中，我們使用底線（\"_\"）來代替空格。你已經看過像是 [code]"
"move_forward()[/code] 或 [code]move_local_x()[/code] 這樣的函式名稱，這是 "
"GDScript 中的命名慣例。\n"
"\n"
"在其他一些程式語言中，程式設計師也有另一種命名慣例。\n"
"\n"
"這種慣例會使用大寫字母來開頭每個單詞，除了第一個字。這樣的命名方式會寫成 "
"[code]moveForward()[/code] 或 [code]moveLocalX()[/code]。\n"
"\n"
"此外，識別符[b]必須[/b]以字母或底線開始；你[b]不能[/b]"
"用數字開頭，但可以在第一個字符後使用數字。"

#: course/lesson-5-your-first-function/lesson.tres:192
msgid "Which of the following names are valid function names?"
msgstr "哪些名稱是有效的函式名稱？"

#: course/lesson-5-your-first-function/lesson.tres:193
msgid "Note that it's fine to use capital letters."
msgstr "注意，使用大寫字母是可以的。"

#: course/lesson-5-your-first-function/lesson.tres:195
msgid ""
"You can't name a function [code]move forward[/code] because it contains a "
"space. Names in code cannot contain spaces.\n"
"\n"
"They can't start with numbers either, which is why [code]45_degree_turn[/"
"code] is also invalid. \n"
"\n"
"However, having numbers elsewhere in a function name is fine. That's why "
"[code]make3NewCharacters[/code] works."
msgstr ""
"你不能將函式命名為 [code]move forward[/"
"code]，因為它包含了空格。程式碼中的名稱不能包含空格。\n"
"\n"
"它們也不能以數字開頭，這就是為什麼 [code]45_degree_turn[/code] 也是無效的。\n"
"\n"
"然而，函式名稱中的其他地方可以包含數字。所以 [code]make3NewCharacters[/code] "
"是有效的。"

#: course/lesson-5-your-first-function/lesson.tres:200
msgid "move forward"
msgstr "move forward"

#: course/lesson-5-your-first-function/lesson.tres:200
#: course/lesson-5-your-first-function/lesson.tres:201
msgid "jump"
msgstr "jump"

#: course/lesson-5-your-first-function/lesson.tres:200
#: course/lesson-5-your-first-function/lesson.tres:201
msgid "make3NewCharacters"
msgstr "make3NewCharacters"

#: course/lesson-5-your-first-function/lesson.tres:200
#: course/lesson-5-your-first-function/lesson.tres:201
msgid "move_forward"
msgstr "move_forward"

#: course/lesson-5-your-first-function/lesson.tres:200
msgid "45_degree_turn"
msgstr "45_degree_turn"

#: course/lesson-5-your-first-function/lesson.tres:208
msgid "Instantly moving the turtle to a different position"
msgstr "立即將海龜移動到不同的位置"

#: course/lesson-5-your-first-function/lesson.tres:210
msgid ""
"In order to draw multiple squares in different positions, we introduce a new "
"function for our turtle to use.\n"
"\n"
"The [code]jump()[/code] function picks up the turtle and places it relative "
"to where it is.\n"
"\n"
"So calling [code]jump(-100, 50)[/code] moves the turtle by 100 pixels to the "
"[b]left[/b] and 50 pixels [b]down[/b] without drawing any lines."
msgstr ""
"為了在不同位置繪製多個正方形，我們引入了一個新的函式供我們的海龜使用。\n"
"\n"
"[code]jump()[/code] "
"函式會把海龜彈起來，並將它移動到相對於當前位置的指定位置。\n"
"\n"
"因此呼叫 [code]jump(-100, 50)[/code] 會將海龜移動 100 像素到 [b]左邊[/b] "
"並且 50 像素 [b]向下[/b]，而且不會畫出任何線條。"

#: course/lesson-5-your-first-function/lesson.tres:232
msgid "A function to draw squares"
msgstr "繪製正方形的函式"

#: course/lesson-5-your-first-function/lesson.tres:233
msgid ""
"Code a function named [code]draw_square()[/code] to draw one square of "
"length 200 pixels. The function should take no parameters.\n"
"\n"
"Use the [code]move_forward()[/code] and [code]turn_right()[/code] functions "
"to instruct the turtle.\n"
"\n"
"In the following practice, you'll use the [code]draw_square()[/code] "
"function to draw multiple squares by calling your own function."
msgstr ""
"請寫一個名為 [code]draw_square()[/code] 的函式，讓海龜畫出一個邊長為 200 "
"像素的正方形。該函式不應該接受任何參數。\n"
"\n"
"使用 [code]move_forward()[/code] 和 [code]turn_right()[/code] "
"函式來控制海龜。\n"
"\n"
"在接下來的練習中，你將透過呼叫自己寫的 [code]draw_square()[/code] "
"函式來畫出多個正方形。"

#: course/lesson-5-your-first-function/lesson.tres:246
msgid ""
"Until now, you've had to write code by hand, and it's boring. It's time to "
"code a reusable function. You'll use it to draw multiple squares."
msgstr "到目前為止，你必須手動寫程式碼，這樣有點無聊。現在是時候編寫一個可重複使用的"
"函式了，你將利用這個函式來畫出多個正方形。"

#: course/lesson-5-your-first-function/lesson.tres:251
msgid "Drawing multiple squares"
msgstr "繪製多個正方形"

#: course/lesson-5-your-first-function/lesson.tres:252
msgid ""
"You have a function to draw one square: [code]draw_square()[/code]. Use it "
"to draw three squares.\n"
"\n"
"We already created [code]draw_square()[/code] for you. Create a function "
"named [code]draw_three_squares[/code] that calls [code]draw_square()[/code] "
"three times.\n"
"\n"
"If you just call the function, all three squares will overlap. To stack them "
"diagonally, call [code]jump(300, 300)[/code] between two calls to "
"[code]draw_square()[/code].\n"
"\n"
"Calling [code]jump(300, 300)[/code] makes the turtle jump by 300 pixels to "
"the right and 300 pixels down without drawing any lines."
msgstr ""
"你已經有了一個畫正方形的函式：[code]draw_square()[/code]"
"。現在請用它來畫三個正方形。\n"
"\n"
"我們已經為你創建了[code]draw_square()[/code]。現在，請創建一個名為 [code]"
"draw_three_squares[/code] 的函式，這個函式會呼叫 [code]draw_square()[/code] "
"三次。\n"
"\n"
"如果你只是直接呼叫這個函式，所有三個正方形會重疊在一起。為了讓它們對角疊放，"
"請在兩次呼叫 [code]draw_square()[/code] 之間，呼叫 [code]jump(300, 300)"
"[/code]。\n"
"\n"
"呼叫 [code]jump(300, 300)[/code] 會讓烏龜跳躍 300 像素到右邊和下移 300 "
"像素，而且不會畫出任何線條。"

#: course/lesson-5-your-first-function/lesson.tres:275
msgid ""
"Now you created a function to draw squares, you can reuse it by calling it "
"multiple times."
msgstr "現在你已經創建了一個畫正方形的函式，你可以透過多次呼叫來重複使用它。"

#: course/lesson-5-your-first-function/lesson.tres:279
msgid "Coding Your First Function"
msgstr "編寫你的第一個函式"
