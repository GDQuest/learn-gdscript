# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2025-06-14 15:02+0200\n"
"PO-Revision-Date: 2022-06-13 17:18+0000\n"
"Last-Translator: Roman Rous <roman.rous@atlas.cz>\n"
"Language-Team: Czech <https://hosted.weblate.org/projects/learn-gdscript-"
"from-zero/glossary_database/cs/>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;\n"
"X-Generator: Weblate 4.13-dev\n"
"Generated-By: Babel 2.9.1\n"

#. Reference: member function
#: course/glossary.csv:6
msgid "member function"
msgstr "členská funkce"

#. Reference: member function
#: course/glossary.csv:6
msgid "member functions"
msgstr "členské funkce"

#. Reference: member function
#: course/glossary.csv:6
msgid ""
"Member functions are functions attached to a specific value type, like "
"arrays, strings, or dictionaries. We also call them methods.\n"
"\n"
"For example, arrays have member functions like [code]array.append()[/code].\n"
"\n"
"You can only call the function on an array, using the access operator "
"([code].[/code]) to access it, as shown above."
msgstr ""
"Členské funkce jsou funkce připojené k určitému typu hodnoty, jako jsou "
"pole, řetězce nebo slovníky. Říkáme jim také metody.\n"
"\n"
"Například pole mají členské funkce jako [code]array.append()[/code].\n"
"\n"
"Funkci můžete zavolat pouze na poli, přičemž pro přístup k ní použijete "
"operátor přístupu ([code].[/code]), jak je uvedeno výše."

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variable"
msgstr "členská proměnná"

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variables"
msgstr "členské proměnné"

#. Reference: member variable
#: course/glossary.csv:9
msgid ""
"Member variables are variables attached to a specific value type, like a "
"vector's [code]x[/code] and [code]y[/code] sub-variables. We also call them "
"[i]properties[/i] or [i]fields[/i] of the vector.\n"
"\n"
"To access a member variable, you must first write the value's name followed "
"by the access operator ([code].[/code]). For example, [code]position.x[/"
"code]."
msgstr ""
"Členské proměnné jsou proměnné připojené ke konkrétnímu typu hodnoty, jako "
"jsou podproměnné [code]x[/code] a [code]y[/code] vektoru. Říkáme jim také "
"[i]vlastnosti[/i] nebo [i]pole[/i] vektoru.\n"
"\n"
"Chcete-li získat přístup k členské proměnné, musíte nejprve napsat název "
"hodnoty a za ním operátor přístupu ([code].[/code]). Například "
"[code]position.x[/code]."

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameter"
msgstr "parametr"

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameters"
msgstr "parametry"

#. Reference: parameter
#: course/glossary.csv:12
msgid ""
"A parameter is a variable you create as part of a function definition.\n"
"\n"
"It allows you to reuse the function more by having values that vary in the "
"function's body."
msgstr ""
"Parametr je proměnná, kterou vytvoříte jako součást definice funkce.\n"
"\n"
"Umožňuje opakované použití funkce tím, že má hodnoty, které se v těle funkce "
"mění."

#. Reference: radian
#: course/glossary.csv:17
msgid "radian"
msgstr "radián"

#. Reference: radian
#: course/glossary.csv:17
msgid "radians"
msgstr "radiánů"

#. Reference: radian
#: course/glossary.csv:17
msgid ""
"A radian is a unit of measurement of angles based on the circle's "
"circumference.\n"
"\n"
"We tend to use degrees more in our daily lives, but in computer programming, "
"and especially in games, radians are common.\n"
"\n"
"An angle of [code]2 * PI[/code] radians corresponds to 360 degrees. And an "
"angle of [code]PI[/code] radians corresponds to 180 degrees."
msgstr ""
"Radián je jednotka pro měření úhlů na základě obvodu kruhu.\n"
"\n"
"V každodenním životě používáme spíše stupně, ale v počítačovém programování "
"a zejména ve hrách se radiány používají běžně.\n"
"\n"
"Úhel [code]2 * PI[/code] radiánů odpovídá 360 stupňům. A úhel [code]PI[/"
"code] radiánů odpovídá 180 stupňům."

#. Reference: type
#: course/glossary.csv:20
msgid "type"
msgstr "typ"

#. Reference: type
#: course/glossary.csv:20
msgid "types"
msgstr "typy"

#. Reference: type
#: course/glossary.csv:20
msgid ""
"In computer programming, a type is the class of a value. For example, whole "
"numbers like [code]3[/code], [code]11[/code], and [code]255462[/code] are "
"all of type [code]int[/code] (short for integer).\n"
"\n"
"The computer uses types to determine which operations are valid between two "
"values and when they're undefined."
msgstr ""
"V počítačovém programování je typ třídou hodnoty. Například celá čísla jako "
"[code]3[/code], [code]11[/code] a [code]255462[/code] jsou všechna typu "
"[code]int[/code] (zkratka pro celé číslo).\n"
"\n"
"Počítač používá typy k určení, které operace jsou platné mezi dvěma "
"hodnotami a kdy jsou nedefinované."

#. Reference: iteration
#: course/glossary.csv:23
msgid "iteration"
msgstr "iterace"

#. Reference: iteration
#: course/glossary.csv:23
msgid "iterations"
msgstr "iterací"

#. Reference: iteration
#: course/glossary.csv:23
msgid ""
"In computer code, an iteration is one repetition of some process or code. We "
"typically use the term with loops, where one iteration is one run of the "
"loop's code.\n"
"\n"
"When talking of algorithms, an iteration can mean a full pass of the "
"algorithm on a data set."
msgstr ""
"V počítačovém kódu je iterace opakováním nějakého procesu nebo kódu. Obvykle "
"používáme termín se smyčkami, kde jedna iterace je jeden běh kódu smyčky.\n"
"\n"
"Když mluvíme o algoritmech, iterace může znamenat úplný průchod algoritmu na "
"datové sadě."

#. Reference: vector
#: course/glossary.csv:28
msgid "vector"
msgstr "vektor"

#. Reference: vector
#: course/glossary.csv:28
msgid "vectors"
msgstr "vektory"

#. Reference: vector
#: course/glossary.csv:28
msgid ""
"In math, a vector is a list of numbers. In games, we often use 2D and 3D "
"vectors: respectively, lists of two and three numbers.\n"
"\n"
"We use that to represent a direction and magnitude or intensity in space. "
"For example, you can use a vector to represent the direction and speed at "
"which a character or a vehicle moves.\n"
"\n"
"Vectors can seem daunting at first because they are pretty abstract, but as "
"you will see, they'll simplify code tremendously."
msgstr ""
"V matematice je vektor seznamem čísel. Ve hrách často používáme 2D a 3D "
"vektory: seznamy dvou a tří čísel.\n"
"\n"
"Používáme to k reprezentaci směru a velikosti nebo intenzity v prostoru. "
"Můžete například použít vektor k vyjádření směru a rychlosti, kterou se "
"postava nebo vozidlo pohybuje.\n"
"\n"
"Vektory se mohou na první pohled zdát skličující, protože jsou dost "
"abstraktní, ale jak uvidíte, ohromně zjednoduší kód."

#. Reference: argument
#: course/glossary.csv:37
msgid "argument"
msgstr "argument"

#. Reference: argument
#: course/glossary.csv:37
msgid "arguments"
msgstr "argumenty"

#. Reference: argument
#: course/glossary.csv:37
msgid ""
"An argument is a value that you pass to a function when calling the "
"function. For example, in the call [code]rotate(0.5)[/code], the value "
"[code]0.5[/code] in the parentheses is an argument.\n"
"\n"
"A function can receive no arguments, one argument, or multiple arguments. "
"Arguments can be mandatory or optional.\n"
"\n"
"When a function takes multiple arguments, you separate the values with "
"commas, like in this function call: [code]jump(50, 100)[/code]\n"
"\n"
"When [i]calling[/i] a function, we name the values passed in parentheses "
"[i]arguments[/i].\n"
"\n"
"When writing a function definition, however, we talk about function "
"[i]parameters[/i]. In the following example, the names [code]x[/code] and "
"[code]y[/code] are [i]parameters[/i]."
msgstr ""
"Argument je hodnota, kterou předáváte funkci při jejím volání. Například ve "
"volání [code]rotate(0,5)[/code] je argumentem hodnota [code]0,5[/code] v "
"závorce.\n"
"\n"
"Funkce může přijímat žádné argumenty, jeden argument nebo více argumentů. "
"Argumenty mohou být povinné nebo nepovinné.\n"
"\n"
"Pokud funkce přijímá více argumentů, oddělujete hodnoty čárkami, jako v "
"tomto volání funkce: [code]jump(50, 100)[/code].\n"
"\n"
"Při [i]volání[/i] funkce pojmenováváme předávané hodnoty v závorkách "
"[i]argumenty[/i].\n"
"\n"
"Při psaní definice funkce však hovoříme o parametrech funkce [i]parametry[/"
"i]. V následujícím příkladu jsou názvy [code]x[/code] a [code]y[/code] "
"[i]parametry[/i]."

#. Reference: array
#: course/glossary.csv:44
msgid "array"
msgstr "pole"

#. Reference: array
#: course/glossary.csv:44
msgid "arrays"
msgstr "pole"

#. Reference: array
#: course/glossary.csv:44
msgid ""
"An array is a list of values. In GDScript, arrays can contain [i]any[/i] "
"types of value.\n"
"\n"
"To create an array, you write comma-separated values in square brackets: "
"[code]var three_numbers = [1, 2, 3][/code]\n"
"\n"
"In games, we use arrays all the time to store lists of characters in a "
"party, lists of items in inventory, lists of spells the player unlocked, and "
"so on. They're everywhere.\n"
"\n"
"Arrays are a fundamental value type in computer programming. You'll find "
"arrays in pretty much any programming language."
msgstr ""
"Pole je seznam hodnot. V jazyce GDScript mohou pole obsahovat hodnoty "
"[i]jakéhokoli[/i] typu.\n"
"\n"
"Pole vytvoříte tak, že hodnoty oddělené čárkami zapíšete do hranatých "
"závorek: [code]var three_numbers = [1, 2, 3][/code].\n"
"\n"
"Ve hrách používáme pole neustále k ukládání seznamů postav v partě, seznamů "
"předmětů v inventáři, seznamů kouzel, která hráč odemkl, a podobně. Jsou "
"všude.\n"
"\n"
"Pole jsou základním hodnotovým typem v počítačovém programování. Pole "
"najdete v podstatě v každém programovacím jazyce."

#. Reference: assign
#: course/glossary.csv:45
msgid "assign"
msgstr "přiřadit"

#. Reference: assign
#: course/glossary.csv:45
msgid ""
"Assigning a value to a variable means that you store a value inside the "
"variable. You do this with the equal sign ([code]=[/code])."
msgstr ""
"Přiřazení hodnoty proměnné znamená, že do proměnné uložíte hodnotu. To "
"provedete pomocí znaménka rovnosti ([code]=[/code])."

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionary"
msgstr "slovník"

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionaries"
msgstr "slovníky"

#. Reference: dictionary
#: course/glossary.csv:52
msgid ""
"A dictionary is a data structure that maps values with key-value pairs. When "
"you give the dictionary a key, it finds and gives you back the corresponding "
"value.\n"
"\n"
"In GDScript, keys can be many things. We often use text strings or numbers, "
"but you're not limited to that. A [code]Vector2[/code] can also be a valid "
"key, which is handy to map a grid cell to a unit or an item in a grid-based "
"game.\n"
"\n"
"You will often use dictionaries to associate bits of data in your games. For "
"example, we could use them to associate an equipment's name with its weapon "
"stats in a database.\n"
"\n"
"Like arrays, they are a fundamental data type that you will see in many "
"programming languages and use a lot."
msgstr ""
"Slovník je datová struktura, která mapuje hodnoty pomocí párů klíč–hodnota. "
"Když dáte slovníku klíč, najde a vrátí vám odpovídající hodnotu.\n"
"\n"
"V GDScriptu mohou být klíče mnoho věcí. Často používáme textové řetězce nebo "
"čísla, ale nejste tím omezeni. [code]Vector2[/code] může být také platným "
"klíčem, který je užitečný pro mapování buňky mřížky na jednotku nebo předmět "
"ve hře založené na mřížce.\n"
"\n"
"K přiřazení bitů dat ve vašich hrách budete často používat slovníky. Mohli "
"bychom je například použít k přiřazení názvu zařízení k jeho statistikám "
"zbraní v databázi.\n"
"\n"
"Stejně jako pole jsou slovníky základním datovým typem, který uvidíte v "
"mnoha programovacích jazycích a budete ho hodně používat."

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loop"
msgstr "smyčka for"

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loops"
msgstr "smyčky for"

#. Reference: for loop
#: course/glossary.csv:59
msgid ""
"A for loop instructs the computer to repeat a set of instructions once for "
"each value in an array.\n"
"\n"
"In each loop iteration, the compiler extracts one value from the array and "
"gives you access to it in the loop's body.\n"
"\n"
"For loops run code a limited amount of times: one per value in the array. It "
"is different from while loops that keep repeating code until a condition is "
"met.\n"
"\n"
"We recommend favoring for loops when you can. They're safer and easier to "
"use than while loops."
msgstr ""
"Smyčka for dává počítači pokyn, aby pro každou hodnotu v poli jednou "
"zopakoval sadu instrukcí.\n"
"\n"
"V každé iteraci cyklu kompilátor z pole vybere jednu hodnotu a zpřístupní ji "
"v těle cyklu.\n"
"\n"
"Smyčky for spouštějí kód daný počet opakování: jednou na každou hodnotu v "
"poli. Tím se liší od smyček while, které opakují kód, dokud není splněna "
"podmínka.\n"
"\n"
"Doporučujeme upřednostňovat smyčky for, pokud to jde. Jsou bezpečnější a "
"snadněji použitelné než smyčky while."

#. Reference: function
#: course/glossary.csv:64
msgid "function"
msgstr "funkce"

#. Reference: function
#: course/glossary.csv:64
msgid "functions"
msgstr "funkcí"

#. Reference: function
#: course/glossary.csv:64
msgid ""
"A function is a group of code instructions you give a name. When you define "
"a function, you can call it any time to run all the instructions it "
"contains.\n"
"\n"
"You can modify a function's behavior with parameters. Parameters are "
"variable names that you write in the function definition. You can then use "
"them in the function's body to make your code adapt to different cases.\n"
"\n"
"Also, functions can optionally return a value to the code calling it."
msgstr ""
"Funkce je skupina instrukcí kódu, které pojmenujete. Když definujete funkci, "
"můžete ji kdykoli zavolat a spustit všechny pokyny, které obsahuje.\n"
"\n"
"Chování funkce můžete upravit pomocí parametrů. Parametry jsou názvy "
"proměnných, které zapíšete do definice funkce. Pak je můžete použít v těle "
"funkce, aby se váš kód přizpůsobil různým případům.\n"
"\n"
"Funkce mohou také volitelně vrátit hodnotu kódu, který ji volá."

#. Reference: increment
#: course/glossary.csv:65
msgid "increment"
msgstr "přírůstek"

#. Reference: increment
#: course/glossary.csv:65
msgid "increments"
msgstr "přírůstky"

#. Reference: increment
#: course/glossary.csv:65
msgid "An increment is the amount by which a value changes in your code."
msgstr "Přírůstek je hodnota, o kterou se změní hodnota v kódu."

#. Reference: instruction
#: course/glossary.csv:68
msgid "instruction"
msgstr "instrukce"

#. Reference: instruction
#: course/glossary.csv:68
msgid "instructions"
msgstr "instrukce"

#. Reference: instruction
#: course/glossary.csv:68
msgid ""
"In computer programming, instructions are a single operation the computer "
"recognizes and can execute.\n"
"\n"
"For example, a function call, an addition, or assigning a value to a "
"variable."
msgstr ""
"V počítačovém programování představují instrukce jednotlivé operace, které "
"počítač rozpozná a může provést.\n"
"\n"
"Například volání funkce, sčítání nebo přiřazení hodnoty proměnné."

#. Reference: variable
#: course/glossary.csv:77
msgid "variable"
msgstr "proměnná"

#. Reference: variable
#: course/glossary.csv:77
msgid "variables"
msgstr "proměnné"

#. Reference: variable
#: course/glossary.csv:77
msgid ""
"Variables are a tool to give a name to values you want to store in your code "
"and change over time.\n"
"\n"
"For example, a character's health: when the character takes a hit, you want "
"it to go down. When healing, you want the health to go back up.\n"
"\n"
"You can create a variable named [code]health[/code] to represent the "
"health.\n"
"\n"
"Then, every time you write the keyword [code]health[/code] in your code, the "
"computer will fetch the corresponding value in its memory for you.\n"
"\n"
"Variables work a bit like product labels in a supermarket. They are names "
"that you attach to some value. Any time, you can take the label and stick it "
"onto a new product or, in that case, a new value."
msgstr ""
"Proměnné jsou nástrojem pro pojmenování hodnot, které chcete uložit do kódu "
"a v průběhu času je měnit.\n"
"\n"
"Například zdraví postavy: když postava dostane zásah, chcete, aby šel dolů. "
"Při léčení chcete, aby se zdraví vrátilo nahoru.\n"
"\n"
"Můžete vytvořit proměnnou s názvem [code]health[/code], která bude "
"reprezentovat zdraví.\n"
"\n"
"Poté, pokaždé, když do kódu napíšete klíčové slovo [code]health[/code], "
"počítač za vás načte odpovídající hodnotu ve své paměti.\n"
"\n"
"Proměnné fungují trochu jako štítky produktů v supermarketu. Jsou to jména, "
"kterým přikládáte nějakou hodnotu. Kdykoli můžete vzít štítek a nalepit jej "
"na nový produkt nebo v takovém případě na novou hodnotu."

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loop"
msgstr "smyčka while"

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loops"
msgstr "smyčky while"

#. Reference: while loop
#: course/glossary.csv:84
msgid ""
"A while loop instructs the computer to keep running code based on a "
"condition. While the condition is true, the loop keeps running.\n"
"\n"
"When coding while loops, you must be careful: they will keep running "
"infinitely and freeze your game if you get the condition wrong.\n"
"\n"
"That's why we recommend using the safer for loop whenever you can.\n"
"\n"
"However, there are still essential cases in which we use while loops, like "
"processing files, processing computer code, or for powerful algorithms."
msgstr ""
"Smyčka while dává počítači pokyn, aby ponechal spuštěný kód na základě "
"podmínky. Pokud je podmínka pravdivá, smyčka běží dál.\n"
"\n"
"Při kódování smyček while musíte být opatrní: poběží nekonečně dlouho a "
"zmrazí vaši hru, pokud podmínku uděláte špatně.\n"
"\n"
"Proto doporučujeme používat bezpečnější smyčku for, kdykoli je to možné.\n"
"\n"
"Stále však existují zásadní případy, kdy smyčky while používáme, jako je "
"zpracování souborů, zpracování počítačového kódu nebo pro výkonné algoritmy."

#. Reference: body
#: course/glossary.csv:85
msgid "body"
msgstr "tělo"

#. Reference: body
#: course/glossary.csv:85
msgid ""
"We talk about a loop or a function's body to refer to the lines of code that "
"are part of the loop or function."
msgstr ""
"O těle smyčky nebo funkce hovoříme, když označujeme řádky kódu, které jsou "
"součástí smyčky nebo funkce."

#. Reference: return
#: course/glossary.csv:88
msgid "return"
msgstr "return"

#. Reference: return
#: course/glossary.csv:88
msgid ""
"Returning a value is the process of sending a value to the place where you "
"call a function.\n"
"\n"
"It happens when a function uses the [code]return[/code] keyword followed by "
"a value, for example: [code]return -1[/code]."
msgstr ""
"Vrácení hodnoty je proces odeslání hodnoty na místo, kde jste zavolali "
"funkci.\n"
"\n"
"Dochází k němu, když funkce použije klíčové slovo [code]return[/code] "
"následované hodnotou: [code]return -1[/code]."

#. Reference: library
#: course/glossary.csv:89
msgid "library"
msgstr "knihovna"

#. Reference: library
#: course/glossary.csv:89
msgid "libraries"
msgstr "knihovny"

#. Reference: library
#: course/glossary.csv:89
msgid ""
"A collection of valuable and reusable code bundled together by other "
"programmers to save you time. All programmers use code libraries."
msgstr ""
"Sbírka cenného a opakovaně použitelného kódu, kterou spojili dohromady jiní "
"programátoři, aby vám ušetřili čas. Všichni programátoři používají knihovny "
"kódu."

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprite"
msgstr "sprite"

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprites"
msgstr "sprity"

#. Reference: sprite
#: course/glossary.csv:90
msgid ""
"In computer graphics, a sprite is an image you display on the screen. We "
"generally use this word to talk about moving images, like a character, a "
"monster, or an item falling on the ground."
msgstr ""
"V počítačové grafice je sprite obrázek, který se zobrazuje na obrazovce. "
"Obvykle toto slovo používáme pro pohyblivé obrázky, jako je postava, příšera "
"nebo předmět padající na zem."
