# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2025-06-14 15:02+0200\n"
"PO-Revision-Date: 2023-06-27 07:50+0000\n"
"Last-Translator: Deolindo <deolindojvn@gmail.com>\n"
"Language-Team: Portuguese (Brazil) <https://hosted.weblate.org/projects/"
"learn-gdscript-from-zero/glossary_database/pt_BR/>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n > 1;\n"
"X-Generator: Weblate 4.18.1\n"
"Generated-By: Babel 2.9.1\n"

#. Reference: member function
#: course/glossary.csv:6
msgid "member function"
msgstr "função membro"

#. Reference: member function
#: course/glossary.csv:6
msgid "member functions"
msgstr "funções membro"

#. Reference: member function
#: course/glossary.csv:6
msgid ""
"Member functions are functions attached to a specific value type, like "
"arrays, strings, or dictionaries. We also call them methods.\n"
"\n"
"For example, arrays have member functions like [code]array.append()[/code].\n"
"\n"
"You can only call the function on an array, using the access operator "
"([code].[/code]) to access it, as shown above."
msgstr ""
"As funções membro são funções anexadas a um tipo de valor específico, como "
"arrays, strings ou dicionários. Também os chamamos de métodos.\n"
"\n"
"Por exemplo, arrays têm funções membro como [code]array.append()[/code].\n"
"\n"
"Você só pode chamar a função em um array, usando o operador de acesso "
"([code].[/code]) para acessá-la, conforme mostrado acima."

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variable"
msgstr "variável membro"

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variables"
msgstr "variáveis membro"

#. Reference: member variable
#: course/glossary.csv:9
msgid ""
"Member variables are variables attached to a specific value type, like a "
"vector's [code]x[/code] and [code]y[/code] sub-variables. We also call them "
"[i]properties[/i] or [i]fields[/i] of the vector.\n"
"\n"
"To access a member variable, you must first write the value's name followed "
"by the access operator ([code].[/code]). For example, [code]position.x[/"
"code]."
msgstr ""
"As variáveis membro são variáveis anexadas a um tipo de valor específico, "
"como as sub-variáveis [code]x[/code] e [code]y[/code] de um vetor. Também as "
"chamamos de [i]propriedades[/i] ou [i]campos[/i] do vetor.\n"
"\n"
"Para acessar uma variável membro, você deve primeiro escrever o nome do "
"valor seguido pelo operador de acesso ([code].[/code]). Por exemplo, "
"[code]position.x[/code]."

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameter"
msgstr "parâmetro"

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameters"
msgstr "parâmetros"

#. Reference: parameter
#: course/glossary.csv:12
msgid ""
"A parameter is a variable you create as part of a function definition.\n"
"\n"
"It allows you to reuse the function more by having values that vary in the "
"function's body."
msgstr ""
"Um parâmetro é uma variável que você cria como parte da definição de uma "
"função.\n"
"\n"
"Ele permite que você reutilize mais vezes a função por ter valores que "
"variam no corpo da função."

#. Reference: radian
#: course/glossary.csv:17
msgid "radian"
msgstr "radiano"

#. Reference: radian
#: course/glossary.csv:17
msgid "radians"
msgstr "radianos"

#. Reference: radian
#: course/glossary.csv:17
msgid ""
"A radian is a unit of measurement of angles based on the circle's "
"circumference.\n"
"\n"
"We tend to use degrees more in our daily lives, but in computer programming, "
"and especially in games, radians are common.\n"
"\n"
"An angle of [code]2 * PI[/code] radians corresponds to 360 degrees. And an "
"angle of [code]PI[/code] radians corresponds to 180 degrees."
msgstr ""
"Um radiano é uma unidade de medida de ângulos com base na circunferência do "
"círculo.\n"
"\n"
"Costumamos usar mais ângulos em nossas vidas diárias, mas em programação, e "
"especialmente em jogos, radianos são comuns.\n"
"\n"
"Um ângulo de [code]2 * PI[/code] radianos corresponde a 360 graus. E um "
"ângulo de [code]PI[/code] radianos corresponde a 180 graus."

#. Reference: type
#: course/glossary.csv:20
msgid "type"
msgstr "tipo"

#. Reference: type
#: course/glossary.csv:20
msgid "types"
msgstr "tipos"

#. Reference: type
#: course/glossary.csv:20
msgid ""
"In computer programming, a type is the class of a value. For example, whole "
"numbers like [code]3[/code], [code]11[/code], and [code]255462[/code] are "
"all of type [code]int[/code] (short for integer).\n"
"\n"
"The computer uses types to determine which operations are valid between two "
"values and when they're undefined."
msgstr ""
"Em programação, um tipo é a classe de um valor. Por exemplo, números "
"inteiros como [code]3[/code], [code]11[/code] e [code]255462[/code] são "
"todos do tipo [code]int[/code] (abreviação de integer).\n"
"\n"
"O computador usa tipos para determinar quais operações são válidas entre "
"dois valores e quando são indefinidos."

#. Reference: iteration
#: course/glossary.csv:23
msgid "iteration"
msgstr "iteração"

#. Reference: iteration
#: course/glossary.csv:23
msgid "iterations"
msgstr "iterações"

#. Reference: iteration
#: course/glossary.csv:23
msgid ""
"In computer code, an iteration is one repetition of some process or code. We "
"typically use the term with loops, where one iteration is one run of the "
"loop's code.\n"
"\n"
"When talking of algorithms, an iteration can mean a full pass of the "
"algorithm on a data set."
msgstr ""
"Em código de computador, uma iteração é uma repetição de algum processo ou "
"código. Normalmente usamos o termo com loops, onde uma iteração é uma "
"execução do código do loop.\n"
"\n"
"Ao falar de algoritmos, uma iteração pode significar uma passagem completa "
"do algoritmo em um conjunto de dados."

#. Reference: vector
#: course/glossary.csv:28
msgid "vector"
msgstr "vetor"

#. Reference: vector
#: course/glossary.csv:28
msgid "vectors"
msgstr "vetores"

#. Reference: vector
#: course/glossary.csv:28
msgid ""
"In math, a vector is a list of numbers. In games, we often use 2D and 3D "
"vectors: respectively, lists of two and three numbers.\n"
"\n"
"We use that to represent a direction and magnitude or intensity in space. "
"For example, you can use a vector to represent the direction and speed at "
"which a character or a vehicle moves.\n"
"\n"
"Vectors can seem daunting at first because they are pretty abstract, but as "
"you will see, they'll simplify code tremendously."
msgstr ""
"Em matemática, um vetor é uma lista de números. Nos jogos, geralmente usamos "
"vetores 2D e 3D: respectivamente, listas de dois e três números.\n"
"\n"
"Usamos isso para representar uma direção e magnitude ou intensidade no "
"espaço do jogo. Por exemplo, você pode usar um vetor para representar a "
"direção e a velocidade em que um personagem ou veículo se move.\n"
"\n"
"Os vetores podem parecer assustadores no início porque são bastante "
"abstratos, mas como você vai ver, eles simplificarão tremendamente o código."

#. Reference: argument
#: course/glossary.csv:37
msgid "argument"
msgstr "argumento"

#. Reference: argument
#: course/glossary.csv:37
msgid "arguments"
msgstr "argumentos"

#. Reference: argument
#: course/glossary.csv:37
msgid ""
"An argument is a value that you pass to a function when calling the "
"function. For example, in the call [code]rotate(0.5)[/code], the value "
"[code]0.5[/code] in the parentheses is an argument.\n"
"\n"
"A function can receive no arguments, one argument, or multiple arguments. "
"Arguments can be mandatory or optional.\n"
"\n"
"When a function takes multiple arguments, you separate the values with "
"commas, like in this function call: [code]jump(50, 100)[/code]\n"
"\n"
"When [i]calling[/i] a function, we name the values passed in parentheses "
"[i]arguments[/i].\n"
"\n"
"When writing a function definition, however, we talk about function "
"[i]parameters[/i]. In the following example, the names [code]x[/code] and "
"[code]y[/code] are [i]parameters[/i]."
msgstr ""
"Um argumento é um valor que você passa para uma função ao chamá-la. Por "
"exemplo, na chamada [code]rotate(0.5)[/code], o valor [code]0.5[/code] entre "
"parênteses é um argumento.\n"
"\n"
"Uma função pode receber nenhum argumento, um argumento ou vários argumentos. "
"Os argumentos podem ser obrigatórios ou opcionais.\n"
"\n"
"Quando uma função recebe vários argumentos, você separa os valores com "
"vírgulas, como nesta chamada de função: [code]jump(50, 100)[/code]\n"
"\n"
"Ao [i]chamar[/i] uma função, nomeamos os valores passados entre parênteses "
"[i]argumentos[/i].\n"
"\n"
"Ao escrever uma definição de função, no entanto, falamos sobre "
"[i]parâmetros[/i] da função. No exemplo a seguir, os nomes [code]x[/code] e "
"[code]y[/code] são [i]parâmetros[/i]."

#. Reference: array
#: course/glossary.csv:44
msgid "array"
msgstr "array"

#. Reference: array
#: course/glossary.csv:44
msgid "arrays"
msgstr "arrays"

#. Reference: array
#: course/glossary.csv:44
msgid ""
"An array is a list of values. In GDScript, arrays can contain [i]any[/i] "
"types of value.\n"
"\n"
"To create an array, you write comma-separated values in square brackets: "
"[code]var three_numbers = [1, 2, 3][/code]\n"
"\n"
"In games, we use arrays all the time to store lists of characters in a "
"party, lists of items in inventory, lists of spells the player unlocked, and "
"so on. They're everywhere.\n"
"\n"
"Arrays are a fundamental value type in computer programming. You'll find "
"arrays in pretty much any programming language."
msgstr ""
"Um array é uma lista de valores. No GDScript, os arrays podem conter "
"[i]qualquer[/i] tipo de valor.\n"
"\n"
"Para criar um array, você escreve valores separados por vírgulas entre "
"colchetes: [code]var three_numbers = [1, 2, 3][/code]\n"
"\n"
"Nos jogos, usamos arrays o tempo todo para armazenar listas de personagens "
"em um grupo, listas de itens no inventário, listas de feitiços que o jogador "
"desbloqueou e assim por diante. Eles estão em toda parte.\n"
"\n"
"Arrays são um tipo de valor fundamental na programação. Você vai encontrar "
"arrays em praticamente qualquer linguagem de programação."

#. Reference: assign
#: course/glossary.csv:45
msgid "assign"
msgstr "atribuir"

#. Reference: assign
#: course/glossary.csv:45
msgid ""
"Assigning a value to a variable means that you store a value inside the "
"variable. You do this with the equal sign ([code]=[/code])."
msgstr ""
"Atribuir um valor a uma variável significa que você armazena um valor dentro "
"da variável. Você faz isso com o sinal de igual ([code]=[/code])."

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionary"
msgstr "dicionário"

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionaries"
msgstr "dicionários"

#. Reference: dictionary
#: course/glossary.csv:52
msgid ""
"A dictionary is a data structure that maps values with key-value pairs. When "
"you give the dictionary a key, it finds and gives you back the corresponding "
"value.\n"
"\n"
"In GDScript, keys can be many things. We often use text strings or numbers, "
"but you're not limited to that. A [code]Vector2[/code] can also be a valid "
"key, which is handy to map a grid cell to a unit or an item in a grid-based "
"game.\n"
"\n"
"You will often use dictionaries to associate bits of data in your games. For "
"example, we could use them to associate an equipment's name with its weapon "
"stats in a database.\n"
"\n"
"Like arrays, they are a fundamental data type that you will see in many "
"programming languages and use a lot."
msgstr ""
"Um dicionário é uma estrutura de dados que mapeia valores com pares chave-"
"valor. Quando você dá uma chave ao dicionário, ele encontra e devolve o "
"valor correspondente.\n"
"\n"
"No GDScript, as chaves podem ser muitas coisas. Costumamos usar strings ou "
"números, mas você não está limitado a isso. Um [code]Vector2[/code] também "
"pode ser uma chave válida, o que é útil para mapear uma célula de grid para "
"uma unidade ou um item em um jogo baseado em grid.\n"
"\n"
"Você costuma usar dicionários para associar pequenas partes de dados em seus "
"jogos. Por exemplo, poderíamos usá-los para associar o nome de um "
"equipamento às estatísticas de suas armas em um banco de dados.\n"
"\n"
"Assim como os arrays, eles são um tipo de dados fundamental que você verá em "
"muitas linguagens de programação e usará muito."

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loop"
msgstr "loop for"

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loops"
msgstr "loops for"

#. Reference: for loop
#: course/glossary.csv:59
msgid ""
"A for loop instructs the computer to repeat a set of instructions once for "
"each value in an array.\n"
"\n"
"In each loop iteration, the compiler extracts one value from the array and "
"gives you access to it in the loop's body.\n"
"\n"
"For loops run code a limited amount of times: one per value in the array. It "
"is different from while loops that keep repeating code until a condition is "
"met.\n"
"\n"
"We recommend favoring for loops when you can. They're safer and easier to "
"use than while loops."
msgstr ""
"Um loop for instrui o computador a repetir um conjunto de instruções uma vez "
"para cada valor em um array.\n"
"\n"
"Em cada iteração do loop, o compilador extrai um valor do array e dá acesso "
"a ele no corpo do loop.\n"
"\n"
"For loops, executa o código uma quantidade limitada de vezes: uma por valor "
"no array. É diferente dos loops while que continuam repetindo o código até "
"que uma condição seja atendida.\n"
"\n"
"Recomendamos usar os loops for quando puder. Eles são mais seguros e fáceis "
"de usar do que loops while."

#. Reference: function
#: course/glossary.csv:64
msgid "function"
msgstr "função"

#. Reference: function
#: course/glossary.csv:64
msgid "functions"
msgstr "funções"

#. Reference: function
#: course/glossary.csv:64
msgid ""
"A function is a group of code instructions you give a name. When you define "
"a function, you can call it any time to run all the instructions it "
"contains.\n"
"\n"
"You can modify a function's behavior with parameters. Parameters are "
"variable names that you write in the function definition. You can then use "
"them in the function's body to make your code adapt to different cases.\n"
"\n"
"Also, functions can optionally return a value to the code calling it."
msgstr ""
"Uma função é um grupo de instruções de código que você dá um nome. Ao "
"definir uma função, você pode chamá-la a qualquer momento para executar "
"todas as instruções que ela contém.\n"
"\n"
"Você pode modificar o comportamento de uma função com parâmetros. Parâmetros "
"são nomes de variáveis que você escreve na definição da função. Você pode "
"então usá-los no corpo da função para fazer com que seu código se adapte a "
"diferentes casos.\n"
"\n"
"Além disso, as funções podem, opcionalmente, retornar um valor ao código que "
"o chama."

#. Reference: increment
#: course/glossary.csv:65
msgid "increment"
msgstr "incremento"

#. Reference: increment
#: course/glossary.csv:65
msgid "increments"
msgstr "incrementos"

#. Reference: increment
#: course/glossary.csv:65
msgid "An increment is the amount by which a value changes in your code."
msgstr "Um incremento é a quantidade pela qual um valor muda em seu código."

#. Reference: instruction
#: course/glossary.csv:68
msgid "instruction"
msgstr "instrução"

#. Reference: instruction
#: course/glossary.csv:68
msgid "instructions"
msgstr "instruções"

#. Reference: instruction
#: course/glossary.csv:68
msgid ""
"In computer programming, instructions are a single operation the computer "
"recognizes and can execute.\n"
"\n"
"For example, a function call, an addition, or assigning a value to a "
"variable."
msgstr ""
"Em programação, as instruções são uma única operação que o computador "
"reconhece e pode executar.\n"
"\n"
"Por exemplo, uma chamada de função, uma adição ou atribuição de um valor a "
"uma variável."

#. Reference: variable
#: course/glossary.csv:77
msgid "variable"
msgstr "variável"

#. Reference: variable
#: course/glossary.csv:77
msgid "variables"
msgstr "variáveis"

#. Reference: variable
#: course/glossary.csv:77
msgid ""
"Variables are a tool to give a name to values you want to store in your code "
"and change over time.\n"
"\n"
"For example, a character's health: when the character takes a hit, you want "
"it to go down. When healing, you want the health to go back up.\n"
"\n"
"You can create a variable named [code]health[/code] to represent the "
"health.\n"
"\n"
"Then, every time you write the keyword [code]health[/code] in your code, the "
"computer will fetch the corresponding value in its memory for you.\n"
"\n"
"Variables work a bit like product labels in a supermarket. They are names "
"that you attach to some value. Any time, you can take the label and stick it "
"onto a new product or, in that case, a new value."
msgstr ""
"As variáveis são uma ferramenta para dar um nome aos valores que você deseja "
"armazenar em seu código e alterar ao longo do tempo.\n"
"\n"
"Por exemplo, a vida de um personagem: quando o personagem é atingido, você "
"quer que ele diminua. Ao curar, você quer que a vida aumente.\n"
"\n"
"Você pode criar uma variável chamada [code]health[/code] para representar a "
"vida.\n"
"\n"
"Então, toda vez que você escrever a palavra-chave [code]health[/code] em seu "
"código, o computador irá buscar o valor correspondente em sua memória para "
"você.\n"
"\n"
"As variáveis funcionam um pouco como rótulos de produtos em um supermercado. "
"São nomes que você atribui a algum valor. A qualquer momento, você pode "
"pegar o rótulo e colá-lo em um novo produto ou, nesse caso, em um novo valor."

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loop"
msgstr "loop while"

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loops"
msgstr "loops while"

#. Reference: while loop
#: course/glossary.csv:84
msgid ""
"A while loop instructs the computer to keep running code based on a "
"condition. While the condition is true, the loop keeps running.\n"
"\n"
"When coding while loops, you must be careful: they will keep running "
"infinitely and freeze your game if you get the condition wrong.\n"
"\n"
"That's why we recommend using the safer for loop whenever you can.\n"
"\n"
"However, there are still essential cases in which we use while loops, like "
"processing files, processing computer code, or for powerful algorithms."
msgstr ""
"Um loop while instrui o computador a continuar executando o código com base "
"em uma condição. Enquanto a condição for verdadeira, o loop continua em "
"execução.\n"
"\n"
"Ao programar loops while, você deve ter cuidado: eles continuarão rodando "
"infinitamente e vão travar seu jogo se você errar a condição.\n"
"\n"
"É por isso que recomendamos usar o loop for, que é mais seguro, sempre que "
"puder.\n"
"\n"
"No entanto, ainda existem casos essenciais em que usamos loops while, como "
"processamento de arquivos, processamento de código de computador ou "
"algoritmos poderosos."

#. Reference: body
#: course/glossary.csv:85
msgid "body"
msgstr "corpo"

#. Reference: body
#: course/glossary.csv:85
msgid ""
"We talk about a loop or a function's body to refer to the lines of code that "
"are part of the loop or function."
msgstr ""
"Falamos de um loop ou corpo de uma função para nos referirmos às linhas de "
"código que fazem parte do loop ou função."

#. Reference: return
#: course/glossary.csv:88
msgid "return"
msgstr "return"

#. Reference: return
#: course/glossary.csv:88
msgid ""
"Returning a value is the process of sending a value to the place where you "
"call a function.\n"
"\n"
"It happens when a function uses the [code]return[/code] keyword followed by "
"a value, for example: [code]return -1[/code]."
msgstr ""
"Retornar um valor é o processo de enviar um valor para o local onde você "
"chama uma função.\n"
"\n"
"Isso acontece quando uma função usa a palavra-chave [code]return[/code] "
"seguida de um valor, por exemplo: [code]return -1[/code]."

#. Reference: library
#: course/glossary.csv:89
msgid "library"
msgstr "biblioteca"

#. Reference: library
#: course/glossary.csv:89
msgid "libraries"
msgstr "bibliotecas"

#. Reference: library
#: course/glossary.csv:89
msgid ""
"A collection of valuable and reusable code bundled together by other "
"programmers to save you time. All programmers use code libraries."
msgstr ""
"Uma coleção de códigos valiosos e reutilizáveis agrupados por outros "
"programadores para economizar seu tempo. Todos os programadores usam "
"bibliotecas de código."

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprite"
msgstr "sprite"

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprites"
msgstr "sprites"

#. Reference: sprite
#: course/glossary.csv:90
msgid ""
"In computer graphics, a sprite is an image you display on the screen. We "
"generally use this word to talk about moving images, like a character, a "
"monster, or an item falling on the ground."
msgstr ""
"Em computação gráfica, uma sprite é uma imagem que você exibe na tela. "
"Geralmente usamos essa palavra para falar de imagens em movimento, como um "
"personagem, um monstro ou um item caindo no chão."
