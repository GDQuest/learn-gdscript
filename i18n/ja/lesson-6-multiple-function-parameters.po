# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2023-05-16 09:25+0200\n"
"PO-Revision-Date: 2024-03-31 12:09+0000\n"
"Last-Translator: cyochot <k97un9ri@gmail.com>\n"
"Language-Team: Japanese <https://hosted.weblate.org/projects/"
"learn-gdscript-from-zero/lesson-6-multiple-function-parameters/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.5-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-6-multiple-function-parameters/lesson.tres:14
msgid ""
"In the previous part, you created a function to draw a square of a fixed "
"size.\n"
"\n"
"This function is a bit limiting. Instead, it would be much better if we had "
"a function to draw a square of [i]any[/i] size. Or better: any kind of "
"rectangle (a square is a specific kind of rectangle).\n"
"\n"
"In previous lessons, you used the [code]rotate()[/code] function and gave it "
"an [i]argument[/i]."
msgstr ""
"前のパートでは、固定サイズの正方形を描画する関数を作成しました。\n"
"\n"
"この機能には少し制限があります。 代わりに、[i]任意の[/i]サイズの正方形を描画"
"する関数があればもっと良いでしょう。 さらに良いのは、任意の種類の長方形 "
"(正方形は特定の種類の長方形です) です。\n"
"\n"
"前のレッスンでは、[code]rotate()[/code] 関数を使用し、[i]引数[/i] "
"を与えました。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:38
msgid ""
"Just like [code]rotate()[/code], we can also give our function "
"[i]parameters[/i]. Parameters are labels you give to values passed to the "
"function."
msgstr ""
"[code]rotate()[/code] と同じように、関数に [i]パラメータ[/i] "
"を与えることもできます。 パラメーターは、関数に渡される値に付けるラベルです。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:46
msgid "Can I rotate in both directions?"
msgstr "両方向に回転できますか?"

#: course/lesson-6-multiple-function-parameters/lesson.tres:48
msgid ""
"The [code]radians[/code] can be a positive or negative number, which allows "
"you to rotate both clockwise and counter-clockwise."
msgstr "[code]radians[/code]には正または負の数値を指定でき、時計回りと反時計回りの両"
"方で回転できます。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:58
msgid ""
"For now, please focus on the first line: [code]func rotate(radians)[/code].\n"
"\n"
"When you call [code]rotate(0.5)[/code], the computer binds the value "
"[code]0.5[/code] to the label [code]radians[/code].\n"
"\n"
"Wherever the computer sees the identifier [code]radians[/code] inside the "
"function, it replaces it with the [code]0.5[/code] value.\n"
"\n"
"The parameter name is always a label you use to refer to a [i]value[/i]. The "
"value in question can be a number, text, or anything else.\n"
"\n"
"For now, we'll stick to numbers as we have yet to see other value types."
msgstr ""
"ここでは、最初の行 [code]funcrotate(radians)[/code] に注目してください。\n"
"\n"
"[code]rotate(0.5)[/code] を呼び出すと、コンピューターは値 [code]0.5[/code] "
"をラベル [code]radians[/code] にバインドします。\n"
"\n"
"コンピューターは関数内で識別子 [code]radians[/code] を見つけると、それを "
"[code]0.5[/code] 値に置き換えます。\n"
"\n"
"パラメータ名は常に、[i]値[/i]を参照するために使用するラベルです。 "
"問題の値は、数値、テキスト、またはその他のものにすることができます。\n"
"\n"
"現時点では、他の値の種類をまだ見ていないため、数値にこだわります。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:74
msgid "What is a function parameter?"
msgstr "関数パラメータとは何ですか?"

#: course/lesson-6-multiple-function-parameters/lesson.tres:77
msgid ""
"A parameter is a label that represents a value.\n"
"\n"
"The value in question can change: it depends on what you put in parentheses "
"when calling a function."
msgstr ""
"パラメータは値を表すラベルです。\n"
"\n"
"問題の値は変更される可能性があります。関数を呼び出すときに括弧内に何を入れた"
"かによって異なります。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:80
#: course/lesson-6-multiple-function-parameters/lesson.tres:81
msgid "A label you give to a value the function receives."
msgstr "関数が受け取る値に付けるラベル。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:80
msgid "A number you use to make calculations."
msgstr "計算に使用する数値。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:80
msgid "The name of a function."
msgstr "関数の名前。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:88
msgid "How to create functions with parameters"
msgstr "パラメーターを使用して関数を作成する方法"

#: course/lesson-6-multiple-function-parameters/lesson.tres:90
msgid ""
"You can give your function parameters when writing its [i]definition[/i] "
"(the line starting with the [code]func[/code] keyword).\n"
"\n"
"To do so, you add a name inside of the parentheses."
msgstr ""
"関数の[i]定義[/i] ([code]func[/code] キーワードで始まる行) "
"を記述するときに、関数パラメーターを指定できます。\n"
"\n"
"これを行うには、括弧内に名前を追加します。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:112
msgid ""
"You can give parameters any name. How you name functions and parameters is "
"up to you. \n"
"\n"
"Just remember that names cannot contain spaces. To write parameter names "
"with multiple words, you need to use underscores.\n"
"\n"
"The following function definition is exactly equivalent to the previous one."
msgstr ""
"パラメータには任意の名前を付けることができます。 "
"関数とパラメータにどのような名前を付けるかはあなた次第です。\n"
"\n"
"名前にスペースを含めることはできないことに注意してください。 パラメータ名を複"
"数の単語で記述するには、アンダースコアを使用する必要があります。\n"
"\n"
"次の関数定義は、前の関数定義とまったく同じです。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:136
msgid ""
"Parameters make your code easier to reuse.\n"
"\n"
"Here's an example with a function to draw any square. Use the slider to "
"change the value passed to the function and draw squares of different sizes."
msgstr ""
"パラメーターを使用すると、コードを再利用しやすくなります。\n"
"\n"
"以下は、任意の正方形を描画する関数の例です。 スライダーを使用して関数に渡され"
"る値を変更し、さまざまなサイズの正方形を描画します。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:156
msgid "Which is the correct syntax for a function definition?"
msgstr "関数定義の正しい構文はどれですか?"

#: course/lesson-6-multiple-function-parameters/lesson.tres:159
msgid ""
"To define a function, you need to start with the [code]func[/code] keyword "
"followed by a space, the [code]function_name[/code], and optional parameters "
"inside parentheses.\n"
"\n"
"You must end the line with a colon, which defines a new code block. We'll "
"see moving forward that keywords other than [code]func[/code] require a "
"colon at the end of the line."
msgstr ""
"関数を定義するには、[code]func[/code] キーワードで始め、その後にスペース、[co"
"de]関数名[/code]、および括弧内のオプションのパラメーターを続ける必要がありま"
"す。\n"
"\n"
"新しいコード ブロックを定義するコロンで行を終了する必要があります。 "
"[code]func[/code] "
"以外のキーワードでは行末にコロンが必要であることが今後わかります。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:162
#: course/lesson-6-multiple-function-parameters/lesson.tres:163
msgid "func function_name(parameter_name):"
msgstr "func 関数名(パラメータ名):"

#: course/lesson-6-multiple-function-parameters/lesson.tres:162
msgid "func (function_name): parameter_name"
msgstr "func (関数名): パラメータ名"

#: course/lesson-6-multiple-function-parameters/lesson.tres:162
msgid "func function_name(parameter_name)"
msgstr "func 関数名(パラメータ名)"

#: course/lesson-6-multiple-function-parameters/lesson.tres:162
msgid "function_name(parameter_name):"
msgstr "関数名(パラメータ名):"

#: course/lesson-6-multiple-function-parameters/lesson.tres:170
msgid "Functions can have multiple parameters"
msgstr "関数には複数のパラメータを含めることができます"

#: course/lesson-6-multiple-function-parameters/lesson.tres:172
msgid ""
"You can use multiple parameters in a function. In fact, you can use as many "
"as you [i]need[/i].\n"
"\n"
"To separate the function parameters, you need to write a comma between them."
msgstr ""
"関数では複数のパラメーターを使用できます。 "
"実際、[i]必要なだけ[/i]使用できます。\n"
"\n"
"関数パラメータを区切るには、パラメータの間にカンマを記述する必要があります。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:192
msgid "Must I write spaces between function parameters?"
msgstr "関数パラメータの間にスペースを入力する必要がありますか?"

#: course/lesson-6-multiple-function-parameters/lesson.tres:194
msgid ""
"In a function definition, you must have a space between the [code]func[/"
"code] keyword and the function name.\n"
"\n"
"However, because we use the comma to separate parameters, it doesn't matter "
"if you use spaces between parameters. As long as you have the comma, either "
"syntax is correct.\n"
"\n"
"We often use spaces after the comma for readability."
msgstr ""
"関数定義では、[code]func[/code] キーワードと関数名の間にスペースが必要です。"
"\n"
"\n"
"ただし、パラメータの区切りにはカンマを使用するため、パラメータ間にスペースを"
"使用しても問題はありません。 カンマがある限り、どちらの構文も正しいです。\n"
"\n"
"読みやすくするために、カンマの後にスペースを使用することがよくあります。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:208
msgid ""
"The following example defines a function that uses two parameters to move an "
"entity on both the X and Y axes."
msgstr "次の例では、2 つのパラメーターを使用してエンティティを X 軸と Y "
"軸の両方に移動する関数を定義します。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:226
msgid "How should I name my functions and parameters?"
msgstr "関数やパラメータにどのような名前を付ければよいでしょうか?"

#: course/lesson-6-multiple-function-parameters/lesson.tres:228
msgid ""
"The names of functions, parameters, or other things in your code are "
"entirely up to you.\n"
"\n"
"They are written by us programmers for other programmers. You want to use "
"the names that make the most sense to you and fellow programmers.\n"
"\n"
"You could absolutely write single-letter names like in maths classes: "
"[code]a[/code], [code]b[/code], [code]f[/code].\n"
"\n"
"You can also write abbreviated names like [code]pos[/code] for position, "
"[code]bg[/code] for background, and so on.\n"
"\n"
"Many programmers do either or both of the above.\n"
"\n"
"At GDQuest, we favor complete and explicit names.\n"
"\n"
"We generally try to write code that is explicit and relatively easy to "
"read.\n"
"\n"
"Right now, you have to enter every letter when you code, so long names may "
"feel inconvenient.\n"
"\n"
"However, this is good for learning: it trains your fingers to [ignore]type "
"precisely.\n"
"\n"
"Then, after you finish this course, you will see that the computer assists "
"you a lot when you code real games with a feature called auto-completion.\n"
"\n"
"Based on a few characters you [ignore]type, it will offer you to complete "
"long names."
msgstr ""
"コード内の関数、パラメータ、その他の名前は完全にあなた次第です。\n"
"\n"
"これらは私たちプログラマによって他のプログラマのために書かれています。 "
"自分自身や他のプログラマにとって最も意味のある名前を使用する必要があります。"
"\n"
"\n"
"数学の授業のように、[code]a[/code]、[code]b[/code]、[code]f[/code] のように "
"1 文字の名前を書くこともできます。\n"
"\n"
"位置には [code]pos[/code]、背景には [code]bg[/code] "
"などの省略名を記述することもできます。\n"
"\n"
"多くのプログラマーは上記のいずれか、または両方を行っています。\n"
"\n"
"GDQuest では、完全で明示的な名前を優先します。\n"
"\n"
"私たちは通常、明示的で比較的読みやすいコードを書こうとします。\n"
"\n"
"現時点では、コーディングするときにすべての文字を入力する必要があるため、長い"
"名前は不便に感じるかもしれません。\n"
"\n"
"ただし、これは学習には役立ちます。指が正確に [無視] "
"して入力できるように訓練されます。\n"
"\n"
"このコースを終了すると、実際のゲームをコーディングするときに、オートコンプリ"
"ートと呼ばれる機能を使用してコンピューターが大いに支援してくれることがわかり"
"ます。\n"
"\n"
"[無視] "
"して入力したいくつかの文字に基づいて、長い名前を完成させることができます。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:256
msgid "When defining a function, parameters are..."
msgstr "関数を定義するときのパラメータは..."

#: course/lesson-6-multiple-function-parameters/lesson.tres:259
msgid ""
"You can define functions with or without parameters, depending on your needs."
msgstr "ニーズに応じて、パラメーターを使用して関数を定義することも、パラメーターなし"
"で関数を定義することもできます。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:260
#: course/lesson-6-multiple-function-parameters/lesson.tres:261
msgid "Optional"
msgstr "オプション"

#: course/lesson-6-multiple-function-parameters/lesson.tres:260
msgid "Mandatory"
msgstr "必須"

#: course/lesson-6-multiple-function-parameters/lesson.tres:268
msgid ""
"What's the correct syntax to define a function with multiple parameters?"
msgstr "複数のパラメーターを持つ関数を定義するための正しい構文は何ですか?"

#: course/lesson-6-multiple-function-parameters/lesson.tres:271
msgid ""
"You always write the function parameters inside of the parentheses. To "
"define multiple parameters, you separate them with a comma."
msgstr "関数パラメータは常に括弧内に記述します。 "
"複数のパラメータを定義するには、パラメータをカンマで区切ります。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:272
#: course/lesson-6-multiple-function-parameters/lesson.tres:273
msgid "func function_name(parameter_1, parameter_2, ...):"
msgstr "func 関数名(パラメーター 1, パラメーター 2, ...):"

#: course/lesson-6-multiple-function-parameters/lesson.tres:272
msgid "func function_name(parameter_1 parameter_2 ...):"
msgstr "func 関数名(パラメーター 1 パラメーター 2 ...):"

#: course/lesson-6-multiple-function-parameters/lesson.tres:272
msgid "func function_name(): parameter_1, parameter_2, ..."
msgstr "func 関数名(): パラメータ 1, パラメータ 2, ..."

#: course/lesson-6-multiple-function-parameters/lesson.tres:282
msgid ""
"Now it's your turn to create a function with multiple parameters: a function "
"to draw rectangles of any size."
msgstr "次は、複数のパラメーターを持つ関数、つまり任意のサイズの四角形を描画する関数"
"を作成する番です。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:290
msgid "Drawing corners of different sizes"
msgstr "さまざまなサイズのコーナーを描画する"

#: course/lesson-6-multiple-function-parameters/lesson.tres:291
msgid ""
"Before we create a rectangle of any size, let's first see how we can use "
"parameters to draw simpler shapes.\n"
"\n"
"Here we have an incomplete function that will draw corners with lines of any "
"length, but it's missing its [code]length[/code] parameter.\n"
"\n"
"The function will move the turtle forward an amount defined by the parameter "
"[code]length[/code], turn [code]90[/code] degrees, then move forward "
"[code]length[/code] pixels.\n"
"\n"
"Complete the [code]draw_corner()[/code] function so it uses the "
"[code]length[/code] parameter to draw corners."
msgstr ""
"任意のサイズの長方形を作成する前に、まずパラメーターを使用してより単純な形状"
"を描画する方法を見てみましょう。\n"
"\n"
"ここには、任意の長さの線でコーナーを描画する不完全な関数がありますが、[code]l"
"ength[/code] パラメーターが欠落しています。\n"
"\n"
"この関数は、パラメータ [code]length[/code] "
"で定義された量だけカメを前方に移動し、[code]90[/code] 度回転して、次に "
"[code]length[/code] ピクセル前方に移動します。\n"
"\n"
"[code]draw_corner()[/code] 関数を完成させて、[code]length[/code] "
"パラメーターを使用してコーナーを描画します。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:309
msgid ""
"Using function parameters, code a function you can reuse to draw corners "
"with lines of varying sizes."
msgstr "関数パラメーターを使用して、さまざまなサイズの線でコーナーを描画するために再"
"利用できる関数をコーディングします。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:314
msgid "Using multiple parameters"
msgstr "複数のパラメータの使用"

#: course/lesson-6-multiple-function-parameters/lesson.tres:315
msgid ""
"In this practice, we'll improve our [code]draw_corner()[/code] function so "
"the angle can also vary.\n"
"\n"
"Add the [code]angle[/code] parameter after the [code]length[/code] parameter "
"in the [code]draw_corner()[/code] function and use it to draw corners of "
"varying angles."
msgstr ""
"この演習では、角度も変更できるように [code]draw_corner()[/code] "
"関数を改善します。\n"
"\n"
"[code]draw_corner()[/code] 関数の [code]length[/code] パラメーターの後に "
"[code]angle[/code] "
"パラメーターを追加し、それを使用してさまざまな角度のコーナーを描画します。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:329
msgid "With two parameters, code a function to draw corners with any angle."
msgstr "2 つのパラメーターを使用して、任意の角度でコーナーを描画する関数をコーディン"
"グします。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:334
msgid "Drawing squares of any size"
msgstr "任意のサイズの正方形を描画する"

#: course/lesson-6-multiple-function-parameters/lesson.tres:335
msgid ""
"We want a function to draw squares of any size.\n"
"\n"
"We could use these squares as outlines when selecting units in a tactical "
"game, as a frame for items in an inventory, and more.\n"
"\n"
"Create a function named [code]draw_square()[/code] that takes one parameter: "
"the [code]length[/code] of the square's sides.\n"
"\n"
"[b]The turtle should face towards the right when starting or completing a "
"square.[/b]\n"
"\n"
"Be sure to call [b]turn_right(90)[/b]  enough times in your function to do "
"so."
msgstr ""
"任意のサイズの正方形を描画する関数が必要です。\n"
"\n"
"これらの四角形は、戦術ゲームでユニットを選択するときのアウトラインとして使用"
"したり、インベントリ内のアイテムのフレームとして使用したりできます。\n"
"\n"
"[code]draw_square()[/code] という名前の関数を作成します。この関数は 1 "
"つのパラメータ、つまり正方形の辺の [code]length[/code] を受け取ります。\n"
"\n"
"[b]正方形を開始または完了するとき、カメは右を向く必要があります。[/b]\n"
"\n"
"そうするために、関数内で [b]turn_right(90)[/b] "
"を十分な回数呼び出してください。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:352
msgid ""
"In the previous lesson, your function would draw squares of a fixed size. "
"Using a parameter, code a function to draw squares of any size."
msgstr "前のレッスンでは、関数は固定サイズの正方形を描画します。 パラメーターを使用し"
"て、任意のサイズの正方形を描画する関数をコーディングします。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:357
msgid "Drawing rectangles of any size"
msgstr "任意のサイズの長方形を描画する"

#: course/lesson-6-multiple-function-parameters/lesson.tres:358
msgid ""
"Let's make our square drawing function more flexible to include rectangles "
"of varying sizes.\n"
"\n"
"Your job is to code a function named [code]draw_rectangle()[/code] that "
"takes two parameters: the [code]length[/code] and the [code]height[/code] of "
"the rectangle.\n"
"\n"
"[b]The turtle should face towards the right when starting or completing a "
"rectangle.[/b]\n"
"\n"
"Note that we could still draw a square with [code]draw_rectangle()[/code] by "
"having the [code]length[/code] and [code]height[/code] equal the same value."
msgstr ""
"正方形の描画関数をより柔軟にして、さまざまなサイズの長方形を含めてみましょう"
"。\n"
"\n"
"あなたの仕事は、長方形の [code]length[/code] と [code]height[/code] という 2 "
"つのパラメータを取る [code]draw_rectangle()[/code] "
"という名前の関数をコーディングすることです。\n"
"\n"
"[b]長方形を開始または完成するとき、カメは右を向く必要があります。[/b]\n"
"\n"
"[code]length[/code] と [code]height[/code] "
"を同じ値にすることで、[code]draw_rectangle()[/code] "
"を使用しても正方形を描画できることに注意してください。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:381
msgid ""
"With one parameter, you can make squares of any size. With two, you can draw "
"any rectangle! You'll do so in this practice."
msgstr "1 つのパラメーターを使用して、任意のサイズの正方形を作成できます。 "
"2つあればどんな長方形でも描けます！ この演習ではそれを行います。"

#: course/lesson-6-multiple-function-parameters/lesson.tres:385
msgid "Your First Function Parameter"
msgstr "最初の関数パラメータ"
