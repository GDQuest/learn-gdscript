# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2025-06-14 15:02+0200\n"
"PO-Revision-Date: 2024-03-31 09:14+0000\n"
"Last-Translator: cyochot <k97un9ri@gmail.com>\n"
"Language-Team: Japanese <https://hosted.weblate.org/projects/learn-gdscript-"
"from-zero/glossary_database/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.5-dev\n"
"Generated-By: Babel 2.9.1\n"

#. Reference: member function
#: course/glossary.csv:6
msgid "member function"
msgstr "メンバ関数"

#. Reference: member function
#: course/glossary.csv:6
msgid "member functions"
msgstr "メンバ関数"

#. Reference: member function
#: course/glossary.csv:6
msgid ""
"Member functions are functions attached to a specific value type, like "
"arrays, strings, or dictionaries. We also call them methods.\n"
"\n"
"For example, arrays have member functions like [code]array.append()[/code].\n"
"\n"
"You can only call the function on an array, using the access operator "
"([code].[/code]) to access it, as shown above."
msgstr ""
"メンバ関数は、配列、文字列、辞書などの特定の値型に関連付けられた関数です。 そ"
"れらはメソッドとも呼びます。\n"
"\n"
"たとえば、配列には[code]array.append()[/code]のようなメンバ関数があります。\n"
"\n"
"上記のように、アクセス演算子([code].[/code])を使用すると、配列の関数を呼び出"
"すことができます。"

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variable"
msgstr "メンバ変数"

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variables"
msgstr "メンバ変数"

#. Reference: member variable
#: course/glossary.csv:9
msgid ""
"Member variables are variables attached to a specific value type, like a "
"vector's [code]x[/code] and [code]y[/code] sub-variables. We also call them "
"[i]properties[/i] or [i]fields[/i] of the vector.\n"
"\n"
"To access a member variable, you must first write the value's name followed "
"by the access operator ([code].[/code]). For example, [code]position.x[/"
"code]."
msgstr ""
"メンバー変数とは、ベクトルの[code]x[/code]および、[code]y[/code]といったサブ"
"変数のように、特定の値型に関連付けられた変数です。 それらをベクトルの[i]プロ"
"パティ[/i]、または[i]フィールド[/i]とも呼びます。\n"
"\n"
"メンバー変数にアクセスするには、最初に値の名前を記述して次にアクセス演算子"
"([code].[/code])を記述する必要があります。 たとえば、[code]position.x[/code]"
"のように記述します。"

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameter"
msgstr "パラメータ"

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameters"
msgstr "パラメータ"

#. Reference: parameter
#: course/glossary.csv:12
msgid ""
"A parameter is a variable you create as part of a function definition.\n"
"\n"
"It allows you to reuse the function more by having values that vary in the "
"function's body."
msgstr ""
"パラメータは関数定義の一部として作成する変数です。\n"
"\n"
"関数の本体で値を変えることで、関数をより便利に活用できます。"

#. Reference: radian
#: course/glossary.csv:17
msgid "radian"
msgstr "ラジアン"

#. Reference: radian
#: course/glossary.csv:17
msgid "radians"
msgstr "ラジアン"

#. Reference: radian
#: course/glossary.csv:17
msgid ""
"A radian is a unit of measurement of angles based on the circle's "
"circumference.\n"
"\n"
"We tend to use degrees more in our daily lives, but in computer programming, "
"and especially in games, radians are common.\n"
"\n"
"An angle of [code]2 * PI[/code] radians corresponds to 360 degrees. And an "
"angle of [code]PI[/code] radians corresponds to 180 degrees."
msgstr ""
"ラジアンとは、円の円周に基づく角度の測定単位です。\n"
"\n"
"私たちは日常生活で度を使用する傾向がありますが、コンピュータープログラミン"
"グ、特にゲームではラジアンが一般的です。\n"
"\n"
"[code]2 * PI[/code]ラジアンの角度は360度に対応します。 また、[code]PI[/code]"
"ラジアンの角度は180度に対応します。"

#. Reference: type
#: course/glossary.csv:20
msgid "type"
msgstr "型"

#. Reference: type
#: course/glossary.csv:20
msgid "types"
msgstr "型"

#. Reference: type
#: course/glossary.csv:20
msgid ""
"In computer programming, a type is the class of a value. For example, whole "
"numbers like [code]3[/code], [code]11[/code], and [code]255462[/code] are "
"all of type [code]int[/code] (short for integer).\n"
"\n"
"The computer uses types to determine which operations are valid between two "
"values and when they're undefined."
msgstr ""
"コンピュータプログラミングでは、型は値のクラスと言えます。 たとえば[code]3[/"
"code]、[code]11[/code]、[code]255462[/code]などの整数はすべて[code]int[/code]"
"(integerの略)型です。\n"
"\n"
"コンピュータは、型を使用して2つの値の間で有効な操作と、それらが未定義の場合を"
"判別します。"

#. Reference: iteration
#: course/glossary.csv:23
msgid "iteration"
msgstr "反復"

#. Reference: iteration
#: course/glossary.csv:23
msgid "iterations"
msgstr "反復"

#. Reference: iteration
#: course/glossary.csv:23
msgid ""
"In computer code, an iteration is one repetition of some process or code. We "
"typically use the term with loops, where one iteration is one run of the "
"loop's code.\n"
"\n"
"When talking of algorithms, an iteration can mean a full pass of the "
"algorithm on a data set."
msgstr ""
"コンピュータのコード処理では、反復とはあるプロセスまたはコードの1回の繰り返し"
"処理のことです。 通常この用語はループで使用されます。ここでは1回の反復はルー"
"プでの1回分のコード処理実行です。\n"
"\n"
"アルゴリズムについて話すとき、反復はデータセットに対するアルゴリズムの完全な"
"処理実行を意味する場合があります。"

#. Reference: vector
#: course/glossary.csv:28
msgid "vector"
msgstr "ベクトル"

#. Reference: vector
#: course/glossary.csv:28
msgid "vectors"
msgstr "ベクトル"

#. Reference: vector
#: course/glossary.csv:28
msgid ""
"In math, a vector is a list of numbers. In games, we often use 2D and 3D "
"vectors: respectively, lists of two and three numbers.\n"
"\n"
"We use that to represent a direction and magnitude or intensity in space. "
"For example, you can use a vector to represent the direction and speed at "
"which a character or a vehicle moves.\n"
"\n"
"Vectors can seem daunting at first because they are pretty abstract, but as "
"you will see, they'll simplify code tremendously."
msgstr ""
"数学のベクトルは数値のリストです。 ゲームでは2Dおよび3Dベクトルを使用すること"
"がよくあります。それぞれ、2つおよび3つの数値のリストです。\n"
"\n"
"これを使用して空間の方向と大きさまたは強度を表します。 たとえばベクトルを使用"
"してキャラクター、または車両が移動する方向と速度を表すことができます。\n"
"\n"
"ベクトルはかなり抽象的であるため、ちょっと難しく思えるかもしれません。でも後"
"で分かりますがコードはとてもシンプルになります。"

#. Reference: argument
#: course/glossary.csv:37
msgid "argument"
msgstr "引数"

#. Reference: argument
#: course/glossary.csv:37
msgid "arguments"
msgstr "引数"

#. Reference: argument
#: course/glossary.csv:37
msgid ""
"An argument is a value that you pass to a function when calling the "
"function. For example, in the call [code]rotate(0.5)[/code], the value "
"[code]0.5[/code] in the parentheses is an argument.\n"
"\n"
"A function can receive no arguments, one argument, or multiple arguments. "
"Arguments can be mandatory or optional.\n"
"\n"
"When a function takes multiple arguments, you separate the values with "
"commas, like in this function call: [code]jump(50, 100)[/code]\n"
"\n"
"When [i]calling[/i] a function, we name the values passed in parentheses "
"[i]arguments[/i].\n"
"\n"
"When writing a function definition, however, we talk about function "
"[i]parameters[/i]. In the following example, the names [code]x[/code] and "
"[code]y[/code] are [i]parameters[/i]."
msgstr ""
"引数とは関数を呼び出すときに渡す値です。 たとえば[code]rotate(0.5)[/code]の呼"
"び出しでは、括弧内の値[code]0.5[/code]は引数です。\n"
"\n"
"関数は引数なし、もしくは1つから複数の引数を受け取ることができます。 引数は必"
"須またはオプションにすることができます。\n"
"\n"
"関数が複数の引数を受け取る場合は、次の関数呼び出しのように、値をカンマで区切"
"ります： [code]jump(50,100)[/code]のようにします。\n"
"\n"
"関数を[i]呼び出す[/i]ときは、括弧内に渡される[i]引数[/i]の値に名前を付けま"
"す。\n"
"\n"
"関数定義を作成する時の、関数の[i]パラメーター[/i]について説明します。 次の例"
"では、名前[code]x[/code]と[code]y[/code]は[i]パラメータ[/i]です。"

#. Reference: array
#: course/glossary.csv:44
msgid "array"
msgstr "配列"

#. Reference: array
#: course/glossary.csv:44
msgid "arrays"
msgstr "配列"

#. Reference: array
#: course/glossary.csv:44
msgid ""
"An array is a list of values. In GDScript, arrays can contain [i]any[/i] "
"types of value.\n"
"\n"
"To create an array, you write comma-separated values in square brackets: "
"[code]var three_numbers = [1, 2, 3][/code]\n"
"\n"
"In games, we use arrays all the time to store lists of characters in a "
"party, lists of items in inventory, lists of spells the player unlocked, and "
"so on. They're everywhere.\n"
"\n"
"Arrays are a fundamental value type in computer programming. You'll find "
"arrays in pretty much any programming language."
msgstr ""
"配列は値のリストです。 GDScriptでは配列には[i]任意の[/i]タイプの値を含めるこ"
"とができます。\n"
"\n"
"配列を作成するには、角かっこでコンマ区切りの値を記述します。[code] var "
"three_numbers = [1, 2, 3] [/code]\n"
"\n"
"ゲームでは配列を使用して、パーティーのキャラクターのリスト、インベントリ内の"
"アイテムのリスト、プレーヤーがロック解除した呪文のリストなどを保存します。 配"
"列はいたるところで使われます。\n"
"\n"
"配列はコンピュータープログラミングの基本的な型です。 配列はほとんどすべてのプ"
"ログラミング言語で見つかります。"

#. Reference: assign
#: course/glossary.csv:45
msgid "assign"
msgstr "代入"

#. Reference: assign
#: course/glossary.csv:45
msgid ""
"Assigning a value to a variable means that you store a value inside the "
"variable. You do this with the equal sign ([code]=[/code])."
msgstr ""
"変数に値を代入するということは、変数内に値を格納することを意味します。 これは"
"イコール記号([code] = [/code])で行います。"

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionary"
msgstr "辞書"

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionaries"
msgstr "辞書"

#. Reference: dictionary
#: course/glossary.csv:52
msgid ""
"A dictionary is a data structure that maps values with key-value pairs. When "
"you give the dictionary a key, it finds and gives you back the corresponding "
"value.\n"
"\n"
"In GDScript, keys can be many things. We often use text strings or numbers, "
"but you're not limited to that. A [code]Vector2[/code] can also be a valid "
"key, which is handy to map a grid cell to a unit or an item in a grid-based "
"game.\n"
"\n"
"You will often use dictionaries to associate bits of data in your games. For "
"example, we could use them to associate an equipment's name with its weapon "
"stats in a database.\n"
"\n"
"Like arrays, they are a fundamental data type that you will see in many "
"programming languages and use a lot."
msgstr ""
"辞書は値をキーと値のペアでマップするデータ構造の型です。 辞書にキーを与える"
"と、対応する値が検出されて返されます。\n"
"\n"
"GDScriptではキーは様々な型が使用可能です。 通常はテキスト文字列や数字をよく使"
"用しますが、それに限定されません。 [code] Vector2 [/code]も有効なキーにするこ"
"とができます。これは例えばグリッドベースのゲームでグリッドセルをユニットまた"
"はアイテムにマッピングするときに便利です。\n"
"\n"
"多くの場合、辞書を使用してゲーム内のデータの一部を関連付けます。例えば装備し"
"ている武器の名前をデータベース内の武器データに関連付けることができます。\n"
"\n"
"配列と同様、辞書は多くのプログラミング言語で見られ、よく使用される基本的な"
"データ型です。"

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loop"
msgstr "forループ"

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loops"
msgstr "forループ"

#. Reference: for loop
#: course/glossary.csv:59
msgid ""
"A for loop instructs the computer to repeat a set of instructions once for "
"each value in an array.\n"
"\n"
"In each loop iteration, the compiler extracts one value from the array and "
"gives you access to it in the loop's body.\n"
"\n"
"For loops run code a limited amount of times: one per value in the array. It "
"is different from while loops that keep repeating code until a condition is "
"met.\n"
"\n"
"We recommend favoring for loops when you can. They're safer and easier to "
"use than while loops."
msgstr ""
"forループは配列内の値ごとに一連の命令を繰り返し行うようにコンピューターに指示"
"します。\n"
"\n"
"ループの反復ごとにコンパイラは配列から1つの値を取り出し、ループの本体でその値"
"にアクセスできるようにします。\n"
"\n"
"forループの場合、コードを実行する回数は配列内の値ごとに1回です。 これは条件が"
"満たされるまでコードを繰り返し続けるwhileループとは異なります。\n"
"\n"
"できるだけforループを優先して使用することをお勧めします。 forループはwhile"
"ループより安全で使いやすくなっています。"

#. Reference: function
#: course/glossary.csv:64
msgid "function"
msgstr "関数"

#. Reference: function
#: course/glossary.csv:64
msgid "functions"
msgstr "関数"

#. Reference: function
#: course/glossary.csv:64
msgid ""
"A function is a group of code instructions you give a name. When you define "
"a function, you can call it any time to run all the instructions it "
"contains.\n"
"\n"
"You can modify a function's behavior with parameters. Parameters are "
"variable names that you write in the function definition. You can then use "
"them in the function's body to make your code adapt to different cases.\n"
"\n"
"Also, functions can optionally return a value to the code calling it."
msgstr ""
"関数は名前が付けられた命令コードのグループです。 関数を定義すれば、いつでも呼"
"び出すことができ、関数に含まれるすべての命令を実行できます。\n"
"\n"
"パラメータを使用して関数の動作を変更できます。 パラメータは関数定義に一緒に書"
"かれる変数のことです。 次にパラメータを関数の本体で使用して、コードを様々な用"
"途に適応させることができます。\n"
"\n"
"また、関数はオプション的に呼び出し側のコードに値を返すことができます。"

#. Reference: increment
#: course/glossary.csv:65
msgid "increment"
msgstr "インクリメント"

#. Reference: increment
#: course/glossary.csv:65
msgid "increments"
msgstr "インクリメント"

#. Reference: increment
#: course/glossary.csv:65
msgid "An increment is the amount by which a value changes in your code."
msgstr "インクリメントとはコードの中で値が変化する量のことです。"

#. Reference: instruction
#: course/glossary.csv:68
msgid "instruction"
msgstr "命令"

#. Reference: instruction
#: course/glossary.csv:68
msgid "instructions"
msgstr "命令"

#. Reference: instruction
#: course/glossary.csv:68
msgid ""
"In computer programming, instructions are a single operation the computer "
"recognizes and can execute.\n"
"\n"
"For example, a function call, an addition, or assigning a value to a "
"variable."
msgstr ""
"コンピュータプログラミングにおいて、命令とはコンピュータが識別して実行できる1"
"つの処理のこと。\n"
"\n"
"例えば、関数呼び出し、加算、変数に値を代入することなどがある。"

#. Reference: variable
#: course/glossary.csv:77
msgid "variable"
msgstr "変数"

#. Reference: variable
#: course/glossary.csv:77
msgid "variables"
msgstr "変数"

#. Reference: variable
#: course/glossary.csv:77
msgid ""
"Variables are a tool to give a name to values you want to store in your code "
"and change over time.\n"
"\n"
"For example, a character's health: when the character takes a hit, you want "
"it to go down. When healing, you want the health to go back up.\n"
"\n"
"You can create a variable named [code]health[/code] to represent the "
"health.\n"
"\n"
"Then, every time you write the keyword [code]health[/code] in your code, the "
"computer will fetch the corresponding value in its memory for you.\n"
"\n"
"Variables work a bit like product labels in a supermarket. They are names "
"that you attach to some value. Any time, you can take the label and stick it "
"onto a new product or, in that case, a new value."
msgstr ""
"変数は、コードに保存して時間の経過とともに変更する値に名前を付けるツールで"
"す。\n"
"\n"
"たとえば、キャラクターの体力: キャラクターが攻撃を受けたとき、体力を低下させ"
"たいと考えます。 治癒するときは、体力を回復したいと考えます。\n"
"\n"
"体力状態を表す [code]health[/code] という名前の変数を作成できます。\n"
"\n"
"その後、コードにキーワード [code]health[/code] を書き込むたびに、コンピュー"
"ターはメモリ内の対応する値を取得します。\n"
"\n"
"変数は、スーパーマーケットの商品の名前に似た働きをします。 変数は、何らかの値"
"に付ける名前です。 いつでも名前の値を取得、または新しい名前に値を貼り付けるこ"
"とができます。"

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loop"
msgstr "whileループ"

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loops"
msgstr "whileループ"

#. Reference: while loop
#: course/glossary.csv:84
msgid ""
"A while loop instructs the computer to keep running code based on a "
"condition. While the condition is true, the loop keeps running.\n"
"\n"
"When coding while loops, you must be careful: they will keep running "
"infinitely and freeze your game if you get the condition wrong.\n"
"\n"
"That's why we recommend using the safer for loop whenever you can.\n"
"\n"
"However, there are still essential cases in which we use while loops, like "
"processing files, processing computer code, or for powerful algorithms."
msgstr ""
"while ループは、条件に基づいてコードを実行し続けるようにコンピューターに指示"
"します。 条件が true の間、ループは実行され続けます。\n"
"\n"
"while ループをコーディングするときは注意が必要です。条件を間違えると無限に実"
"行され続け、ゲームがフリーズしてしまいます。\n"
"\n"
"そのため、可能な限り、より安全な for ループを使用することをお勧めします。\n"
"\n"
"ただし、ファイルの処理、コンピューター コードの処理、または強力なアルゴリズム"
"など、while ループを使用する重要なケースが依然としてあります。"

#. Reference: body
#: course/glossary.csv:85
msgid "body"
msgstr "体"

#. Reference: body
#: course/glossary.csv:85
msgid ""
"We talk about a loop or a function's body to refer to the lines of code that "
"are part of the loop or function."
msgstr ""
"ループまたは関数の本体については、ループまたは関数の一部であるコード行を指し"
"ます。"

#. Reference: return
#: course/glossary.csv:88
msgid "return"
msgstr "戻る"

#. Reference: return
#: course/glossary.csv:88
msgid ""
"Returning a value is the process of sending a value to the place where you "
"call a function.\n"
"\n"
"It happens when a function uses the [code]return[/code] keyword followed by "
"a value, for example: [code]return -1[/code]."
msgstr ""
"値を返すとは、関数を呼び出した場所に値を送信するプロセスです。\n"
"\n"
"これは、関数で [code]return[/code] キーワードの後に値が使用されている場合に発"
"生します (例: [code]return -1[/code])。"

#. Reference: library
#: course/glossary.csv:89
msgid "library"
msgstr "ライブラリ"

#. Reference: library
#: course/glossary.csv:89
msgid "libraries"
msgstr "ライブラリ"

#. Reference: library
#: course/glossary.csv:89
msgid ""
"A collection of valuable and reusable code bundled together by other "
"programmers to save you time. All programmers use code libraries."
msgstr ""
"時間を節約するために他のプログラマーによってバンドルされた貴重で再利用可能な"
"コードのコレクション。 すべてのプログラマーはコード ライブラリを使用します。"

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprite"
msgstr "スプライト"

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprites"
msgstr "スプライト"

#. Reference: sprite
#: course/glossary.csv:90
msgid ""
"In computer graphics, a sprite is an image you display on the screen. We "
"generally use this word to talk about moving images, like a character, a "
"monster, or an item falling on the ground."
msgstr ""
"コンピュータグラフィックスでは、スプライトは画面に表示する画像です。この言葉"
"は一般的に、キャラクター、モンスター、地面に落ちるアイテムなどの動画について"
"話すときに使用します。"
