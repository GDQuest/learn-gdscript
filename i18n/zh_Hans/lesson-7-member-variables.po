# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2023-12-09 20:05+0100\n"
"PO-Revision-Date: 2024-02-29 13:51+0000\n"
"Last-Translator: 二中 <worigoule@gmail.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"learn-gdscript-from-zero/lesson-7-member-variables/zh_Hans/>\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.5-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-7-member-variables/lesson.tres:14
msgid ""
"In this lesson, we take a first look at variables.\n"
"\n"
"In games, you need to keep track of many values that change over time:\n"
"\n"
"- The player's score.\n"
"- Every character or enemy's health.\n"
"- The last checkpoint.\n"
"\n"
"And so much more. You need to store, retrieve, and update those values.\n"
"\n"
"We call those values [i]variables[/i]. Variables are labels you use to keep "
"track of values that vary over time. Here's an example of a variable "
"tracking a character or monster's health."
msgstr ""
"在本课中，我们会第一次接触到变量。\n"
"\n"
"在游戏中，你需要跟踪许多随时间变化的值：\n"
"\n"
"- 玩家的分数。\n"
"- 每个角色或敌人的生命值。\n"
"- 上一个检查点的位置。\n"
"\n"
"还有更多其他的。你需要存储、检索和更新这些值。\n"
"\n"
"我们将这些值称为 [i] 变量 [/i]。变量是用于跟踪随时间变化的值的标签。这是一个"
"跟踪角色或怪物生命值的变量示例。"

#: course/lesson-7-member-variables/lesson.tres:44
msgid ""
"The line above defines a new variable named [code]health[/code] and assigns "
"it a starting value of [code]100[/code] (that's what the equal sign does, "
"more on that below).\n"
"\n"
"Function parameters, which you saw in the previous lesson, are another "
"example of variables."
msgstr ""
"上面的行定义了一个名为 [code]health[/code] 的新变量，并为它分配了一个起始值 "
"[code]100[/code]（这就是等号的作用，下面会详细介绍）。\n"
"\n"
"你在上一课中看到的函数参数也是一种变量的例子。"

#: course/lesson-7-member-variables/lesson.tres:56
msgid ""
"In this lesson, we start using variables built into Godot. They're a "
"particular kind called [i]member variables[/i].\n"
"\n"
"Member variables are values attached to a game entity. They're useful "
"properties like the [code]position[/code], [code]rotation[/code], and "
"[code]scale[/code] of a character.\n"
"\n"
"In a previous lesson, we saw how we could use the [code]rotate()[/code] "
"function to rotate our character."
msgstr ""
"在本课中，我们从使用 Godot 内置好的变量开始。它们是一种特殊的类型，称为 [i] "
"成员变量 [/i]。\n"
"\n"
"成员变量是附加到游戏实体上的值。 它们是很有用的属性，例如角色的 "
"[code]position[/code]、[code]rotation[/code] 和 "
"[code]scale[/code]（位置，旋转，缩放比例）。\n"
"\n"
"在上一课中，我们看过了如何使用 [code]rotate()[/code] 函数来旋转我们的角色。"

#: course/lesson-7-member-variables/lesson.tres:80
msgid ""
"This function increases or decreases the value of the entity's "
"[code]rotation[/code] member variable.\n"
"\n"
"Say we want to reset the rotation to [code]0[/code] and make the character "
"upright. Using the [code]rotate()[/code] function can prove difficult: you "
"need to know the character's exact current angle to cancel it out.\n"
"\n"
"It's much easier to use the member variable rather than the function.\n"
"\n"
"The following code assigns the value [code]0[/code] to the character's "
"rotation, resetting its angle and making it upright."
msgstr ""
"此函数增加或减少实体的成员变量 [code]rotation[/code] 的值。\n"
"\n"
"假设我们要将旋转重置为 [code]0[/code] 并使角色直立。 用这个 "
"[code]rotate()[/code] "
"函数可能很困难做到：需要知道角色当前的确切角度才能抵消掉。\n"
"\n"
"直接修改成员变量比使用这个简单的函数要容易得多。\n"
"\n"
"以下代码将值 [code]0[/code] 赋值给角色的旋转，重置其角度并使其直立。"

#: course/lesson-7-member-variables/lesson.tres:106
msgid ""
"Notice how we use the equal sign ([code]=[/code]) to change the value of a "
"variable."
msgstr "请注意我们是如何使用等号 ([code]=[/code]) 来更改变量的值的。"

#: course/lesson-7-member-variables/lesson.tres:114
msgid "What's a variable?"
msgstr "什么是变量？"

#: course/lesson-7-member-variables/lesson.tres:117
msgid ""
"Variables are labels you use to access values that change over time.\n"
"\n"
"You can also use them to put a name on a value you want to reuse throughout "
"your code. It makes your code easier to read and to change."
msgstr ""
"变量是用于访问随时间变化的值的标签。\n"
"\n"
"你还可以用他们来给在整个代码中会重复使用的值命名。这会使你的代码更易于阅读和"
"更改。"

#: course/lesson-7-member-variables/lesson.tres:120
#: course/lesson-7-member-variables/lesson.tres:121
msgid "A label you use to keep track of a value that can change."
msgstr "一个标签，用于跟踪可更改的值。"

#: course/lesson-7-member-variables/lesson.tres:120
msgid "A function that varies over time."
msgstr "随时间变化的函数。"

#: course/lesson-7-member-variables/lesson.tres:120
msgid "A decimal number."
msgstr "一个小数。"

#: course/lesson-7-member-variables/lesson.tres:128
msgid "Accessing sub-variables with the dot"
msgstr "使用一个点号访问子变量"

#: course/lesson-7-member-variables/lesson.tres:130
msgid ""
"In video games, you will see many member variables that have sub-values.\n"
"\n"
"For example, the [code]position[/code] we mentioned has two coordinates: "
"[code]x[/code] and [code]y[/code].\n"
"\n"
"It's the same for the [code]scale[/code]: it has [code]x[/code] and [code]y[/"
"code] sub-variables. They respectively control the horizontal and vertical "
"size of the game entity.\n"
"\n"
"To access those X and Y sub-components, you add a dot (\".\") after the "
"variable name.\n"
"\n"
"The code below places the entity at [code]200[/code] pixels on the x-axis "
"and [code]250[/code] pixels on the y-axis."
msgstr ""
"在游戏中，你会看到许多具有子值的成员变量。\n"
"\n"
"比如我们提到的[code]position[/code]有两个坐标：[code]x[/code]和[code]y[/code]"
"。\n"
"\n"
"[code]scale[/code] 也是如此：它有 [code]x[/code] 和 [code]y[/code] 子变量。 "
"分别控制游戏实体的水平和垂直大小。\n"
"\n"
"要访问这些 X 和 Y 子组件，请在变量名称后添加一个点（“.”）。\n"
"\n"
"下面的代码会把实体放置在 x 轴上的 [code]200[/code] 像素和 y 轴上的 "
"[code]250[/code] 像素处。"

#: course/lesson-7-member-variables/lesson.tres:158
msgid ""
"Notice how we use the equal sign (\"=\") to assign the numbers on the right "
"to the sub-variables on the left.\n"
"\n"
"Unlike in maths, in computer programming, the equal sign (\"=\") does not "
"mean \"is equal to.\"\n"
"\n"
"Instead, it means \"assign the result of the expression on the right to the "
"variable on the left\". We assign values so often in code that we prefer to "
"reserve the equal sign for that."
msgstr ""
"请注意我们如何使用等号（“=”）将右侧的数字分配给左侧的子变量。\n"
"\n"
"与数学不同，在计算机编程中，等号（“=”）并不是“等于”的意思。\n"
"\n"
"相反，它的意思是“将右侧表达式的结果分配给左侧的变量”。 "
"写代码时进行赋值实在是太频繁，以至于我们更倾向于把等号用在这件事情上。"

#: course/lesson-7-member-variables/lesson.tres:170
msgid "In games, the Y-axis is positive going down"
msgstr "在游戏中，Y 轴为正向下"

#: course/lesson-7-member-variables/lesson.tres:172
msgid ""
"Note that in games, assuming your character's position starts at (0, 0), the "
"code above moves the entity [code]200[/code] pixels to the right and "
"[code]250[/code] pixels down.\n"
"\n"
"In math, the y-axis is generally positive going up by convention.\n"
"\n"
"The convention is the [i]opposite[/i] in video games and many computer "
"applications: the y-axis is positive going down."
msgstr ""
"请注意，在游戏中，假设你的角色的位置从 (0, 0) 开始，上面的代码将实体向右移动 "
"[code]200[/code] 像素并向下移动 [code]250[/code] 像素。\n"
"\n"
"在数学中，按照惯例，y 轴通常为正向上。\n"
"\n"
"该约定与游戏和许多计算机应用程序中的[i]相反[/i]：y轴是向下为正的。"

#: course/lesson-7-member-variables/lesson.tres:194
msgid "Why does the Y-axis point downwards?"
msgstr "为什么 Y 轴向下？"

#: course/lesson-7-member-variables/lesson.tres:196
msgid ""
"This may be confusing if you only saw the y-axis pointing up in math "
"classes. However, in math, axes go in any direction. They don't even have to "
"be perpendicular.\n"
"\n"
"On the computer, the position (0, 0) happens to correspond to the top-left "
"of your computer screen. It then makes sense for coordinates to be positive "
"when going towards the bottom-right corner.\n"
"\n"
"This leads to another question: why is position zero the top left of the "
"screen? This is due to computer and TV displays history: they would "
"calculate and display pixels starting from the top left corner and moving "
"towards the bottom right corner."
msgstr ""
"如果你只在数学课上看到过指向上方的y轴，这可能会令人困惑。 "
"但是，在数学中，数轴可以指向任何地方。它们甚至不一定是垂直的。\n"
"\n"
"在计算机领域，位置 (0, 0) 恰好对应计算机屏幕的左上角。 "
"因此当朝向右下角时，坐标为正是有意义的。\n"
"\n"
"这就引出了另一个问题：为什么零点在屏幕的左上角？ 这是由于计算机和显示器的历史"
"：在以前是从左上角开始计算并显示像素，然后向右下角移动的。"

#: course/lesson-7-member-variables/lesson.tres:210
msgid ""
"Let's look at one last example before moving on to the practice. The "
"following code makes the character 1.5 times its starting size."
msgstr "在开始练习之前，让我们看最后一个例子。 以下代码使角色变成其起始大小的 1.5 "
"倍。"

#: course/lesson-7-member-variables/lesson.tres:228
msgid "How do you access sub-variables?"
msgstr "怎样才能访问子变量？"

#: course/lesson-7-member-variables/lesson.tres:229
msgid ""
"Variables often hold sub-values, like the [code]position[/code] has two sub-"
"variables: [code]x[/code] and [code]y[/code]. How would you access the "
"[code]x[/code], for example?"
msgstr ""
"变量通常包含子值，例如 [code]position[/code] 有两个子变量：[code]x[/code] 和 "
"[code]y[/code]。那么，你要怎么访问到 [code]x[/code]？"

#: course/lesson-7-member-variables/lesson.tres:231
msgid ""
"To access a sub-variable, you need to write a dot between the parent "
"variable name and the sub-variable name.\n"
"\n"
"For example, to access the [code]x[/code] sub-variable of the "
"[code]position[/code] variable, you'll write [code]position.x[/code]."
msgstr ""
"要访问子变量，需要在父变量名称和子变量名称之间写一个点。\n"
"\n"
"例如，要访问变量 [code]position[/code] 的子变量 [code]x[/code] ，你需要写 "
"[code]position.x[/code]。"

#: course/lesson-7-member-variables/lesson.tres:234
#: course/lesson-7-member-variables/lesson.tres:235
msgid "You write a dot (\".\") between the variable and the sub-variable name."
msgstr "在变量和子变量名称之间写一个点（“.”）。"

#: course/lesson-7-member-variables/lesson.tres:234
msgid ""
"You write an arrow (\"->\") between the variable and the sub-variable name."
msgstr "在变量和子变量名称之间写一个箭头（“->”）。"

#: course/lesson-7-member-variables/lesson.tres:234
msgid ""
"You write a slash (\"/\") between the variable and the sub-variable name."
msgstr "在变量和子变量名称之间写一个斜杠（“/”）。"

#: course/lesson-7-member-variables/lesson.tres:244
msgid ""
"In a future lesson, we'll explain why and how those variables have sub-"
"variables.\n"
"\n"
"For now, just know you can use the dot to access them.\n"
"\n"
"We'll tell you which variables have sub-components and what their names "
"are.\n"
"\n"
"In the next lessons, you'll create your own variables and do operations on "
"them to add or remove [code]score[/code], [code]health[/code], you name it.\n"
"\n"
"For now, let's practice accessing variables."
msgstr ""
"在以后的课程中，我们将解释这些变量为什么有子变量，以及是怎样实现的。\n"
"\n"
"现在，你只需要知道可以使用点号来访问它们。\n"
"\n"
"我们会告诉你哪些变量具有子组件以及子组件的名称。\n"
"\n"
"在接下来的课程中，你将创建自己的变量并操作它们，添加或删除 "
"[code]score[/code]（得分）、[code]health[/code]（生命值），什么都行。\n"
"\n"
"现在，让我们来练习访问变量。"

#: course/lesson-7-member-variables/lesson.tres:260
msgid "Draw a rectangle at a precise position"
msgstr "在精确位置绘制一个矩形"

#: course/lesson-7-member-variables/lesson.tres:261
msgid ""
"Draw a rectangle of 200 by 120 pixels at the X position of 120 pixels and Y "
"position of 100 pixels.\n"
"\n"
"You need to replace the numbers in the code editor to draw the correct "
"rectangle."
msgstr ""
"在X轴 120 像素位置和Y轴 100 像素位置绘制一个 200 x 120 像素的矩形。\n"
"\n"
"你需要替换代码编辑器中的数字以绘制正确的矩形。"

#: course/lesson-7-member-variables/lesson.tres:275
msgid ""
"Use the position member variable and its sub-variables to change the "
"rectangle's position."
msgstr "使用成员变量 position 及其子变量来改变矩形的位置。"

#: course/lesson-7-member-variables/lesson.tres:280
msgid "Draw squares at different positions"
msgstr "在不同位置绘制多个矩形"

#: course/lesson-7-member-variables/lesson.tres:281
msgid ""
"Draw three squares of size 100 by 100 that are 100 pixels apart on the "
"horizontal axis. In other words, there should be a 100-pixel gap between two "
"squares.\n"
"\n"
"You should draw the squares starting at the position (100, 100). This means "
"you should position the first square at 100 on the X axis and 100 on the Y "
"axis.\n"
"\n"
"Remember you need to use the equal sign ([code]=[/code]) to change the value "
"of a variable, like the turtle's position.\n"
"\n"
"Write your code inside the [code]run()[/code] function so the computer can "
"recognize it.\n"
"\n"
"Use the provided [code]draw_rectangle()[/code] function to draw each square."
msgstr ""
"绘制三个大小为 100 x 100 的正方形，它们在水平轴上相距 100 像素。 换句话说，"
"两个正方形之间应该有 100 像素的间隙。\n"
"\n"
"你应该从位置 (100, 100) 开始绘制正方形。 也就是说你应该将第一个正方形放置在 "
"X 轴上的 100 和 Y 轴上的 100 处。\n"
"\n"
"请记住，你需要使用等号 ([code]=[/code]) 来更改变量的值，例如海龟的位置。\n"
"\n"
"在 [code]run()[/code] 函数中编写你的代码，以便计算机能够识别它。\n"
"\n"
"画正方形的时候，用之前用过的 [code]draw_rectangle()[/code] 函数就行了。"

#: course/lesson-7-member-variables/lesson.tres:299
msgid ""
"Now you can place and draw one shape, but how about drawing several? In this "
"practice, you'll place three squares side by side to really get the hang of "
"properties."
msgstr "现在你能放置和绘制一个矩形，但放好几个呢？在这一练习中，你得做到并排放置三个"
"矩形才算真正掌握了这些功能的使用。"

#: course/lesson-7-member-variables/lesson.tres:303
msgid "Introduction to Member Variables"
msgstr "引入成员变量"
