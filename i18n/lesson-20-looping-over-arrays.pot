# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero  \n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2022-02-21 20:14+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: course/lesson-20-looping-over-arrays/lesson.tres:14
msgid ""
"We used the [code]range()[/code] function in combination with "
"[code]for[/code] loops."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:34
msgid ""
"The [code]range()[/code] function produced an array that the "
"[code]for[/code] keyword could loop over.\n"
"\n"
"We can give for loops [i]any[/i] array, and they will loop over them just"
" the same.\n"
"\n"
"Instead of using the [code]range()[/code] function, we could manually "
"write the numbers and get the same result."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:58
msgid ""
"For each element inside the array, the [code]for[/code] loop extracts it,"
" stores it in the temporary variable named [code]number[/code], and "
"executes the loop's code once.\n"
"\n"
"Inside the loop, you can access the [code]number[/code] variable, which "
"changes on each [i]iteration[/i].\n"
"\n"
"The code works regardless of the array or where you store it. Often, you "
"will store arrays in variables for easy access."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:80
msgid "What will this code print?"
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:81
msgid ""
"[code]var numbers = [0, 1, 2]\n"
"for number in numbers:\n"
"    print(number)\n"
"[/code]"
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:86
msgid ""
"Compared to previous examples, we store the array in the "
"[code]numbers[/code] variable. Using the [code]numbers[/code] variable in"
" our for loop allows the computer to access the array of numbers like "
"before.\n"
"\n"
"We have three numbers in the array: [code]0[/code], [code]1[/code], and "
"[code]2[/code].\n"
"\n"
"The loop extracts each of them sequentially and assigns it to the "
"[code]number[/code] temporary variable. As, inside the loop, we print the"
" number, the output will print [code]0[/code], then [code]1[/code], then "
"[code]2[/code], each on a separate line."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:91
#: course/lesson-20-looping-over-arrays/lesson.tres:92
msgid "0, 1, and 2"
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:91
msgid "1, 2, and 3"
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:91
msgid "0, 0, and 0"
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:99
msgid "Making the turtle walk, with a loop"
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:101
msgid ""
"In the previous lesson, you made a turtle walk along a path by writing "
"[code]Vector2[/code] coordinates in an array."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:121
msgid ""
"It's a [code]for[/code] loop that makes the turtle walk along the path.\n"
"\n"
"The loop works like this: for each coordinate in the array, it moves the "
"turtle once to that cell."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:143
msgid "It's the same principle with unit selection."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:163
msgid ""
"For each coordinate in an array named [code]selected_units[/code], we "
"check if there is a unit in that cell. If so, we select it. \n"
"\n"
"In that case, we use an array, a loop, and a condition together."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:185
msgid ""
"The code above uses several features you didn't learn yet:\n"
"\n"
"- In a condition, the [code]in[/code] keyword allows you to check if a "
"value exists [i]in[/i] an array.\n"
"- The array's [code]append()[/code] function appends a new value at the "
"end of the array.\n"
"\n"
"Notice the use of a period after the [code]selected_units[/code] "
"variable, to call the [code]append()[/code] function. It's because this "
"function exists only on arrays.\n"
"\n"
"When functions exist only on a specific value type, you write a dot after"
" the value to call the function on it.\n"
"\n"
"We'll revisit those two features again in the following lessons."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:204
msgid ""
"The beauty of loops is that they work regardless of the size of your "
"arrays. \n"
"\n"
"The code just works whether you have one or 10,000 units to select. And "
"that with only a couple lines of code.\n"
"\n"
"That's the power of computer programming.\n"
"\n"
"In the following practices, you will use arrays combined with "
"[code]for[/code] loops to achieve similar results."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:218
msgid "Move the robot along the path"
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:219
msgid ""
"Our AI pathfinding algorithm provided a path for the robot to move to the"
" right edge of the grid. Your task is to use a [code]for[/code] loop to "
"make the robot move.\n"
"\n"
"To move the robot, call [i]its[/i] [code]move_to()[/code] function, like "
"so: [code]robot.move_to()[/code].\n"
"\n"
"The [code]move_to()[/code] function only exists on the robot, which is "
"why you need to access it this way."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:233
msgid ""
"Our AI pathfinding algorithm is giving us a path to move the robot. Now, "
"you need to make the turtle move along the path."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:238
msgid "Back to the drawing board"
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:239
msgid ""
"We want to draw many rectangles, something surprisingly common in games.\n"
"\n"
"When writing the code by hand, it gets tedious. Instead, you'll often "
"store the size of your shapes in arrays and use a loop to draw them all "
"in batches.\n"
"\n"
"That's what you'll do in this practice.\n"
"\n"
"Use a [code]for[/code] loop to draw every rectangle in the "
"[code]rectangle_sizes[/code] array with the [code]draw_rectangle()[/code]"
" function.\n"
"\n"
"The rectangles shouldn't overlap or cross each other. To avoid that, "
"you'll need to call the [code]jump()[/code] function."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:257
msgid ""
"The drawing turtle makes its comeback. Fear not! Armed with loops, you'll"
" make it draw faster than ever before."
msgstr ""

#: course/lesson-20-looping-over-arrays/lesson.tres:261
msgid "Looping over arrays"
msgstr ""

