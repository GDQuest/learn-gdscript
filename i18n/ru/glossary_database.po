# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2025-06-14 15:02+0200\n"
"PO-Revision-Date: 2023-11-12 10:05+0000\n"
"Last-Translator: Kirill <esuba@mail.ru>\n"
"Language-Team: Russian <https://hosted.weblate.org/projects/learn-gdscript-"
"from-zero/glossary_database/ru/>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
"X-Generator: Weblate 5.2-dev\n"
"Generated-By: Babel 2.9.1\n"

#. Reference: member function
#: course/glossary.csv:6
msgid "member function"
msgstr "функция-член"

#. Reference: member function
#: course/glossary.csv:6
msgid "member functions"
msgstr "функции-члены"

#. Reference: member function
#: course/glossary.csv:6
msgid ""
"Member functions are functions attached to a specific value type, like "
"arrays, strings, or dictionaries. We also call them methods.\n"
"\n"
"For example, arrays have member functions like [code]array.append()[/code].\n"
"\n"
"You can only call the function on an array, using the access operator "
"([code].[/code]) to access it, as shown above."
msgstr ""
"Функции-члены — это функции, привязанные к определенному типу значений, "
"например массивам, строкам или словарям. Мы также называем их методами.\n"
"\n"
"Например, у массивов есть функция-член [code]array.append()[/code].\n"
"\n"
"Вы можете вызвать функцию только для массива, используя оператор доступа к "
"членам ([code].[/code]), как показано выше."

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variable"
msgstr "переменная-член"

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variables"
msgstr "переменные-члены"

#. Reference: member variable
#: course/glossary.csv:9
msgid ""
"Member variables are variables attached to a specific value type, like a "
"vector's [code]x[/code] and [code]y[/code] sub-variables. We also call them "
"[i]properties[/i] or [i]fields[/i] of the vector.\n"
"\n"
"To access a member variable, you must first write the value's name followed "
"by the access operator ([code].[/code]). For example, [code]position.x[/"
"code]."
msgstr ""
"Переменные-члены — это переменные, привязанные к определенному типу "
"значения, например, у вектора есть вложенные переменные [code]x[/code] и "
"[code]y[/code]. Мы также называем их [i]свойствами[/i] или [i]полями[/i] "
"вектора.\n"
"\n"
"Чтобы получить доступ к переменной-члену, вы должны записать имя значения, а "
"затем оператор доступа ([code].[/code]). Например, [code]position.x[/code]."

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameter"
msgstr "параметр"

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameters"
msgstr "параметры"

#. Reference: parameter
#: course/glossary.csv:12
msgid ""
"A parameter is a variable you create as part of a function definition.\n"
"\n"
"It allows you to reuse the function more by having values that vary in the "
"function's body."
msgstr ""
"Параметр — это переменная, которую вы создаете как часть определения "
"функции.\n"
"\n"
"Он позволяет вам повторно использовать функцию, подставляя в её тело "
"различные значения."

#. Reference: radian
#: course/glossary.csv:17
msgid "radian"
msgstr "радиан"

#. Reference: radian
#: course/glossary.csv:17
msgid "radians"
msgstr "радианы"

#. Reference: radian
#: course/glossary.csv:17
msgid ""
"A radian is a unit of measurement of angles based on the circle's "
"circumference.\n"
"\n"
"We tend to use degrees more in our daily lives, but in computer programming, "
"and especially in games, radians are common.\n"
"\n"
"An angle of [code]2 * PI[/code] radians corresponds to 360 degrees. And an "
"angle of [code]PI[/code] radians corresponds to 180 degrees."
msgstr ""
"Радиан — это единица измерения углов, основанная на длине окружности.\n"
"\n"
"В повседневной жизни мы чаще используем градусы, но в компьютерном "
"программировании, особенно в играх, обычно используются радианы.\n"
"\n"
"Угол [code]2 * PI[/code] радиан соответствует 360 градусам. А угол [code]PI[/"
"code] радиан соответствует 180 градусам."

#. Reference: type
#: course/glossary.csv:20
msgid "type"
msgstr "тип"

#. Reference: type
#: course/glossary.csv:20
msgid "types"
msgstr "типы"

#. Reference: type
#: course/glossary.csv:20
msgid ""
"In computer programming, a type is the class of a value. For example, whole "
"numbers like [code]3[/code], [code]11[/code], and [code]255462[/code] are "
"all of type [code]int[/code] (short for integer).\n"
"\n"
"The computer uses types to determine which operations are valid between two "
"values and when they're undefined."
msgstr ""
"В компьютерном программировании тип — это класс значения. Например, целые "
"числа [code]3[/code], [code]11[/code] и [code]255462[/code] — имеют тип "
"[code]int[/code] (сокращение от integer).\n"
"\n"
"Компьютер использует типы, чтобы определить, какие операции допустимы между "
"двумя значениями и когда значения не определены."

#. Reference: iteration
#: course/glossary.csv:23
msgid "iteration"
msgstr "итерация"

#. Reference: iteration
#: course/glossary.csv:23
msgid "iterations"
msgstr "итерации"

#. Reference: iteration
#: course/glossary.csv:23
msgid ""
"In computer code, an iteration is one repetition of some process or code. We "
"typically use the term with loops, where one iteration is one run of the "
"loop's code.\n"
"\n"
"When talking of algorithms, an iteration can mean a full pass of the "
"algorithm on a data set."
msgstr ""
"В компьютерном коде итерация — это одно повторение некоторого процесса или "
"кода. Обычно мы используем термин итерация с циклами, где одна итерация — "
"это один запуск кода цикла.\n"
"\n"
"Когда речь идет об алгоритмах, итерация может означать полный проход "
"алгоритма по набору данных."

#. Reference: vector
#: course/glossary.csv:28
msgid "vector"
msgstr "вектор"

#. Reference: vector
#: course/glossary.csv:28
msgid "vectors"
msgstr "векторы"

#. Reference: vector
#: course/glossary.csv:28
msgid ""
"In math, a vector is a list of numbers. In games, we often use 2D and 3D "
"vectors: respectively, lists of two and three numbers.\n"
"\n"
"We use that to represent a direction and magnitude or intensity in space. "
"For example, you can use a vector to represent the direction and speed at "
"which a character or a vehicle moves.\n"
"\n"
"Vectors can seem daunting at first because they are pretty abstract, but as "
"you will see, they'll simplify code tremendously."
msgstr ""
"В математике вектор — это набор чисел. В играх мы часто используем 2D и 3D "
"векторы: соответственно, наборы из двух и трех чисел.\n"
"\n"
"Мы используем векторы для представления направления и величины или "
"интенсивности в пространстве. Например, вы можете использовать вектор для "
"представления направления и скорости, с которой движется персонаж или "
"транспортное средство.\n"
"\n"
"Поначалу векторы могут показаться сложными, потому что они довольно "
"абстрактны, но в дальнейшем вы увидите, что они значительно упрощают код."

#. Reference: argument
#: course/glossary.csv:37
msgid "argument"
msgstr "аргумент"

#. Reference: argument
#: course/glossary.csv:37
msgid "arguments"
msgstr "аргументы"

#. Reference: argument
#: course/glossary.csv:37
msgid ""
"An argument is a value that you pass to a function when calling the "
"function. For example, in the call [code]rotate(0.5)[/code], the value "
"[code]0.5[/code] in the parentheses is an argument.\n"
"\n"
"A function can receive no arguments, one argument, or multiple arguments. "
"Arguments can be mandatory or optional.\n"
"\n"
"When a function takes multiple arguments, you separate the values with "
"commas, like in this function call: [code]jump(50, 100)[/code]\n"
"\n"
"When [i]calling[/i] a function, we name the values passed in parentheses "
"[i]arguments[/i].\n"
"\n"
"When writing a function definition, however, we talk about function "
"[i]parameters[/i]. In the following example, the names [code]x[/code] and "
"[code]y[/code] are [i]parameters[/i]."
msgstr ""
"Аргумент — это значение, которое вы передаете в функцию при её вызове. "
"Например, в вызове [code]rotate(0.5)[/code] значение [code]0.5[/code] в "
"круглых скобках является аргументом.\n"
"\n"
"Функция может не принимать никаких аргументов, принимать один аргумент или "
"несколько аргументов. Аргументы могут быть обязательными или "
"необязательными.\n"
"\n"
"Когда функция принимает несколько аргументов, вы разделяете значения "
"запятыми, как в этом примере: jump(50, 100)\n"
"\n"
"При [i]вызове[/i] функции мы называем значения, передаваемые в круглых "
"скобках, [i]аргументами[/i].\n"
"\n"
"Однако при написании определения функции мы говорим о [i]параметрах[/i] "
"функции. В следующем примере имена [code]x[/code] и [code]y[/code] являются "
"[i]параметрами[/i]."

#. Reference: array
#: course/glossary.csv:44
msgid "array"
msgstr "массив"

#. Reference: array
#: course/glossary.csv:44
msgid "arrays"
msgstr "массивы"

#. Reference: array
#: course/glossary.csv:44
msgid ""
"An array is a list of values. In GDScript, arrays can contain [i]any[/i] "
"types of value.\n"
"\n"
"To create an array, you write comma-separated values in square brackets: "
"[code]var three_numbers = [1, 2, 3][/code]\n"
"\n"
"In games, we use arrays all the time to store lists of characters in a "
"party, lists of items in inventory, lists of spells the player unlocked, and "
"so on. They're everywhere.\n"
"\n"
"Arrays are a fundamental value type in computer programming. You'll find "
"arrays in pretty much any programming language."
msgstr ""
"Массив — это набор значений. В GDScript массивы могут содержать [i]любые[/i] "
"типы значений.\n"
"\n"
"Чтобы создать массив, нужно записать значения через запятую в квадратные "
"скобки: [code]var three_numbers = [1, 2, 3][/code]\n"
"\n"
"В играх мы постоянно используем массивы для хранения списков персонажей в "
"группе, списка предметов в инвентаре, списков заклинаний, разблокированных "
"игроком, и так далее. Они повсюду.\n"
"\n"
"Массивы — это фундаментальный тип значений в компьютерном программировании. "
"Вы встретите массивы практически в любом языке программирования."

#. Reference: assign
#: course/glossary.csv:45
msgid "assign"
msgstr "присваивание"

#. Reference: assign
#: course/glossary.csv:45
msgid ""
"Assigning a value to a variable means that you store a value inside the "
"variable. You do this with the equal sign ([code]=[/code])."
msgstr ""
"Присваивание значения переменной означает, что вы сохраняете значение внутри "
"переменной. Чтобы выполнить эту операцию вы можете использовать знака "
"равенства ([code]=[/code])."

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionary"
msgstr "словарь"

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionaries"
msgstr "словари"

#. Reference: dictionary
#: course/glossary.csv:52
msgid ""
"A dictionary is a data structure that maps values with key-value pairs. When "
"you give the dictionary a key, it finds and gives you back the corresponding "
"value.\n"
"\n"
"In GDScript, keys can be many things. We often use text strings or numbers, "
"but you're not limited to that. A [code]Vector2[/code] can also be a valid "
"key, which is handy to map a grid cell to a unit or an item in a grid-based "
"game.\n"
"\n"
"You will often use dictionaries to associate bits of data in your games. For "
"example, we could use them to associate an equipment's name with its weapon "
"stats in a database.\n"
"\n"
"Like arrays, they are a fundamental data type that you will see in many "
"programming languages and use a lot."
msgstr ""
"Словарь — это структура данных, которая сопоставляет значения с помощью пар "
"ключ-значение. Когда вы даете словарю ключ, он находит и возвращает вам "
"соответствующее значение.\n"
"\n"
"В GDScript ключи могут быть разными. Мы часто используем текстовые строки "
"или цифры, но вы не ограничены только строками и цифрами. [code]Vector2[/"
"code], например, может быть допустимым ключом, который удобен для "
"сопоставления ячейки сетки с юнитом или элементом в игре (если сетка в игре "
"используется).\n"
"\n"
"Вы часто будете использовать словари для сопоставления фрагментов данных в "
"своих играх. Например, вы можете использовать словарь, чтобы связать "
"название снаряжения с его характеристиками в базе данных.\n"
"\n"
"Как и массивы, словари являются фундаментальным типом данных, который вы "
"встретите во многих языках программирования и будете часто использовать."

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loop"
msgstr "цикл for"

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loops"
msgstr "циклы for"

#. Reference: for loop
#: course/glossary.csv:59
msgid ""
"A for loop instructs the computer to repeat a set of instructions once for "
"each value in an array.\n"
"\n"
"In each loop iteration, the compiler extracts one value from the array and "
"gives you access to it in the loop's body.\n"
"\n"
"For loops run code a limited amount of times: one per value in the array. It "
"is different from while loops that keep repeating code until a condition is "
"met.\n"
"\n"
"We recommend favoring for loops when you can. They're safer and easier to "
"use than while loops."
msgstr ""
"Цикл for указывает компьютеру повторить набор инструкций один раз для "
"каждого значения в массиве.\n"
"\n"
"На каждой итерации цикла компилятор извлекает одно значение из массива и "
"предоставляет вам доступ к нему в теле цикла.\n"
"\n"
"Циклы for запускают код ограниченное количество раз: по одному на каждое "
"значение в массиве. Этим циклы for отличаются от циклов while, которые "
"продолжают повторять код до тех пор, пока не будет выполнено условие.\n"
"\n"
"Мы рекомендуем отдавать предпочтение циклам for всегда, когда это возможно. "
"Циклы for безопаснее и проще в использовании, чем циклы while."

#. Reference: function
#: course/glossary.csv:64
msgid "function"
msgstr "функция"

#. Reference: function
#: course/glossary.csv:64
msgid "functions"
msgstr "функции"

#. Reference: function
#: course/glossary.csv:64
msgid ""
"A function is a group of code instructions you give a name. When you define "
"a function, you can call it any time to run all the instructions it "
"contains.\n"
"\n"
"You can modify a function's behavior with parameters. Parameters are "
"variable names that you write in the function definition. You can then use "
"them in the function's body to make your code adapt to different cases.\n"
"\n"
"Also, functions can optionally return a value to the code calling it."
msgstr ""
"Функция — это группа инструкций кода, которой вы даете имя. Когда вы "
"определяете функцию, вы можете вызвать ее в любое время, чтобы выполнить все "
"содержащиеся в ней инструкции.\n"
"\n"
"Вы можете изменять поведение функции с помощью параметров. Параметры — это "
"имена переменных, которые вы пишете в определение функции. Вы можете "
"использовать их в теле функции, чтобы адаптировать код к различным случаям.\n"
"\n"
"Кроме того, при необходимости функции могут возвращать значение коду, "
"который их вызвал."

#. Reference: increment
#: course/glossary.csv:65
msgid "increment"
msgstr "инкремент"

#. Reference: increment
#: course/glossary.csv:65
msgid "increments"
msgstr "инкременты"

#. Reference: increment
#: course/glossary.csv:65
msgid "An increment is the amount by which a value changes in your code."
msgstr "Инкремент — это величина, на которую изменяется значение в вашем коде."

#. Reference: instruction
#: course/glossary.csv:68
msgid "instruction"
msgstr "инструкция"

#. Reference: instruction
#: course/glossary.csv:68
msgid "instructions"
msgstr "инструкции"

#. Reference: instruction
#: course/glossary.csv:68
msgid ""
"In computer programming, instructions are a single operation the computer "
"recognizes and can execute.\n"
"\n"
"For example, a function call, an addition, or assigning a value to a "
"variable."
msgstr ""
"В компьютерном программировании инструкции представляют собой одну операцию, "
"которую компьютер распознает и может выполнить.\n"
"\n"
"Например, вызов функции, добавление или присваивание значения переменной."

#. Reference: variable
#: course/glossary.csv:77
msgid "variable"
msgstr "переменная"

#. Reference: variable
#: course/glossary.csv:77
msgid "variables"
msgstr "переменные"

#. Reference: variable
#: course/glossary.csv:77
msgid ""
"Variables are a tool to give a name to values you want to store in your code "
"and change over time.\n"
"\n"
"For example, a character's health: when the character takes a hit, you want "
"it to go down. When healing, you want the health to go back up.\n"
"\n"
"You can create a variable named [code]health[/code] to represent the "
"health.\n"
"\n"
"Then, every time you write the keyword [code]health[/code] in your code, the "
"computer will fetch the corresponding value in its memory for you.\n"
"\n"
"Variables work a bit like product labels in a supermarket. They are names "
"that you attach to some value. Any time, you can take the label and stick it "
"onto a new product or, in that case, a new value."
msgstr ""
"Переменные — это инструмент для присваивания имен значениям, которые вы "
"хотите содержать в своем коде и изменять с течением времени.\n"
"\n"
"Например, подумайте о здоровье персонажа: когда персонаж получает удар, вы "
"хотите, чтобы здоровье снизилось. Когда вы лечитесь, вы хотите, чтобы "
"здоровье восстановилось.\n"
"\n"
"Вы можете создать переменную с именем [code]health[/code] для представления "
"состояния здоровья.\n"
"\n"
"Затем каждый раз, когда вы пишите ключевое слово [code]health[/code] в своем "
"коде, компьютер будет извлекать для вас соответствующее значение из своей "
"памяти.\n"
"\n"
"Переменные работают подобно этикеткам товаров в супермаркете. Это имена, "
"которыми вы помечаете какое-то значение. В любой момент вы можете взять "
"этикетку и наклеить ее на новый товар или, в данном случае, на новое "
"значение в коде."

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loop"
msgstr "цикл while"

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loops"
msgstr "циклы while"

#. Reference: while loop
#: course/glossary.csv:84
msgid ""
"A while loop instructs the computer to keep running code based on a "
"condition. While the condition is true, the loop keeps running.\n"
"\n"
"When coding while loops, you must be careful: they will keep running "
"infinitely and freeze your game if you get the condition wrong.\n"
"\n"
"That's why we recommend using the safer for loop whenever you can.\n"
"\n"
"However, there are still essential cases in which we use while loops, like "
"processing files, processing computer code, or for powerful algorithms."
msgstr ""
"Цикл while указывает компьютеру продолжать выполнение кода, основываясь на "
"условии. Пока условие истинно, цикл продолжает выполняться.\n"
"\n"
"При написании циклов while вы должны быть осторожны: они будут выполняться "
"бесконечно и приведут к бесконечному зависанию, если вы неправильно выберете "
"условие.\n"
"\n"
"Вот почему мы рекомендуем использовать более безопасный цикл for всегда, "
"когда это возможно.\n"
"\n"
"Однако все еще существуют особые случаи, когда мы используем циклы while, "
"например, при обработке файлов, обработке компьютерного кода или для мощных "
"алгоритмов."

#. Reference: body
#: course/glossary.csv:85
msgid "body"
msgstr "тело"

#. Reference: body
#: course/glossary.csv:85
msgid ""
"We talk about a loop or a function's body to refer to the lines of code that "
"are part of the loop or function."
msgstr ""
"Мы говорим о теле цикла или функции, чтобы сослаться на строки кода, которые "
"являются частью цикла или функции."

#. Reference: return
#: course/glossary.csv:88
msgid "return"
msgstr "возврат"

#. Reference: return
#: course/glossary.csv:88
msgid ""
"Returning a value is the process of sending a value to the place where you "
"call a function.\n"
"\n"
"It happens when a function uses the [code]return[/code] keyword followed by "
"a value, for example: [code]return -1[/code]."
msgstr ""
"Возврат значения — это процесс отправки значения в то место, откуда вы "
"вызвали функцию.\n"
"\n"
"Возврат происходит, когда функция использует ключевое слово [code]return[/"
"code], с указанным после него значением, например: [code]return -1[/code]."

#. Reference: library
#: course/glossary.csv:89
msgid "library"
msgstr "библиотека"

#. Reference: library
#: course/glossary.csv:89
msgid "libraries"
msgstr "библиотеки"

#. Reference: library
#: course/glossary.csv:89
msgid ""
"A collection of valuable and reusable code bundled together by other "
"programmers to save you time. All programmers use code libraries."
msgstr ""
"Библиотека — это коллекция ценного и многоразового кода, сложенного вместе "
"другими программистами, желающими сэкономить ваше время. Все программисты "
"используют библиотеки кода."

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprite"
msgstr "спрайт"

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprites"
msgstr "спрайты"

#. Reference: sprite
#: course/glossary.csv:90
msgid ""
"In computer graphics, a sprite is an image you display on the screen. We "
"generally use this word to talk about moving images, like a character, a "
"monster, or an item falling on the ground."
msgstr ""
"В компьютерной графике спрайт — это изображение, отображаемое на экране. "
"Обычно мы используем слово спрайт, когда говорим о движущихся изображениях, "
"таких как персонаж, монстр или предмет, падающий на землю."
