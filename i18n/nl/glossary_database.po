# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2025-06-14 15:02+0200\n"
"PO-Revision-Date: 2024-04-10 22:01+0000\n"
"Last-Translator: Matthijs <m4tthijsbl0m@gmail.com>\n"
"Language-Team: Dutch <https://hosted.weblate.org/projects/learn-gdscript-"
"from-zero/glossary_database/nl/>\n"
"Language: nl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 5.5-dev\n"
"Generated-By: Babel 2.9.1\n"

#. Reference: member function
#: course/glossary.csv:6
msgid "member function"
msgstr "lidfunctie"

#. Reference: member function
#: course/glossary.csv:6
msgid "member functions"
msgstr "lidfuncties"

#. Reference: member function
#: course/glossary.csv:6
msgid ""
"Member functions are functions attached to a specific value type, like "
"arrays, strings, or dictionaries. We also call them methods.\n"
"\n"
"For example, arrays have member functions like [code]array.append()[/code].\n"
"\n"
"You can only call the function on an array, using the access operator "
"([code].[/code]) to access it, as shown above."
msgstr ""
"Lidfuncties zijn functies die gekoppeld zijn aan een specifiek waardentype, "
"zoals arrays, strings of dictionaries. We noemen ze ook wel methoden.\n"
"\n"
"Arrays hebben bijvoorbeeld lidfuncties zoals [code]array.append()[/code].\n"
"\n"
"Je kunt de functie alleen aanroepen op een array, met behulp van de "
"toegangsoperator ([code].[/code]), zoals hierboven getoond."

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variable"
msgstr "lidvariabele"

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variables"
msgstr "lidvariabelen"

#. Reference: member variable
#: course/glossary.csv:9
msgid ""
"Member variables are variables attached to a specific value type, like a "
"vector's [code]x[/code] and [code]y[/code] sub-variables. We also call them "
"[i]properties[/i] or [i]fields[/i] of the vector.\n"
"\n"
"To access a member variable, you must first write the value's name followed "
"by the access operator ([code].[/code]). For example, [code]position.x[/"
"code]."
msgstr ""
"Lidvariabelen zijn variabelen die gekoppeld zijn aan een specifiek "
"waardentype, zoals de deelvariabelen [code]x[/code] en [code]y[/code] van "
"een vector. We noemen ze ook wel [i]eigenschappen[/i] of [i]velden[/i] van "
"de vector.\n"
"\n"
"Om een lidvariabele te gebruiken, moet je eerst de naam van de waarde "
"schrijven, gevolgd door de toegangsoperator ([code].[/code]). Bijvoorbeeld, "
"[code]position.x[/code]."

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameter"
msgstr "parameter"

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameters"
msgstr "parameters"

#. Reference: parameter
#: course/glossary.csv:12
msgid ""
"A parameter is a variable you create as part of a function definition.\n"
"\n"
"It allows you to reuse the function more by having values that vary in the "
"function's body."
msgstr ""
"Een parameter is een variabele die je maakt als onderdeel van een "
"functiedefinitie.\n"
"\n"
"Hiermee kun je de functie vaker hergebruiken met waarden die variëren binnen "
"de functie."

#. Reference: radian
#: course/glossary.csv:17
msgid "radian"
msgstr "radiaal"

#. Reference: radian
#: course/glossary.csv:17
msgid "radians"
msgstr "radialen"

#. Reference: radian
#: course/glossary.csv:17
msgid ""
"A radian is a unit of measurement of angles based on the circle's "
"circumference.\n"
"\n"
"We tend to use degrees more in our daily lives, but in computer programming, "
"and especially in games, radians are common.\n"
"\n"
"An angle of [code]2 * PI[/code] radians corresponds to 360 degrees. And an "
"angle of [code]PI[/code] radians corresponds to 180 degrees."
msgstr ""
"Een radiaal is een meeteenheid van hoeken gebaseerd op de omtrek van de "
"cirkel.\n"
"\n"
"In ons dagelijks leven gebruiken we meestal graden, maar in "
"computerprogrammering en vooral in games komen vaak radialen voor.\n"
"\n"
"Een hoek van [code]2 * PI[/code] radialen komt overeen met 360 graden. En "
"een hoek van [code]PI[/code] radialen komt overeen met 180 graden."

#. Reference: type
#: course/glossary.csv:20
msgid "type"
msgstr "type"

#. Reference: type
#: course/glossary.csv:20
msgid "types"
msgstr "types"

#. Reference: type
#: course/glossary.csv:20
msgid ""
"In computer programming, a type is the class of a value. For example, whole "
"numbers like [code]3[/code], [code]11[/code], and [code]255462[/code] are "
"all of type [code]int[/code] (short for integer).\n"
"\n"
"The computer uses types to determine which operations are valid between two "
"values and when they're undefined."
msgstr ""
"In computerprogrammering is een type de klasse van een waarde. Bijvoorbeeld, "
"gehele getallen zoals [code]3[/code], [code]11[/code], en [code]255462[/"
"code] zijn allemaal van het type [code]int[/code] (afkorting voor integer).\n"
"\n"
"De computer gebruikt types om te bepalen welke bewerkingen geldig zijn "
"tussen twee waarden en wanneer ze ongedefinieerd zijn."

#. Reference: iteration
#: course/glossary.csv:23
msgid "iteration"
msgstr "iteratie"

#. Reference: iteration
#: course/glossary.csv:23
msgid "iterations"
msgstr "iteraties"

#. Reference: iteration
#: course/glossary.csv:23
msgid ""
"In computer code, an iteration is one repetition of some process or code. We "
"typically use the term with loops, where one iteration is one run of the "
"loop's code.\n"
"\n"
"When talking of algorithms, an iteration can mean a full pass of the "
"algorithm on a data set."
msgstr ""
"In computercode is een iteratie een herhaling van een proces of code. We "
"gebruiken de term meestal met lussen, waar een iteratie een herhaling is van "
"de code in de lus.\n"
"\n"
"Wanneer we het over algoritmes hebben, kan een iteratie een volledige "
"doorloop van het algoritme op een verzameling gegevens betekenen."

#. Reference: vector
#: course/glossary.csv:28
msgid "vector"
msgstr "vector"

#. Reference: vector
#: course/glossary.csv:28
msgid "vectors"
msgstr "vectoren"

#. Reference: vector
#: course/glossary.csv:28
msgid ""
"In math, a vector is a list of numbers. In games, we often use 2D and 3D "
"vectors: respectively, lists of two and three numbers.\n"
"\n"
"We use that to represent a direction and magnitude or intensity in space. "
"For example, you can use a vector to represent the direction and speed at "
"which a character or a vehicle moves.\n"
"\n"
"Vectors can seem daunting at first because they are pretty abstract, but as "
"you will see, they'll simplify code tremendously."
msgstr ""
"In de wiskunde is een vector een lijst getallen. In spellen gebruiken we "
"vaak 2D- en 3D-vectoren: respectievelijk lijsten van twee en drie getallen.\n"
"\n"
"We gebruiken die om een richting en grootte of intensiteit in de ruimte weer "
"te geven. Je kunt een vector bijvoorbeeld gebruiken om de richting en "
"snelheid weer te geven waarmee een personage of een voertuig beweegt.\n"
"\n"
"Vectoren kunnen in het begin ontmoedigend lijken omdat ze vrij abstract "
"zijn, maar zoals je zult zien, vereenvoudigen ze code enorm."

#. Reference: argument
#: course/glossary.csv:37
msgid "argument"
msgstr "argument"

#. Reference: argument
#: course/glossary.csv:37
msgid "arguments"
msgstr "argumenten"

#. Reference: argument
#: course/glossary.csv:37
msgid ""
"An argument is a value that you pass to a function when calling the "
"function. For example, in the call [code]rotate(0.5)[/code], the value "
"[code]0.5[/code] in the parentheses is an argument.\n"
"\n"
"A function can receive no arguments, one argument, or multiple arguments. "
"Arguments can be mandatory or optional.\n"
"\n"
"When a function takes multiple arguments, you separate the values with "
"commas, like in this function call: [code]jump(50, 100)[/code]\n"
"\n"
"When [i]calling[/i] a function, we name the values passed in parentheses "
"[i]arguments[/i].\n"
"\n"
"When writing a function definition, however, we talk about function "
"[i]parameters[/i]. In the following example, the names [code]x[/code] and "
"[code]y[/code] are [i]parameters[/i]."
msgstr ""
"Een argument is een waarde die je aan een functie meegeeft wanneer je de "
"functie aanroept. Bijvoorbeeld, in de aanroep [code]rotate(0.5)[/code] is de "
"waarde [code]0.5[/code] tussen de haakjes een argument.\n"
"\n"
"Een functie kan geen argumenten, één argument of meerdere argumenten "
"ontvangen. Argumenten kunnen verplicht of optioneel zijn.\n"
"\n"
"Als een functie meerdere argumenten krijgt, scheid je de waarden met "
"komma's, zoals in deze functieaanroep: [code]jump(50, 100)[/code]\n"
"\n"
"Wanneer je een functie [i]aanroept[/i], noemen we de waarden tussen haakjes "
"[i]argumenten[/i].\n"
"\n"
"Wanneer we echter een functiedefinitie schrijven, spreken we van "
"[i]parameters[/i]. In het volgende voorbeeld zijn de namen [code]x[/code] en "
"[code]y[/code] [i]parameters[/i]."

#. Reference: array
#: course/glossary.csv:44
msgid "array"
msgstr "array"

#. Reference: array
#: course/glossary.csv:44
msgid "arrays"
msgstr "arrays"

#. Reference: array
#: course/glossary.csv:44
msgid ""
"An array is a list of values. In GDScript, arrays can contain [i]any[/i] "
"types of value.\n"
"\n"
"To create an array, you write comma-separated values in square brackets: "
"[code]var three_numbers = [1, 2, 3][/code]\n"
"\n"
"In games, we use arrays all the time to store lists of characters in a "
"party, lists of items in inventory, lists of spells the player unlocked, and "
"so on. They're everywhere.\n"
"\n"
"Arrays are a fundamental value type in computer programming. You'll find "
"arrays in pretty much any programming language."
msgstr ""
"Een array is een lijst van waarden. In GDScript kunnen arrays [i]elk[/i] "
"type waarde bevatten.\n"
"\n"
"Om een array te maken, schrijf je door komma's gescheiden waarden tussen "
"vierkante haken: [code]var three_numbers = [1, 2, 3][/code]\n"
"\n"
"In games gebruiken we vaak arrays om lijsten van personages in een groep op "
"te slaan, lijsten van voorwerpen in de inventaris, lijsten van spreuken die "
"de speler heeft vrijgespeeld, enzovoort. Ze zijn overal.\n"
"\n"
"Arrays zijn een fundamenteel waardentype in computerprogrammering. Je vindt "
"arrays in vrijwel elke programmeertaal."

#. Reference: assign
#: course/glossary.csv:45
msgid "assign"
msgstr "toewijzen"

#. Reference: assign
#: course/glossary.csv:45
msgid ""
"Assigning a value to a variable means that you store a value inside the "
"variable. You do this with the equal sign ([code]=[/code])."
msgstr ""
"Een waarde toewijzen aan een variabele betekent dat je een waarde opslaat in "
"de variabele. Je doet dit met het gelijkheidsteken ([code]=[/code])."

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionary"
msgstr "dictionary"

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionaries"
msgstr "dictionaries"

#. Reference: dictionary
#: course/glossary.csv:52
msgid ""
"A dictionary is a data structure that maps values with key-value pairs. When "
"you give the dictionary a key, it finds and gives you back the corresponding "
"value.\n"
"\n"
"In GDScript, keys can be many things. We often use text strings or numbers, "
"but you're not limited to that. A [code]Vector2[/code] can also be a valid "
"key, which is handy to map a grid cell to a unit or an item in a grid-based "
"game.\n"
"\n"
"You will often use dictionaries to associate bits of data in your games. For "
"example, we could use them to associate an equipment's name with its weapon "
"stats in a database.\n"
"\n"
"Like arrays, they are a fundamental data type that you will see in many "
"programming languages and use a lot."
msgstr ""
"Een dictionary is een datastructuur die waarden opslaat als sleutel-waarde "
"paren. Wanneer je de dictionary een sleutel geeft, vindt hij de "
"overeenkomstige waarde en geeft die terug.\n"
"\n"
"In GDScript kunnen sleutels van alles zijn. We gebruiken vaak tekststrings "
"of getallen, maar daar ben je niet toe beperkt. Een [code]Vector2[/code] kan "
"ook een geldige sleutel zijn, wat handig is om een rastercel te koppelen aan "
"een spelstuk of een voorwerp in een rastergebaseerd spel.\n"
"\n"
"Je zult vaak dictionaries gebruiken om stukjes data te koppelen in je "
"spellen. We kunnen ze bijvoorbeeld gebruiken om de naam van een uitrusting "
"te koppelen aan de wapenstatistieken in een database.\n"
"\n"
"Net als arrays zijn ze een fundamenteel datatype dat je in veel "
"programmeertalen zult tegenkomen en veel zult gebruiken."

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loop"
msgstr "for-lus"

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loops"
msgstr "for-lussen"

#. Reference: for loop
#: course/glossary.csv:59
msgid ""
"A for loop instructs the computer to repeat a set of instructions once for "
"each value in an array.\n"
"\n"
"In each loop iteration, the compiler extracts one value from the array and "
"gives you access to it in the loop's body.\n"
"\n"
"For loops run code a limited amount of times: one per value in the array. It "
"is different from while loops that keep repeating code until a condition is "
"met.\n"
"\n"
"We recommend favoring for loops when you can. They're safer and easier to "
"use than while loops."
msgstr ""
"Een for-lus geeft de computer de opdracht om een reeks instructies één keer "
"te herhalen voor elke waarde in een array.\n"
"\n"
"Tijdens elke ronde van de lus haalt de compiler een waarde uit de array en "
"geeft je er toegang toe binnen de lus.\n"
"\n"
"For-lussen voeren code een beperkt aantal keer uit: één keer per waarde in "
"de array. Dit verschilt van while-lussen die code blijven herhalen tot aan "
"een conditie wordt voldaan.\n"
"\n"
"We raden aan om waar mogelijk de voorkeur te geven aan for-lussen. Ze zijn "
"veiliger en gemakkelijker te gebruiken dan while-lussen."

#. Reference: function
#: course/glossary.csv:64
msgid "function"
msgstr "functie"

#. Reference: function
#: course/glossary.csv:64
msgid "functions"
msgstr "functies"

#. Reference: function
#: course/glossary.csv:64
msgid ""
"A function is a group of code instructions you give a name. When you define "
"a function, you can call it any time to run all the instructions it "
"contains.\n"
"\n"
"You can modify a function's behavior with parameters. Parameters are "
"variable names that you write in the function definition. You can then use "
"them in the function's body to make your code adapt to different cases.\n"
"\n"
"Also, functions can optionally return a value to the code calling it."
msgstr ""
"Een functie is een groep code-instructies die je een naam geeft. Wanneer je "
"een functie definieert, kun je deze daarna op elk moment aanroepen om alle "
"instructies die erin staan uit te voeren.\n"
"\n"
"Je kunt het gedrag van een functie aanpassen met parameters. Parameters zijn "
"namen van variabelen die je in de functiedefinitie zet. Je kunt ze dan "
"gebruiken binnen de functie om je code aan te passen aan verschillende "
"situaties.\n"
"\n"
"Functies kunnen ook optioneel een waarde teruggeven aan de code die de "
"functie aanroept."

#. Reference: increment
#: course/glossary.csv:65
msgid "increment"
msgstr "verhoging"

#. Reference: increment
#: course/glossary.csv:65
msgid "increments"
msgstr "verhogingen"

#. Reference: increment
#: course/glossary.csv:65
msgid "An increment is the amount by which a value changes in your code."
msgstr ""
"Een verhoging is de hoeveelheid waarmee een waarde verandert in je code."

#. Reference: instruction
#: course/glossary.csv:68
msgid "instruction"
msgstr "instructie"

#. Reference: instruction
#: course/glossary.csv:68
msgid "instructions"
msgstr "instructies"

#. Reference: instruction
#: course/glossary.csv:68
msgid ""
"In computer programming, instructions are a single operation the computer "
"recognizes and can execute.\n"
"\n"
"For example, a function call, an addition, or assigning a value to a "
"variable."
msgstr ""
"In computerprogrammering zijn instructies een enkele bewerking die de "
"computer herkent en kan uitvoeren.\n"
"\n"
"Bijvoorbeeld een functieaanroep, een optelling of het toewijzen van een "
"waarde aan een variabele."

#. Reference: variable
#: course/glossary.csv:77
msgid "variable"
msgstr "variabele"

#. Reference: variable
#: course/glossary.csv:77
msgid "variables"
msgstr "variabelen"

#. Reference: variable
#: course/glossary.csv:77
msgid ""
"Variables are a tool to give a name to values you want to store in your code "
"and change over time.\n"
"\n"
"For example, a character's health: when the character takes a hit, you want "
"it to go down. When healing, you want the health to go back up.\n"
"\n"
"You can create a variable named [code]health[/code] to represent the "
"health.\n"
"\n"
"Then, every time you write the keyword [code]health[/code] in your code, the "
"computer will fetch the corresponding value in its memory for you.\n"
"\n"
"Variables work a bit like product labels in a supermarket. They are names "
"that you attach to some value. Any time, you can take the label and stick it "
"onto a new product or, in that case, a new value."
msgstr ""
"Variabelen zijn een hulpmiddel waarmee je een naam kunt geven aan waarden "
"die je wilt opslaan in je code en die in de loop van de tijd wilt kunnen "
"veranderen.\n"
"\n"
"Bijvoorbeeld de gezondheid van een personage: als het personage een geraakt "
"wordt, wil je dat de gezondheid afneemt. Als het personage geneest, wil je "
"dat de gezondheid weer toeneemt.\n"
"\n"
"Je kunt een variabele maken met de naam [code]health[/code] om de gezondheid "
"weer te geven.\n"
"\n"
"Vervolgens, elke keer dat je het woord [code]health[/code] in je code "
"schrijft, zal de computer de corresponderende waarde voor je ophalen uit het "
"geheugen.\n"
"\n"
"Variabelen werken een beetje zoals productlabels in een supermarkt. Het zijn "
"namen die je aan een waarde koppelt. Op elk moment kun je het label "
"verwijderen en het op een nieuw product plakken ofwel, in dit geval, een "
"nieuwe waarde."

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loop"
msgstr "while-lus"

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loops"
msgstr "while-lussen"

#. Reference: while loop
#: course/glossary.csv:84
msgid ""
"A while loop instructs the computer to keep running code based on a "
"condition. While the condition is true, the loop keeps running.\n"
"\n"
"When coding while loops, you must be careful: they will keep running "
"infinitely and freeze your game if you get the condition wrong.\n"
"\n"
"That's why we recommend using the safer for loop whenever you can.\n"
"\n"
"However, there are still essential cases in which we use while loops, like "
"processing files, processing computer code, or for powerful algorithms."
msgstr ""
"Een while-lus geeft de computer de opdracht om code te blijven uitvoeren op "
"basis van een conditie. Zolang de conditie waar is, blijft de lus lopen.\n"
"\n"
"Bij het coderen van while-lussen moet je voorzichtig zijn: ze blijven "
"oneindig doorlopen en bevriezen je spel als je de verkeerde conditie "
"gebruikt.\n"
"\n"
"Daarom raden we aan om waar mogelijk de veiligere for-lus te gebruiken.\n"
"\n"
"Er zijn echter nog steeds essentiële gevallen waarin we while-lussen "
"gebruiken, zoals het verwerken van bestanden, het verwerken van computercode "
"of voor krachtige algoritmen."

#. Reference: body
#: course/glossary.csv:85
msgid "body"
msgstr "inhoud"

#. Reference: body
#: course/glossary.csv:85
msgid ""
"We talk about a loop or a function's body to refer to the lines of code that "
"are part of the loop or function."
msgstr ""
"We spreken van de inhoud van een lus of functie om te verwijzen naar de "
"regels code die deel uitmaken van de lus of functie."

#. Reference: return
#: course/glossary.csv:88
msgid "return"
msgstr "teruggeven"

#. Reference: return
#: course/glossary.csv:88
msgid ""
"Returning a value is the process of sending a value to the place where you "
"call a function.\n"
"\n"
"It happens when a function uses the [code]return[/code] keyword followed by "
"a value, for example: [code]return -1[/code]."
msgstr ""
"Een waarde teruggeven is het proces waarin een waarde wordt verzonden naar "
"de plaats waar je een functie aanroept.\n"
"\n"
"Dit gebeurt wanneer een functie het sleutelwoord [code]return[/code] "
"gebruikt gevolgd door een waarde, bijvoorbeeld: [code]return -1[/code]."

#. Reference: library
#: course/glossary.csv:89
msgid "library"
msgstr "bibliotheek"

#. Reference: library
#: course/glossary.csv:89
msgid "libraries"
msgstr "bibliotheken"

#. Reference: library
#: course/glossary.csv:89
msgid ""
"A collection of valuable and reusable code bundled together by other "
"programmers to save you time. All programmers use code libraries."
msgstr ""
"Een verzameling waardevolle en herbruikbare code gebundeld door andere "
"programmeurs om je tijd te besparen. Alle programmeurs gebruiken "
"codebibliotheken."

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprite"
msgstr "sprite"

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprites"
msgstr "sprites"

#. Reference: sprite
#: course/glossary.csv:90
msgid ""
"In computer graphics, a sprite is an image you display on the screen. We "
"generally use this word to talk about moving images, like a character, a "
"monster, or an item falling on the ground."
msgstr ""
"In computerafbeeldingen is een sprite een afbeelding die je op het scherm "
"weergeeft. We gebruiken dit woord meestal om te praten over bewegende "
"beelden, zoals een personage, een monster of een voorwerp dat op de grond "
"valt."
