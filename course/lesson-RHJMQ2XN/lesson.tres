[gd_resource type="Resource" load_steps=26 format=2]

[ext_resource path="res://resources/Lesson.gd" type="Script" id=1]
[ext_resource path="res://resources/ContentBlock.gd" type="Script" id=2]

[sub_resource type="Resource" id=1]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-wQMqAYVj.tres"
title = ""
type = 0
text = "By default, GDScript is what we call a dynamically-typed language. That means that you can just write variables, assign them a value with a number, and assign them another value with a different type.

Unlike in some other languages, in GDScript, the following code is valid."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=2]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-otxF5HUx.tres"
title = ""
type = 0
text = "func run():
    var health = 100
    health = \"Some text\"
    print(health)"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=3]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-ZPxY8VUD.tres"
title = ""
type = 0
text = "But this feature often causes problems down the line. Let's take one example."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=4]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-pPwQDwfy.tres"
title = "Cell size: decimal number, or 2D vector?"
type = 0
text = "Games use grids all the time, be it for grid-based gameplay or to make algorithms faster.

When working with grids, you need to convert grid coordinates into positions in the game world all the time. To do so, you give each cell a size in pixels.

You'll likely pick one of two types for that: [code]float[/code] or [code]Vector2[/code].

Either of those two values would be fine:"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=5]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-qdYOexRj.tres"
title = ""
type = 0
text = "var cell_size = 50.0
var cell_size = Vector2(50.0, 50.0)"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=6]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-TRhZN4rS.tres"
title = ""
type = 0
text = "Using a [code]Vector2[/code] could simplify some calculations. For example, when converting grid coordinates to game world coordinates."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=7]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-5AJTESv5.tres"
title = ""
type = 0
text = "var cell_size = Vector2(50.0, 50.0)

func grid_to_world(cell):
    return cell [i] cell[/i]size + cell_size / 2"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=8]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-tT6n1Txl.tres"
title = ""
type = 0
text = "In this example, because both [code]cell[/code] and [code]cell_size[/code] are [code]Vector2[/code] values, we can add them.

However, if [code]cell_size[/code] is a [code]float[/code], we will get a type error."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=9]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-TtcyhcIb.tres"
title = ""
type = 0
text = "var cell_size = 50.0

func grid_to_world(cell):
    return cell [i] cell[/i]size + cell_size / 2
    
func run():
    grid_to_world(Vector2(1.0, 1.0))"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=10]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-5BnVHARb.tres"
title = ""
type = 0
text = "Invalid operands 'Vector2' and 'float' in operator '+'."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=11]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-BWNbDGt6.tres"
title = ""
type = 0
text = "Worse: due to dynamic typing, we won't get an error [i]right away[/i]. We will only get the error when calling [code]grid_to_world(Vector2(1.0, 1.0))[/code].

And that's a big problem."
visual_element_path = ""
reverse_blocks = false
has_separator = true

[sub_resource type="Resource" id=12]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-fUqbTxYe.tres"
title = ""
type = 0
text = "Because we're learning, we only have small code examples in this course. But your games' code will get long and split into many files. When coding, you often forget about the code you wrote several weeks ago.

And with a lot of code, it could take [i]hours[/i] of play before players trigger a type error in your code."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=13]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-j47MqE82.tres"
title = "Using type hints"
type = 0
text = "Fortunately, since recent versions, GDScript got optional [i]type hints[/i].

Type hints let the computer know the value type you want for variables and report errors before running the code.

To specify the type a variable can accept, you can write a colon and a type after the name when defining a new variable."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=14]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-V6jGvGm2.tres"
title = ""
type = 0
text = "TODO: EXAMPLE TYPE HINT SYNTAX"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=15]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-ixQOPRw9.tres"
title = ""
type = 0
text = "You could tell the computer you want [code]cell_size[/code] only to accept [code]Vector2[/code] values like so."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=16]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-2rtQEn91.tres"
title = ""
type = 0
text = "var cell_size: Vector2 = Vector2(50.0, 50.0)"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=17]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-c9llf8B6.tres"
title = ""
type = 0
text = "If you try to replace the [code]cell_size[/code] with a value of another type later, the computer will not let you."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=18]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-7UJ8TLtZ.tres"
title = ""
type = 0
text = "cell_size = 50.0"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=19]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-clsFcSrG.tres"
title = ""
type = 0
text = "Parser Error: The assigned value's type (float) doesn't match the variable's type (Vector2)."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=20]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-QgrVcyZF.tres"
title = "Letting the computer figure it out"
type = 0
text = "GDScript comes with a feature called type inference. In many cases, but not all, the computer can figure out the type of a variable for you.

To do so, you write [code]:=[/code], without the type. The computer will set the type using the value after the equal sign. We could make [code]cell_size[/code] a variable of type [code]Vector2[/code] like so:"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=21]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-xD9O3s7C.tres"
title = ""
type = 0
text = "var cell_size := Vector2(50.0, 50.0)"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=22]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-AcYuvjbG.tres"
title = ""
type = 0
text = "This takes little typing, yet you get the benefits of using type hints, like the computer reporting errors better and faster."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=23]
script = ExtResource( 2 )
content_id = "res://course/lesson-RHJMQ2XN/content-hMYCe6KH.tres"
title = "Why bother to add hints?"
type = 0
text = "When you give the language hints like that, it will [i]prevent[/i] major type errors. When you work in Godot, you will see that the computer can report issues as you write the code. It makes the benefit even greater.

Type hints can also help improve the readability of your code. It can help to put more information directly in the code. As we saw, types are essential when coding, and when using type hints, the computer will add them to the engine's built-in code documentation system.

There's an incredible third benefit for you: by using type hints, you will learn types much faster. It's excellent for learning.

In the following practices, you will write the correct type hints to make the code error-free."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[resource]
script = ExtResource( 1 )
title = "Specifying types with type hints"
content_blocks = [ SubResource( 1 ), SubResource( 2 ), SubResource( 3 ), SubResource( 4 ), SubResource( 5 ), SubResource( 6 ), SubResource( 7 ), SubResource( 8 ), SubResource( 9 ), SubResource( 10 ), SubResource( 11 ), SubResource( 12 ), SubResource( 13 ), SubResource( 14 ), SubResource( 15 ), SubResource( 16 ), SubResource( 17 ), SubResource( 18 ), SubResource( 19 ), SubResource( 20 ), SubResource( 21 ), SubResource( 22 ), SubResource( 23 ) ]
practices = [  ]
