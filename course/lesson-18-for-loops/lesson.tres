[gd_resource type="Resource" load_steps=29 format=2]

[ext_resource path="res://resources/Lesson.gd" type="Script" id=1]
[ext_resource path="res://resources/QuizChoice.gd" type="Script" id=2]
[ext_resource path="res://resources/ContentBlock.gd" type="Script" id=3]
[ext_resource path="res://course/Documentation.tres" type="Resource" id=4]
[ext_resource path="res://resources/Practice.gd" type="Script" id=5]

[sub_resource type="Resource" id=1]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-zKUdOCQi.tres"
title = ""
type = 0
text = "In the last lesson, we looked at [code]while[/code] loops. We found they were useful if we don't know how many times we should repeat code. 

However, they could result in infinite loops if we're not careful.

The loop below never ends because we never increment [code]number[/code]."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=2]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-GjB7tKRH.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/CodeWhileLoop.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=3]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-JMQ2XNwQ.tres"
title = ""
type = 0
text = "There's a safer and often easier kind of loop: the [code]for[/code] loop.

We'll look at it in this lesson.

Unlike [code]while[/code] loops, [code]for[/code] loops don't run infinitely, so it's much less likely that you'll get bugs in your game. [b]We recommend favoring for loops over while loops because of this[/b].

Let's change the code above to use a [code]for[/code] loop instead.

The loop below will change the [code]cell[/code] three times."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=4]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-MqAYVjot.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/CodeForLoop.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=15]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-kGx0c7DD.tres"
title = ""
type = 0
text = "Let's explain what's going on here."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=5]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-xF5HUxZP.tres"
title = "The range() function"
type = 0
text = "Godot has the helper function [code]range()[/code]. Calling [code]range(n)[/code] creates a list of numbers from [code]0[/code] to [code]n - 1[/code]. 

So calling [code]range(3)[/code] outputs the list of numbers [code][0, 1, 2][/code], and [code]range(5)[/code] outputs [code][0, 1, 2, 3, 4][/code]."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=6]
script = ExtResource( 2 )
quiz_id = "res://course/lesson-18-for-loops/quiz-xY8VUDpP.tres"
question = "What list of numbers would range(6) create?"
content_bbcode = "What would [code]print(range(6))[/code] print to the console?"
hint = ""
explanation_bbcode = "The function [code]range(n)[/code] creates a list of numbers from [code]0[/code] to [code]n - 1[/code]. The output list will start with [code]0[/code] and end with [code]5[/code].

So calling [code]range(6)[/code] will output a list of six numbers which are [code][0, 1, 2, 3, 4, 5][/code].
"
answer_options = [ "[0, 1, 2, 3, 4, 5]", "[1, 2, 3, 4, 5, 6]", "[0, 1, 2, 3, 4, 5, 6]" ]
valid_answers = [ "[0, 1, 2, 3, 4, 5]" ]
is_multiple_choice = false
do_shuffle_answers = true

[sub_resource type="Resource" id=7]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-wQDwfyqd.tres"
title = "How for loops work"
type = 0
text = "In a [code]for[/code] loop, the computer takes each value inside a list, stores it in a temporary variable, and executes the code in the loop once per value."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=8]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-YOexRjTR.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/PrintForLoop.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=9]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-hZN4rS5A.tres"
title = ""
type = 0
text = "In the above example, for each item in the list [code][0, 1, 2][/code], Godot sets [code]number[/code] to the item, then executes the code in the [code]for[/code] loop.

We'll explain arrays more throughly in the next lesson, but notice that [code]number[/code] is just a temporary variable. You create it when defining the loop, and the loop takes care of changing its value. Also, you can name this variable anything you want.

This code behaves the same as the previous example:"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=21]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-UdOCQiGj.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/PrintForLoopArray.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=20]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-0c7DDizK.tres"
title = ""
type = 0
text = "In both examples, we print the value of the temporary variable we created: [code]number[/code] in the first example and [code]element[/code] in the second.

As Godot moves through the loop, it assigns each value of the array to that variable. First, it sets the variable to [code]0[/code], then to [code]1[/code], and finally, to [code]2[/code].

We can break down the instructions the loop runs. You can see how a loop is a shortcut to code that otherwise gets very long."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=22]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-Q2XNwQMq.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/PrintForLoopArrayUnwrapped.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=23]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-B7tKRHJM.tres"
title = ""
type = 0
text = "We can put whatever code we like in the loop's code block, including other function calls like [code]draw_rectangle()[/code]."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=16]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-izKUdOCQ.tres"
title = "Using a for loop instead of a while loop"
type = 0
text = "Here's our old [code]move_to_end()[/code] function which used a [code]while[/code] loop."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=10]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-JTESv5tT.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/CodeWhileMove.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=11]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-nVHARbBW.tres"
title = ""
type = 0
text = "If we use a [code]for[/code] loop instead, the code becomes a little simpler."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=12]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-NbDGt6fU.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/CodeForMove.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=19]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-Gx0c7DDi.tres"
title = ""
type = 0
text = "Rather than constantly checking if the robot reached the end of the board, with the [code]for[/code] loop, we take the board's width beforehand, then move the robot a set amount of times.

The function still works the same. You can execute it below."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=13]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-qbTxYej4.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/ExampleBoardFor.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=14]
script = ExtResource( 3 )
content_id = "res://course/lesson-18-for-loops/content-7MqE82V6.tres"
title = ""
type = 0
text = "In the practices, we'll use [code]for[/code] loops in different ways to get you used to using them."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=17]
script = ExtResource( 5 )
practice_id = "res://course/lesson-18-for-loops/practice-7tKRHJMQ.tres"
title = "Using a for loop to move to the end of the board"
goal = "Once again, the robot has decided to stand at the top of the board.

This time, use a [code]for[/code] loop in the [code]move_to_bottom()[/code] function to have it move to the bottom of the board.

The board size is determined by the [code]Vector2[/code] variable [code]board_size[/code].

The robot's starting cell is [code]Vector2(2, 0)[/code]."
starting_code = "func move_to_bottom():
	"
cursor_line = 0
cursor_column = 0
hints = PoolStringArray( "You\'ll have to alter the [code]y[/code] sub-variable of [code]cell[/code] to move the robot downwards", "Call [code]range(n)[/code] to get a list of numbers from [code]0[/code] to [code]n - 1[/code]", "Use [code]for number in range(board_size.y - 1):[/code] to loop enough times." )
validator_script_path = "for_move/TestPracticeBoardFor.gd"
script_slice_path = "for_move/PracticeBoardFor.live-editor/slices/PracticeBoardFor.move_to_end.slice.tres"
documentation_references = PoolStringArray( "board_size", "cell", "range" )
documentation_resource = ExtResource( 4 )
description = "Use a for loop to have our robot move from the top of the board to the bottom."

[sub_resource type="Resource" id=18]
script = ExtResource( 5 )
practice_id = "res://course/lesson-18-for-loops/practice-UDpPwQDw.tres"
title = "Improving code with a for loop"
goal = "Use a [code]for[/code] loop to remove the duplicate code in the [code]run()[/code] function.

In this practice, we revisit the turtle and drawing rectangles.

With our new knowledge of [code]for[/code] loops, we can condense this code to take up less space and make it easier to modify.

The turtle should draw three squares in a horizontal line. The squares should be 100 pixels apart."
starting_code = "func run():
	jump(200, 0)
	draw_rectangle(100, 100)
	
	jump(200, 0)
	draw_rectangle(100, 100)

	jump(200, 0)
	draw_rectangle(100, 100)"
cursor_line = 0
cursor_column = 0
hints = PoolStringArray( "Use the line [code]for number in range(3):[/code]" )
validator_script_path = "for_rectangles/ForTestsDrawingRectangles.gd"
script_slice_path = "for_rectangles/ForDrawingMultipleRectangles.live-editor/slices/ForDrawingMultipleRectangles.run.slice.tres"
documentation_references = PoolStringArray( "jump", "draw_rectangle", "range" )
documentation_resource = ExtResource( 4 )
description = "In the past we had to copy and paste code to draw multiple rectangles. Let's revisit previous code and improve it with a for loop."

[resource]
script = ExtResource( 1 )
title = "Introduction to For Loops"
content_blocks = [ SubResource( 1 ), SubResource( 2 ), SubResource( 3 ), SubResource( 4 ), SubResource( 15 ), SubResource( 5 ), SubResource( 6 ), SubResource( 7 ), SubResource( 8 ), SubResource( 9 ), SubResource( 21 ), SubResource( 20 ), SubResource( 22 ), SubResource( 23 ), SubResource( 16 ), SubResource( 10 ), SubResource( 11 ), SubResource( 12 ), SubResource( 19 ), SubResource( 13 ), SubResource( 14 ) ]
practices = [ SubResource( 17 ), SubResource( 18 ) ]
