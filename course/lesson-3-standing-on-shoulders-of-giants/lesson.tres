[gd_resource type="Resource" load_steps=24 format=2]

[ext_resource path="res://resources/Lesson.gd" type="Script" id=1]
[ext_resource path="res://course/Documentation.tres" type="Resource" id=2]
[ext_resource path="res://resources/Practice.gd" type="Script" id=3]
[ext_resource path="res://resources/QuizChoice.gd" type="Script" id=4]
[ext_resource path="res://resources/ContentBlock.gd" type="Script" id=5]

[sub_resource type="Resource" id=1]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-Q2XNwQMq.tres"
title = ""
type = 0
text = "As programmers, we rely on a lot of code created by others before us.

Every programming language comes with a wealth of features created by other programmers to save you time.

We call a bundle of code created by fellow developers a [i]library[/i].

It's a bunch of code sitting there, waiting for you to use it.

Game engines like Godot bundle many libraries together. They provide a massive toolset to save you time when making games."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=2]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-AYVjotxF.tres"
title = "You'll always use a lot of existing code"
type = 0
text = "When coding, you always use a lot of code from developers who came before you.

In a moment, you'll write your first code. You'll use [i]functions[/i] created by the Godot developers.

A function is a list of instructions with an exact name. We can tell the computer to execute all the instructions in sequence with that name."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=3]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-Gx0c7DDi.tres"
title = "Calling functions"
type = 0
text = "When you tell the computer to execute a function, we say you [i]call[/i] the function.

To call a function, you write its [i]exact[/i] name followed by an open and closed parenthesis. To call the function named \"show\", you would write [code]show()[/code]."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=5]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-8VUDpPwQ.tres"
title = ""
type = 0
text = "In Godot, calling [code]show()[/code] makes something visible, like a character or item. The complementary [code]hide()[/code] function hides the entity.

Once an entity is visible, calling [code]show()[/code] again doesn't have any effect.

Similarly, once you hide something, calling [code]hide()[/code] again doesn't change anything.

[i]Click the Run button on any example below to execute the code listing.[/i]"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=6]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-izKUdOCQ.tres"
title = ""
type = 0
text = ""
visual_element_path = "ExampleShow.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=19]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-Q2XNwQMq.tres"
title = ""
type = 0
text = "In the code listing above, we write the function call [code]hide()[/code] in a new function named [code]run()[/code] to execute the code. Creating a new function is necessary to execute instructions in GDScript."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=18]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-x0c7DDiz.tres"
title = "Can you tell me more about that \"run()\" function?"
type = 1
text = "In GDScript, unlike in some other languages, we must write our code inside of custom functions.

You'll learn what functions are and how they work in great detail in the course, but here's a quick look at them if you're curious.

A function is a bundle of code you can execute anytime. It's a named list of instructions.

To define a function, you need to write the [code]func[/code] keyword, the function's name, parentheses, and a colon: [code]func run():[/code] defines a function named [code]run()[/code].

You then go to the next line to write the function's body. That's the instructions of the function.

Notice how each instruction starts with a leading [code]Tab[/code] character. The computer uses that to know which lines are part of the function.

Throughout the course, you'll see many functions called [code]run()[/code].

Those are functions we created to give you interactive examples."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=7]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-DwfyqdYO.tres"
title = "Function arguments"
type = 0
text = "We use parentheses to call functions because you can give the function [i]arguments[/i] inside the parentheses when calling it.

Here's a [i]sprite[/i] standing straight. If we call the [code]rotate(0.3)[/code] function, the character [i]sprite[/i] turns by 0.3 radians."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=8]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-kGx0c7DD.tres"
title = ""
type = 0
text = ""
visual_element_path = "ExampleRotateSprite.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=9]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-5bmEXrTC.tres"
title = ""
type = 0
text = "The [code]0.3[/code] part between the parentheses is the function's [i]argument[/i].

Arguments are values (numbers, bits of text, and more) that change how the function behaves.

Arguments let you fine-tune the effect of the function call. They can be optional at times, but functions often require arguments in order to work.

For example, calling [code]rotate()[/code] without any argument would result in an error. Without an argument, Godot doesn't know by [i]how much[/i] you intend to rotate the [i]sprite[/i].

Don't worry about memorizing what arguments each function requires or accepts! As a programmer, the documentation will always be close by for you to refer to.

Finally, notice how we use a dot in the number [code]0.3[/code] above: you need to use a dot like this to represent decimal numbers. You can't use commas as they have a different purpose in code."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=10]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-exRjTRhZ.tres"
title = "What are radians?"
type = 1
text = "The value of [code]0.3[/code] is an angle in [i]radians[/i]. In daily life, we're used to measuring angles in degrees. The radian is another scale commonly used in video games and math.

You can convert radians into degrees by multiplying them by 180 and dividing them by PI:

[code]degrees = radians * 180 / PI[/code]

An angle of [code]PI[/code] radians corresponds to [code]180[/code] degrees. And [code]2 * PI[/code] is a full turn: [code]360[/code] degrees.

[b]How do radians work exactly?[/b]

Radians are a way to measure angles based on the radius of a circle.

To get the angle in radians, you take the circle's radius and wrap it around the circle. That angle is [code]1[/code] radian because you are wrapping the radius [code]1[/code] time around the circle.

Because the perimeter of a circle is [code]2 * PI * radius[/code], a full turn (360Â°) corresponds to [code]2 * PI[/code] radians: you need to wrap the radius of a circle [code]2 * PI[/code] times around the circle to make a full circle."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=11]
script = ExtResource( 4 )
quiz_id = "res://course/lesson-3-standing-on-shoulders-of-giants/quiz-LchoN4g2.tres"
question = "What does the code below do?"
content_bbcode = "[code]show()[/code]"
hint = ""
explanation_bbcode = "Both answers were right! Technically, the code calls the [code]show()[/code] function. And doing so makes the game entity visible."
answer_options = [ "It calls the function named \"show\".", "It makes the entity (like a game character or a sprite) visible." ]
valid_answers = [ "It calls the function named \"show\".", "It makes the entity (like a game character or a sprite) visible." ]
is_multiple_choice = true
do_shuffle_answers = true

[sub_resource type="Resource" id=12]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-lkGx0c7D.tres"
title = ""
type = 0
text = "Another example: With the [code]move_local_x()[/code] function, you can move the character to its left and right. The function takes one argument: a number of pixels to offset the entity.

The complementary function [code]move_local_y()[/code] makes the character move up and down.

This is one way to move a character in a game, although we'll see more powerful ways to do this later."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=13]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-DizKUdOC.tres"
title = ""
type = 0
text = ""
visual_element_path = "ExampleMoveSprite.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=17]
script = ExtResource( 5 )
content_id = "res://course/lesson-3-standing-on-shoulders-of-giants/content-Gx0c7DDi.tres"
title = "Why move_local_y(20) moves the character down"
type = 1
text = "With positive values ([code]20[/code]), the code above moves the robot to the right and down.

This is probably different than what you studied at school: in math classes, the horizontal axis points to the right, like here, but the vertical axis points up.

In video games, and generally in 2D computer graphics, the vertical axis points down instead. So whenever you move something on the Y-axis with a positive value, it'll move [i]down[/i]."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=14]
script = ExtResource( 4 )
quiz_id = "res://course/lesson-3-standing-on-shoulders-of-giants/quiz-S3aJeQ0w.tres"
question = "How do you call a function?"
content_bbcode = "What is the syntax you use to call a function in general?"
hint = ""
explanation_bbcode = "To call a function, you need to write its exact name followed by an opening and a closing parenthesis.

If the function requires one or more [i]arguments[/i], you add them inside the parentheses. Whether you need to do that or not depends on the function."
answer_options = [ "You write its name followed by an opening and a closing parenthesis.", "You write its name followed by a colon.", "You write a value, like a number, followed by an opening and a closing parenthesis." ]
valid_answers = [ "You write its name followed by an opening and a closing parenthesis." ]
is_multiple_choice = false
do_shuffle_answers = true

[sub_resource type="Resource" id=15]
script = ExtResource( 3 )
practice_id = "res://course/lesson-3-standing-on-shoulders-of-giants/practice-QiGjB7tK.tres"
title = "Make The Character Visible"
goal = "Our robot character's invisible! Call the [code]show()[/code] function to make it appear.

Please call [code]show()[/code] inside the [code]run()[/code] function, on line [code]2[/code], and keep the [code]Tab[/code] character at the start of the line. The computer needs that to understand your code."
starting_code = "func run():
	"
cursor_line = 0
cursor_column = 0
hints = PoolStringArray( "Your code should call show() inside the run() function." )
validator_script_path = "make-visible/TestsMakeCharacterVisible.gd"
script_slice_path = "make-visible/MakeCharacterVisible.live-editor/slices/MakeCharacterVisible.show.slice.tres"
documentation_references = PoolStringArray( "show" )
documentation_resource = ExtResource( 2 )
description = "The robot's invisible! Call a function to bring it back."

[sub_resource type="Resource" id=16]
script = ExtResource( 3 )
practice_id = "res://course/lesson-3-standing-on-shoulders-of-giants/practice-HJMQ2XNw.tres"
title = "Make the Robot Upright"
goal = "The robot was turned by [code]-0.5[/code] radians. You need to make it upright by calling the [code]rotate()[/code] function.

Please call [code]rotate()[/code] inside the [code]run()[/code] function, on line [code]2[/code], and keep the [code]Tab[/code] character at the start of the line. The computer needs that to understand your code."
starting_code = "func run():
	"
cursor_line = 0
cursor_column = 0
hints = PoolStringArray( "You need to use the rotate() function, and give the proper arguments.", "You need to call the rotate() function inside the run() function.", "Call rotate(0.5) to turn the character 0.5 radians clockwise." )
validator_script_path = "make-upright/TestsMakeRobotUpright.gd"
script_slice_path = "make-upright/MakeRobotUpright.live-editor/slices/MakeRobotUpright.rotate.slice.tres"
documentation_references = PoolStringArray( "rotate" )
documentation_resource = ExtResource( 2 )
description = "The robot is turned sideways. Help it straighten up with a function call."

[resource]
script = ExtResource( 1 )
title = "We Stand on the Shoulders of Giants"
content_blocks = [ SubResource( 1 ), SubResource( 2 ), SubResource( 3 ), SubResource( 5 ), SubResource( 6 ), SubResource( 19 ), SubResource( 18 ), SubResource( 7 ), SubResource( 8 ), SubResource( 9 ), SubResource( 10 ), SubResource( 11 ), SubResource( 12 ), SubResource( 13 ), SubResource( 17 ), SubResource( 14 ) ]
practices = [ SubResource( 15 ), SubResource( 16 ) ]
