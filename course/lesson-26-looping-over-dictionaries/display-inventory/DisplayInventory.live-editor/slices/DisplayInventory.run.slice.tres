[gd_resource type="Resource" load_steps=4 format=2]

[ext_resource path="res://addons/gdscript-slice-exporter/collections/SliceProperties.gd" type="Script" id=1]
[ext_resource path="res://course/lesson-26-looping-over-dictionaries/display-inventory/DisplayInventory.live-editor/scripts/DisplayInventory.gd.tres" type="Resource" id=2]
[ext_resource path="res://course/lesson-26-looping-over-dictionaries/display-inventory/DisplayInventory.live-editor/scene/DisplayInventory.tscn.tres" type="Resource" id=3]

[resource]
script = ExtResource( 1 )
scene_properties = ExtResource( 3 )
script_properties = ExtResource( 2 )
leading_spaces = 0
keyword = "EXPORT"
closing = false
name = "run"
is_full_file = false
start = 16
end = 27
lines_before = [ "extends Control", "", "", "onready var item_nodes := {", "	\"healing heart\": $Margin/Column/Grid/HealingHeart,", "	\"fire gem\": $Margin/Column/Grid/FireGem,", "	\"ice gem\": $Margin/Column/Grid/IceGem,", "}", "", "onready var _grid := $Margin/Column/Grid as GridContainer", "", "", "func _ready() -> void:", "	for node in item_nodes.values():", "		node.hide()", "" ]
lines_after = [ "", "", "func _run():", "	clear_drawing()", "	run()", "	yield(get_tree().create_timer(0.5), \"timeout\")", "	Events.emit_signal(\"practice_run_completed\")", "", "", "func clear_drawing():", "	for child in _grid.get_children():", "		child.hide()", "	", "", "func display_item(item: String, amount: int):", "	if not item in item_nodes:", "		return", "", "	var instance = item_nodes[item]", "	instance.get_node(\"Margin/Item/Amount\").text = str(amount)", "	instance.show()", "", "", "func update_display():", "	clear_drawing()", "	for item in inventory:", "		display_item(item, inventory[item])", "", "", "# Returns a dict to compare with `inventory` to test the practice.", "func get_displayed_items_info() -> Dictionary:", "	var out := {}", "	for child in _grid.get_children():", "		if not child.visible:", "			continue", "		var item_name = child.get_node(\"Margin/Item/Name\").text.to_lower()", "		var amount = int(child.get_node(\"Margin/Item/Amount\").text)", "		out[item_name] = amount", "	return out", "" ]
lines_editable = [ "var inventory := {", "	\"healing heart\": 3,", "	\"fire gem\": 5,", "	\"ice gem\": 1,", "}", "", "func run():", "	for item in inventory:", "		var amount = inventory[item]", "		display_item(item, amount)" ]
