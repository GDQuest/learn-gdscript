[gd_resource type="Resource" load_steps=31 format=2]

[ext_resource path="res://resources/Lesson.gd" type="Script" id=1]
[ext_resource path="res://resources/ContentBlock.gd" type="Script" id=2]
[ext_resource path="res://course/Documentation.tres" type="Resource" id=3]
[ext_resource path="res://resources/Practice.gd" type="Script" id=4]

[sub_resource type="Resource" id=1]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-zKUdOCQi.tres"
title = ""
type = 0
text = "In your code, values have a particular [i]type[/i]. You have already learned about several: whole numbers, decimal numbers, strings, 2D vectors, arrays, and dictionaries.

The computer uses the type of a value to know which operations and functions you can use with them.

As a result, it's essential to understand types: they are not fully compatible with one another, and misusing them will cause errors."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=2]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-GjB7tKRH.tres"
title = "A prime example"
type = 0
text = "You want to display the player's health in the interface. Your code tracks health as a whole number, a value of type [code]int[/code] (short for integer)."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=3]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-JMQ2XNwQ.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/CodeHealthVar.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=4]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-MqAYVjot.tres"
title = ""
type = 0
text = "However, to display it on the player's screen, the computer wants text: it needs a value of type [code]String[/code].

You can concatenate two strings with the [code]+[/code] operator."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=5]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-xF5HUxZP.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/ExampleHelloThere.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=6]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-xY8VUDpP.tres"
title = ""
type = 0
text = "So the following code looks like it could work at first glance."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=7]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-wQDwfyqd.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/CodeAddIntToString.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=8]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-YOexRjTR.tres"
title = ""
type = 0
text = "But when running the code, we get this strange error."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=9]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-hZN4rS5A.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/ErrorInvalidOperands.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=10]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-JTESv5tT.tres"
title = ""
type = 0
text = "It tells you you can't add values of type [code]String[/code] and [code]int[/code]: they're incompatible.

In that case, you need to convert the [code]health[/code] number into a [code]String[/code]."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=11]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-6n1TxlTt.tres"
title = "Converting values into strings"
type = 0
text = "You can get the text representation of a value by calling the [code]str()[/code] function (short for \"string\"). The function returns its argument as a new [code]String[/code].

You can use this function whenever you want to turn some number or vector into text."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=12]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-cyhcIb5B.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/ExamplePrintHealth.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=13]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-nVHARbBW.tres"
title = ""
type = 0
text = "In this case, it turns the number [code]100[/code] into the string [code]\"100\"[/code]. Or whatever number [code]health[/code] is currently."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=23]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-lkGx0c7D.tres"
title = "Converting strings into numbers"
type = 0
text = "You can also convert strings into whole numbers or decimal numbers using respectively the [code]int()[/code] and [code]float()[/code] functions.

Those functions can convert what the player writes in a text field into a number. For example, the number of potions to sell at once in a shop."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=24]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-DizKUdOC.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/CodeStringToInt.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=14]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-NbDGt6fU.tres"
title = "Some types are partially compatible"
type = 0
text = "Most types are incompatible. For example, you can't directly add or multiply an array with a number.

However, some types are [i]partially[/i] compatible. For example, you can multiply or divide a vector by a number. "
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=15]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-qbTxYej4.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/ExamplePrintVectorMult.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=16]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-7MqE82V6.tres"
title = ""
type = 0
text = "It is possible because other developers defined that operation for you under the hood.

However, you cannot directly add or subtract a number to a vector. You'll get an error. That's why, in earlier lessons, you had to access the sub-variables of [code]position[/code] to add numbers to them."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=17]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-jGvGm22r.tres"
title = "A surprising result"
type = 0
text = "Take the following division: [code]3/2[/code]. What result would you expect to get? [code]1.5[/code]?"
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=18]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-tQEn91c9.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/ExamplePrintIntDivision.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=19]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-llf8B67U.tres"
title = ""
type = 0
text = "Well, for the computer, the result of [code]3/2[/code] is [code]1[/code].

Wait, what?!

That's because, for the computer, the division of two whole numbers should always result in a whole number.

When you divide decimal numbers instead, you will get a decimal number as a result."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=20]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-J8TLtZix.tres"
title = ""
type = 0
text = ""
visual_element_path = "visuals/ExamplePrintFloatDivision.tscn"
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=21]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-QOPRw9cl.tres"
title = ""
type = 0
text = "Even if it's just a [code]0[/code], adding a decimal place tells the computer we want decimal numbers.

This shows you how mindful you need to be with types. Otherwise, you will get unexpected results. It can get pretty serious: number errors can lead to bugs like controls not working as intended or charging the wrong price to players. "
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=22]
script = ExtResource( 2 )
content_id = "res://course/lesson-27-value-types/content-sFcSrGQg.tres"
title = "Understanding and mastering types is a key skill for developers"
type = 0
text = "Programming beginners often struggle due to the lack of understanding of types.

Languages like GDScript hide the types from you by default. As a result, if you don't understand that some are incompatible, you can get stuck when facing type-related errors.

You'll want to keep that in mind in your learning journey. When writing code, you will need to understand everything that's happening.

That said, let's practice some type conversions."
visual_element_path = ""
reverse_blocks = false
has_separator = false

[sub_resource type="Resource" id=25]
script = ExtResource( 4 )
practice_id = "res://course/lesson-27-value-types/practice-lkGx0c7D.tres"
title = "Displaying the player's health and energy"
goal = "We want to display the player's energy in the user interface.

Currently, our code has a type error. We're trying to display a whole number while the [code]display_energy()[/code] function expects a string.

Using the [code]str()[/code] function, clear the type error and make the energy amount display on the interface.

You can't change the [code]energy[/code] variable definition: setting it to [code]\"80\"[/code] would break the rest of the game's code. You must convert the value when calling [code]display_energy()[/code]."
starting_code = "var energy = 80

func run():
	display_energy(energy)"
hints = PoolStringArray(  )
validator_script_path = "display-energy/TestDisplayingEnergy.gd"
script_slice_path = "display-energy/DisplayingEnergy.live-editor/slices/DisplayingEnergy.run.slice.tres"
documentation_references = PoolStringArray( "str", "display_energy" )
documentation_resource = ExtResource( 3 )
description = "We want to display the player's energy in the interface but face a type error. Use your new knowledge to fix it."

[sub_resource type="Resource" id=26]
script = ExtResource( 4 )
practice_id = "res://course/lesson-27-value-types/practice-izKUdOCQ.tres"
title = "Letting the player type numbers"
goal = "In our game's shops, we want to let the player type numbers to select the number of items they want to buy or sell.

We need to know the number of items as an [code]int[/code], but the computer reads the player's input as a [code]String[/code].

Your task is to convert the player's input into numbers for the shop's code to work.

Using the [code]int()[/code] function, convert the player's input into a whole number and store the result in the [code]item_count[/code] variable."
starting_code = "var player_input = \"\"
var item_count = 0

func buy_selected_item():
	player_input = get_player_input()
	"
hints = PoolStringArray(  )
validator_script_path = "player-input/TestPlayerInput.gd"
script_slice_path = "player-input/PlayerInput.live-editor/slices/PlayerInput.run.slice.tres"
documentation_references = PoolStringArray( "int" )
documentation_resource = ExtResource( 3 )
description = "We want the player to choose the number of items they buy or sell in our game's shops. But right now, all we get are type errors."

[resource]
script = ExtResource( 1 )
title = "Value types"
content_blocks = [ SubResource( 1 ), SubResource( 2 ), SubResource( 3 ), SubResource( 4 ), SubResource( 5 ), SubResource( 6 ), SubResource( 7 ), SubResource( 8 ), SubResource( 9 ), SubResource( 10 ), SubResource( 11 ), SubResource( 12 ), SubResource( 13 ), SubResource( 23 ), SubResource( 24 ), SubResource( 14 ), SubResource( 15 ), SubResource( 16 ), SubResource( 17 ), SubResource( 18 ), SubResource( 19 ), SubResource( 20 ), SubResource( 21 ), SubResource( 22 ) ]
practices = [ SubResource( 25 ), SubResource( 26 ) ]
